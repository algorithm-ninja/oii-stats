{"version":3,"file":"static/chunks/7144.a4d952525e6d4c8e.js","mappings":"uIACA,IAAAA,EAAA,CADAC,OAAAC,MAAA,EAA6B,+DAA+E,8BAAiC,aAAmB,UAAc,UAAc,GAAO,yCAA6C,kDAAuD,2BAA+B,WAAe,+BAAkC,CAAI,sCAAyC,CAAI,iBAAmB,EAAG,CAAI,+BAAkC,EAAG,sBAA0B,8DAA6D,2CAAmD,6BAAiC,WAAe,UAAc,GAAO,2DAA8D,GAAS,qCAAwC,GAAS,4DAAgE,wDAA+D,EAAI,CAAI,gBAAgB,yCAAgD,EAAG,wBAA4B,UAAc,GAAO,kGAAqG,GAAS,mDAAsD,GAAS,iGAAqG,wGAAiH,+BAAmC,UAAc,GAAO,8CAAkD,0DAAmE,sBAA0B,WAAe,mDAA0D,CAAI,qDAA4D,CAAI,mDAA0D,CAAI,6DAAoE,CAAI,wDAA+D,CAAI,mCAAsC,EAAG,0BAA8B,WAAe,8BAAiC,CAAI,+BAAkC,EAAG,wBAA4B,WAAe,0CAA6C,CAAI,yCAAiD,GAAO,yEAA4E,GAAS,yCAA4C,GAAS,uCAA2C,yBAAmC,GAAO,uEAA0E,GAAS,wCAA4C,4CAAsD,yCAA4C,CAAI,qDAA4D,EAAG,EAAG,gCAAoC,WAAe,mEAA0E,CAAI,kCAAqC,CAAI,yBAAyB,yCAAgD,CAAI,oCAAuC,CAAI,kCAAqC,CAAI,mCAAsC,EAAG,mBAAuB,+BAAuC,GAAO,0CAA8C,yBAAmC,GAAO,uCAA0C,GAAS,wCAA4C,iCAA2C,qBAAwB,EAAG,sBAA0B,sEAA8E,GAAO,4CAA+C,GAAS,0DAA8D,yBAAmC,GAAO,oGAAuG,GAAS,wCAA4C,WAAiB,8BAAiC,EAAG,0BAA8B,6DAAoE,2BAA+B,sEAAkE,yCAAoD,0BAA8B,WAAe,kCAAqC,CAAI,oCAAuC,CAAI,kCAAqC,CAAI,wCAA2C,CAAI,mCAAsC,EAAG,yBAA6B,uEAA8E,yBAA6B,8DAA0D,0CAAqD,qBAAyB,WAAe,mCAAsC,CAAI,iCAAoC,CAAI,4BAA+B,CAAI,yBAA4B,CAAI,+BAAkC,CAAI,iCAAoC,CAAI,6BAAgC,CAAI,sCAAyC,CAAI,8BAAiC,CAAI,uCAA0C,CAAI,+BAAkC,CAAI,6CAAgD,CAAI,+BAAkC,EAAG,gBAAoB,iEAAwE,oBAAwB,iCAAyC,GAAO,0CAA6C,GAAS,wDAA4D,yBAAmC,GAAO,uFAA0F,GAAS,wCAA4C,WAAiB,8BAAiC,EAAG,6BAAiC,iCAAyC,GAAO,mDAAsD,GAAS,wDAA4D,yBAAmC,GAAO,gGAAmG,GAAS,wCAA4C,WAAiB,8BAAiC,EAAG,qBAAyB,kCAA0C,GAAO,2CAA8C,GAAS,yDAA6D,yBAAmC,GAAO,yFAA4F,GAAS,wCAA4C,WAAiB,8BAAiC,EAAG,8BAAkC,kCAA0C,GAAO,oDAAuD,GAAS,yDAA6D,yBAAmC,GAAO,kGAAqG,GAAS,wCAA4C,WAAiB,8BAAiC,EAAG,sBAA0B,yEAAiF,GAAO,oFAAuF,GAAS,4CAAgD,yBAAmC,GAAO,kFAAqF,GAAS,wCAA4C,oCAA8C,8BAAiC,EAAG,sBAA0B,2BAAmC,GAAO,+EAAmF,yBAAmC,GAAO,4EAA+E,GAAS,wCAA4C,WAAiB,8BAAiC,EAAG,oCAAwC,+BAAuC,GAAO,6FAAiG,yBAAmC,GAAO,0FAA6F,GAAS,wCAA4C,WAAiB,8BAAiC,EAAG,qBAAyB,wDAAuD,4CAAqD,qDAGp6Q","sources":["webpack://_N_E/./node_modules/shiki/dist/langs/regexp.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"RegExp\", \"fileTypes\": [\"re\"], \"name\": \"regexp\", \"patterns\": [{ \"include\": \"#regexp-expression\" }], \"repository\": { \"codetags\": { \"captures\": { \"1\": { \"name\": \"keyword.codetag.notation.python\" } }, \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\" }, \"fregexp-base-expression\": { \"patterns\": [{ \"include\": \"#fregexp-quantifier\" }, { \"include\": \"#fstring-formatting-braces\" }, { \"match\": \"\\\\{.*?\\\\}\" }, { \"include\": \"#regexp-base-common\" }] }, \"fregexp-quantifier\": { \"match\": \"(?x)\\n\\\\{\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" }, \"fstring-formatting-braces\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" }, \"2\": { \"name\": \"invalid.illegal.brace.python\" }, \"3\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"comment\": \"empty braces are illegal\", \"match\": \"({)(\\\\s*?)(})\" }, { \"match\": \"({{|}})\", \"name\": \"constant.character.escape.python\" }] }, \"regexp-backreference\": { \"captures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.backreference.regexp\" }, \"3\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\" } }, \"match\": \"(?x)\\n(\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\", \"name\": \"meta.backreference.named.regexp\" }, \"regexp-backreference-number\": { \"captures\": { \"1\": { \"name\": \"entity.name.tag.backreference.regexp\" } }, \"match\": \"(\\\\\\\\[1-9]\\\\d?)\", \"name\": \"meta.backreference.regexp\" }, \"regexp-base-common\": { \"patterns\": [{ \"match\": \"\\\\.\", \"name\": \"support.other.match.any.regexp\" }, { \"match\": \"\\\\^\", \"name\": \"support.other.match.begin.regexp\" }, { \"match\": \"\\\\$\", \"name\": \"support.other.match.end.regexp\" }, { \"match\": \"[+*?]\\\\??\", \"name\": \"keyword.operator.quantifier.regexp\" }, { \"match\": \"\\\\|\", \"name\": \"keyword.operator.disjunction.regexp\" }, { \"include\": \"#regexp-escape-sequence\" }] }, \"regexp-base-expression\": { \"patterns\": [{ \"include\": \"#regexp-quantifier\" }, { \"include\": \"#regexp-base-common\" }] }, \"regexp-character-set\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\" }, { \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"keyword.operator.negation.regexp\" }, \"3\": { \"name\": \"constant.character.set.regexp\" } }, \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.character.set.regexp\", \"patterns\": [{ \"include\": \"#regexp-charecter-set-escapes\" }, { \"match\": \"[^\\\\n]\", \"name\": \"constant.character.set.regexp\" }] }] }, \"regexp-charecter-set-escapes\": { \"patterns\": [{ \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-special\" }, { \"match\": \"\\\\\\\\([0-7]{1,3})\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-comments\": { \"begin\": \"\\\\(\\\\?#\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.comment.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.comment.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"comment.regexp\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"regexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-escape-catchall\": { \"match\": \"\\\\\\\\(.|\\\\n)\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-character\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nx[0-9A-Fa-f]{2}\\n| 0[0-7]{1,2}\\n| [0-7]{3}\\n)\\n\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-sequence\": { \"patterns\": [{ \"include\": \"#regexp-escape-special\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-backreference-number\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-escape-special\": { \"match\": \"\\\\\\\\([AbBdDsSwWZ])\", \"name\": \"support.other.escape.special.regexp\" }, \"regexp-escape-unicode\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n)\\n\", \"name\": \"constant.character.unicode.regexp\" }, \"regexp-expression\": { \"patterns\": [{ \"include\": \"#regexp-base-expression\" }, { \"include\": \"#regexp-character-set\" }, { \"include\": \"#regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#regexp-lookahead\" }, { \"include\": \"#regexp-lookahead-negative\" }, { \"include\": \"#regexp-lookbehind\" }, { \"include\": \"#regexp-lookbehind-negative\" }, { \"include\": \"#regexp-conditional\" }, { \"include\": \"#regexp-parentheses-non-capturing\" }, { \"include\": \"#regexp-parentheses\" }] }, \"regexp-flags\": { \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\", \"name\": \"storage.modifier.flag.regexp\" }, \"regexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-quantifier\": { \"match\": \"(?x)\\n\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" } }, \"scopeName\": \"source.regexp.python\", \"aliases\": [\"regex\"] });\nvar regexp = [\n  lang\n];\n\nexport { regexp as default };\n"],"names":["regexp","Object","freeze"],"sourceRoot":""}