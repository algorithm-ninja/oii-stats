{"version":3,"file":"static/chunks/c24cc598.09c17c173db78ea5.js","mappings":"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AA,KACAC,UAAA,KACAC,SAAA,KACAC,UAAA,KACAC,aAAA,KACAC,SAAA,KACAE,SAAA,KACAC,eAAA,KACAC,UAAA,KACA2J,OAAA,KACAkI,QAAA,KACAC,SAAA,KACAC,MAAA,KACAC,OAAA,KACAC,YAAA,KACAC,OAAA,KACAC,SAAA,KACAC,QAAA,KACAxI,iBAAAra,EACAsa,kBAAAta,EACAua,WAAA,KACAC,QAAA,KACAsI,KAAA,KACAC,WAAA/iB,EACAgjB,oBAAA,KACAC,iBAAA,KACAC,aAAA,KACAC,MAAA,KACArS,KAAA5Q,EACAkjB,MAAA,KACAxG,cAAA,KACAnC,cAAA,KACA4I,OAAA,KACAC,UAAAtjB,EACAujB,UAAAvjB,EACAwjB,UAAAxjB,EACAyjB,cAAA,KACAC,oBAAA,KACAC,eAAA,KACAC,UAAA,KACAxkB,SAAAe,EACAvP,EAAA,KACAizB,OAAA,KACAtS,eAAA,KACAuS,KAAA,KACAC,KAAA,KACAvS,IAAArR,EACAoV,IAAApV,EACAua,gBAAA,KACAsJ,YAAA,KACAC,UAAA,KACAC,mBAAA/jB,EACAgkB,iBAAAhkB,EACAikB,cAAAjkB,EACAkkB,gBAAAlkB,EACAmkB,SAAA,KACAC,QAAA,KACAzvB,OAAA,KACA0vB,OAAA,KACAC,GAAA,KACAC,GAAA,KACAC,MAAA,KACAC,KAAA,KACAjK,eAAA,KACAkK,KAAA,KACAC,MAAA,KACAC,aAAA,KACAC,iBAAAhlB,EACAilB,iBAAAjlB,EACAklB,aAAA,KACAC,QAAA,KACAC,YAAA,KACAC,aAAA,KACAC,MAAA,KACAC,MAAA,KACAC,YAAA,KACA5K,UAAA,KACAC,YAAA,KACAC,sBAAA9a,EACA+a,uBAAA/a,EACAylB,OAAA,KACAC,OAAA,KACA1K,gBAAA7a,EACA8a,iBAAA,KACAC,cAAA,KACAC,eAAA,KACAC,iBAAApb,EACAqb,cAAArb,EACAsb,YAAA,KACA/c,MAAA,KACAonB,aAAA3lB,EACA4lB,aAAA,KACAC,oBAAA,KACAC,WAAA,KACAC,cAAA,KACAC,qBAAA,KACAC,eAAA9lB,EACA0S,SAAA7S,EACAkmB,YAAA,KACApT,OAAA,KACAqT,QAAAnmB,EACAomB,QAAApmB,EACAub,WAAA,KACAC,eAAA,KACAC,cAAA,KACA4K,WAAA,KACAxJ,cAAA,KACA9J,MAAA,KACAuT,kBAAA,KACAt5B,KAAA,KACA2uB,OAAAxb,EACAomB,GAAA,KACA1pB,UAAA,KACA6e,gBAAA,KACA8K,GAAA,KACAC,GAAA,KACA7K,kBAAA5b,EACA6b,mBAAA7b,EACA0mB,QAAA,KACA5K,YAAA,KACAC,aAAA,KACAC,WAAAhc,EACAvG,OAAA,KACAwiB,YAAAjc,EACAoc,cAAApc,EACAqc,aAAA,KACAH,SAAAlc,EACAmc,aAAAnc,EACAgW,QAAA,KACAsG,SAAAtc,EACAuc,YAAAvc,EACAwc,YAAAxc,EACA2mB,QAAA,KACAC,WAAA,KACAC,WAAA,KACA1T,MAAA,KACA2T,OAAA,KACArK,YAAA,KACAC,YAAA,KACA7vB,EAAA,KACAk6B,GAAA,KACAC,GAAA,KACAC,iBAAA,KACAtK,QAAA3c,EACAknB,EAAA,KACAC,GAAA,KACAC,GAAA,KACAC,iBAAA,KACAC,EAAA,KACAC,WAAA,IACA,CACA,GAOAC,GAAA,kBACAC,GAAA,UACAC,GAAA,SA+CA,SAAAC,GAAAC,CAAA,EACA,UAAAA,EAAAt8B,WAAA,EACA,CAMA,SAAAu8B,GAAAD,CAAA,EACA,OAAAA,EAAAE,MAAA,IAAA52B,WAAA,EACA,CAOA,IAAA62B,GAAAxoB,EAAA,CAAAwC,EAAAR,EAAAc,GAAAG,GAAAkD,GAAA,SACAsiB,GAAAzoB,EAAA,CAAAwC,EAAAR,EAAAc,GAAAG,GAAAqU,GAAA,QAmDAoR,GAAA,GAAgBhnB,cAAA,CAoMhBinB,GAAA,CACA,QACA,MACA,SACA,QACA,SACA,QACA,SACA,OACA,OACA,SACA,MACA,SACA,QACA,SACA,OACA,KACA,SACA,QACA,SACA,OACA,KACA,SACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,SACA,OACA,SACA,SACA,QACA,QACA,QACA,SACA,MACA,QACA,SACA,OACA,SACA,SACA,QACA,OACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,MACA,OACA,SACA,SACA,SACA,KACA,SACA,QACA,QACA,SACA,SACA,OACA,QACA,KACA,OACA,QACA,SACA,OACA,MACA,SACA,SACA,QACA,SACA,OACA,OACA,SACA,SACA,OACA,OACA,SACA,QACA,OACA,QACA,MACA,OACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,MACA,OACA,CAOAC,GAAA,CACAC,KAAA,OACAC,MAAA,OACAC,KAAA,OACAC,MAAA,OACAC,OAAA,OACAC,IAAA,OACAC,OAAA,OACAC,KAAA,OACAC,IAAA,OACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,IAAA,OACAC,IAAA,OACAC,IAAA,OACAC,KAAA,OACAC,IAAA,OACAC,OAAA,OACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,OAAA,OACAC,KAAA,OACAC,MAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,IAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,OAAA,OACAC,KAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,MAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,OAAA,OACAC,KAAA,OACAC,MAAA,OACAC,MAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,KAAA,OACAC,OAAA,OACAC,OAAA,OACAC,M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","sources":["webpack://_N_E/./node_modules/@shikijs/core/dist/index.mjs"],"sourcesContent":["import { INITIAL, StackElementMetadata, Registry as Registry$1, Theme } from './textmate.mjs';\nimport { FontStyle } from './types.mjs';\n\nfunction toArray(x) {\n    return Array.isArray(x) ? x : [x];\n}\n/**\n * Slipt a string into lines, each line preserves the line ending.\n */\nfunction splitLines(code, preserveEnding = false) {\n    const parts = code.split(/(\\r?\\n)/g);\n    let index = 0;\n    const lines = [];\n    for (let i = 0; i < parts.length; i += 2) {\n        const line = preserveEnding\n            ? parts[i] + (parts[i + 1] || '')\n            : parts[i];\n        lines.push([line, index]);\n        index += parts[i].length;\n        index += parts[i + 1]?.length || 0;\n    }\n    return lines;\n}\n/**\n * Check if the language is plaintext that is ignored by Shiki.\n *\n * Hard-coded plain text languages: `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isPlainLang(lang) {\n    return !lang || ['plaintext', 'txt', 'text', 'plain'].includes(lang);\n}\n/**\n * Check if the language is specially handled or bypassed by Shiki.\n *\n * Hard-coded languages: `ansi` and plaintexts like `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isSpecialLang(lang) {\n    return lang === 'ansi' || isPlainLang(lang);\n}\n/**\n * Check if the theme is specially handled or bypassed by Shiki.\n *\n * Hard-coded themes: `none`.\n */\nfunction isNoneTheme(theme) {\n    return theme === 'none';\n}\n/**\n * Check if the theme is specially handled or bypassed by Shiki.\n *\n * Hard-coded themes: `none`.\n */\nfunction isSpecialTheme(theme) {\n    return isNoneTheme(theme);\n}\n/**\n * Utility to append class to a hast node\n *\n * If the `property.class` is a string, it will be splitted by space and converted to an array.\n */\nfunction addClassToHast(node, className) {\n    if (!className)\n        return node;\n    node.properties ||= {};\n    node.properties.class ||= [];\n    if (typeof node.properties.class === 'string')\n        node.properties.class = node.properties.class.split(/\\s+/g);\n    if (!Array.isArray(node.properties.class))\n        node.properties.class = [];\n    const targets = Array.isArray(className) ? className : className.split(/\\s+/g);\n    for (const c of targets) {\n        if (c && !node.properties.class.includes(c))\n            node.properties.class.push(c);\n    }\n    return node;\n}\n/**\n * Split a token into multiple tokens by given offsets.\n *\n * The offsets are relative to the token, and should be sorted.\n */\nfunction splitToken(token, offsets) {\n    let lastOffset = 0;\n    const tokens = [];\n    for (const offset of offsets) {\n        if (offset > lastOffset) {\n            tokens.push({\n                ...token,\n                content: token.content.slice(lastOffset, offset),\n                offset: token.offset + lastOffset,\n            });\n        }\n        lastOffset = offset;\n    }\n    if (lastOffset < token.content.length) {\n        tokens.push({\n            ...token,\n            content: token.content.slice(lastOffset),\n            offset: token.offset + lastOffset,\n        });\n    }\n    return tokens;\n}\n/**\n * Split 2D tokens array by given breakpoints.\n */\nfunction splitTokens(tokens, breakpoints) {\n    const sorted = Array.from(breakpoints instanceof Set ? breakpoints : new Set(breakpoints))\n        .sort((a, b) => a - b);\n    if (!sorted.length)\n        return tokens;\n    return tokens.map((line) => {\n        return line.flatMap((token) => {\n            const breakpointsInToken = sorted\n                .filter(i => token.offset < i && i < token.offset + token.content.length)\n                .map(i => i - token.offset)\n                .sort((a, b) => a - b);\n            if (!breakpointsInToken.length)\n                return token;\n            return splitToken(token, breakpointsInToken);\n        });\n    });\n}\nfunction resolveColorReplacements(theme, options) {\n    const replacements = typeof theme === 'string' ? {} : { ...theme.colorReplacements };\n    const themeName = typeof theme === 'string' ? theme : theme.name;\n    for (const [key, value] of Object.entries(options?.colorReplacements || {})) {\n        if (typeof value === 'string')\n            replacements[key] = value;\n        else if (key === themeName)\n            Object.assign(replacements, value);\n    }\n    return replacements;\n}\nfunction applyColorReplacements(color, replacements) {\n    if (!color)\n        return color;\n    return replacements?.[color?.toLowerCase()] || color;\n}\nfunction getTokenStyleObject(token) {\n    const styles = {};\n    if (token.color)\n        styles.color = token.color;\n    if (token.bgColor)\n        styles['background-color'] = token.bgColor;\n    if (token.fontStyle) {\n        if (token.fontStyle & FontStyle.Italic)\n            styles['font-style'] = 'italic';\n        if (token.fontStyle & FontStyle.Bold)\n            styles['font-weight'] = 'bold';\n        if (token.fontStyle & FontStyle.Underline)\n            styles['text-decoration'] = 'underline';\n    }\n    return styles;\n}\nfunction stringifyTokenStyle(token) {\n    return Object.entries(token).map(([key, value]) => `${key}:${value}`).join(';');\n}\n/**\n * Creates a converter between index and position in a code block.\n */\nfunction createPositionConverter(code) {\n    const lines = splitLines(code, true).map(([line]) => line);\n    function indexToPos(index) {\n        let character = index;\n        let line = 0;\n        for (const lineText of lines) {\n            if (character < lineText.length)\n                break;\n            character -= lineText.length;\n            line++;\n        }\n        return { line, character };\n    }\n    function posToIndex(line, character) {\n        let index = 0;\n        for (let i = 0; i < line; i++)\n            index += lines[i].length;\n        index += character;\n        return index;\n    }\n    return {\n        lines,\n        indexToPos,\n        posToIndex,\n    };\n}\n\n// src/colors.ts\nvar namedColors = [\n  \"black\",\n  \"red\",\n  \"green\",\n  \"yellow\",\n  \"blue\",\n  \"magenta\",\n  \"cyan\",\n  \"white\",\n  \"brightBlack\",\n  \"brightRed\",\n  \"brightGreen\",\n  \"brightYellow\",\n  \"brightBlue\",\n  \"brightMagenta\",\n  \"brightCyan\",\n  \"brightWhite\"\n];\n\n// src/decorations.ts\nvar decorations = {\n  1: \"bold\",\n  2: \"dim\",\n  3: \"italic\",\n  4: \"underline\",\n  7: \"reverse\",\n  9: \"strikethrough\"\n};\n\n// src/parser.ts\nfunction findSequence(value, position) {\n  const nextEscape = value.indexOf(\"\\x1B[\", position);\n  if (nextEscape !== -1) {\n    const nextClose = value.indexOf(\"m\", nextEscape);\n    return {\n      sequence: value.substring(nextEscape + 2, nextClose).split(\";\"),\n      startPosition: nextEscape,\n      position: nextClose + 1\n    };\n  }\n  return {\n    position: value.length\n  };\n}\nfunction parseColor(sequence, index) {\n  let offset = 1;\n  const colorMode = sequence[index + offset++];\n  let color;\n  if (colorMode === \"2\") {\n    const rgb = [\n      sequence[index + offset++],\n      sequence[index + offset++],\n      sequence[index + offset]\n    ].map((x) => Number.parseInt(x));\n    if (rgb.length === 3 && !rgb.some((x) => Number.isNaN(x))) {\n      color = {\n        type: \"rgb\",\n        rgb\n      };\n    }\n  } else if (colorMode === \"5\") {\n    const colorIndex = Number.parseInt(sequence[index + offset]);\n    if (!Number.isNaN(colorIndex)) {\n      color = { type: \"table\", index: Number(colorIndex) };\n    }\n  }\n  return [offset, color];\n}\nfunction parseSequence(sequence) {\n  const commands = [];\n  for (let i = 0; i < sequence.length; i++) {\n    const code = sequence[i];\n    const codeInt = Number.parseInt(code);\n    if (Number.isNaN(codeInt))\n      continue;\n    if (codeInt === 0) {\n      commands.push({ type: \"resetAll\" });\n    } else if (codeInt <= 9) {\n      const decoration = decorations[codeInt];\n      if (decoration) {\n        commands.push({\n          type: \"setDecoration\",\n          value: decorations[codeInt]\n        });\n      }\n    } else if (codeInt <= 29) {\n      const decoration = decorations[codeInt - 20];\n      if (decoration) {\n        commands.push({\n          type: \"resetDecoration\",\n          value: decoration\n        });\n      }\n    } else if (codeInt <= 37) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 30] }\n      });\n    } else if (codeInt === 38) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setForegroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 39) {\n      commands.push({\n        type: \"resetForegroundColor\"\n      });\n    } else if (codeInt <= 47) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 40] }\n      });\n    } else if (codeInt === 48) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setBackgroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 49) {\n      commands.push({\n        type: \"resetBackgroundColor\"\n      });\n    } else if (codeInt >= 90 && codeInt <= 97) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 90 + 8] }\n      });\n    } else if (codeInt >= 100 && codeInt <= 107) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 100 + 8] }\n      });\n    }\n  }\n  return commands;\n}\nfunction createAnsiSequenceParser() {\n  let foreground = null;\n  let background = null;\n  let decorations2 = /* @__PURE__ */ new Set();\n  return {\n    parse(value) {\n      const tokens = [];\n      let position = 0;\n      do {\n        const findResult = findSequence(value, position);\n        const text = findResult.sequence ? value.substring(position, findResult.startPosition) : value.substring(position);\n        if (text.length > 0) {\n          tokens.push({\n            value: text,\n            foreground,\n            background,\n            decorations: new Set(decorations2)\n          });\n        }\n        if (findResult.sequence) {\n          const commands = parseSequence(findResult.sequence);\n          for (const styleToken of commands) {\n            if (styleToken.type === \"resetAll\") {\n              foreground = null;\n              background = null;\n              decorations2.clear();\n            } else if (styleToken.type === \"resetForegroundColor\") {\n              foreground = null;\n            } else if (styleToken.type === \"resetBackgroundColor\") {\n              background = null;\n            } else if (styleToken.type === \"resetDecoration\") {\n              decorations2.delete(styleToken.value);\n            }\n          }\n          for (const styleToken of commands) {\n            if (styleToken.type === \"setForegroundColor\") {\n              foreground = styleToken.value;\n            } else if (styleToken.type === \"setBackgroundColor\") {\n              background = styleToken.value;\n            } else if (styleToken.type === \"setDecoration\") {\n              decorations2.add(styleToken.value);\n            }\n          }\n        }\n        position = findResult.position;\n      } while (position < value.length);\n      return tokens;\n    }\n  };\n}\n\n// src/palette.ts\nvar defaultNamedColorsMap = {\n  black: \"#000000\",\n  red: \"#bb0000\",\n  green: \"#00bb00\",\n  yellow: \"#bbbb00\",\n  blue: \"#0000bb\",\n  magenta: \"#ff00ff\",\n  cyan: \"#00bbbb\",\n  white: \"#eeeeee\",\n  brightBlack: \"#555555\",\n  brightRed: \"#ff5555\",\n  brightGreen: \"#00ff00\",\n  brightYellow: \"#ffff55\",\n  brightBlue: \"#5555ff\",\n  brightMagenta: \"#ff55ff\",\n  brightCyan: \"#55ffff\",\n  brightWhite: \"#ffffff\"\n};\nfunction createColorPalette(namedColorsMap = defaultNamedColorsMap) {\n  function namedColor(name) {\n    return namedColorsMap[name];\n  }\n  function rgbColor(rgb) {\n    return `#${rgb.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, \"0\")).join(\"\")}`;\n  }\n  let colorTable;\n  function getColorTable() {\n    if (colorTable) {\n      return colorTable;\n    }\n    colorTable = [];\n    for (let i = 0; i < namedColors.length; i++) {\n      colorTable.push(namedColor(namedColors[i]));\n    }\n    let levels = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; r++) {\n      for (let g = 0; g < 6; g++) {\n        for (let b = 0; b < 6; b++) {\n          colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));\n        }\n      }\n    }\n    let level = 8;\n    for (let i = 0; i < 24; i++, level += 10) {\n      colorTable.push(rgbColor([level, level, level]));\n    }\n    return colorTable;\n  }\n  function tableColor(index) {\n    return getColorTable()[index];\n  }\n  function value(color) {\n    switch (color.type) {\n      case \"named\":\n        return namedColor(color.name);\n      case \"rgb\":\n        return rgbColor(color.rgb);\n      case \"table\":\n        return tableColor(color.index);\n    }\n  }\n  return {\n    value\n  };\n}\n\nfunction tokenizeAnsiWithTheme(theme, fileContents, options) {\n    const colorReplacements = resolveColorReplacements(theme, options);\n    const lines = splitLines(fileContents);\n    const colorPalette = createColorPalette(Object.fromEntries(namedColors.map(name => [\n        name,\n        theme.colors?.[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`],\n    ])));\n    const parser = createAnsiSequenceParser();\n    return lines.map(line => parser.parse(line[0]).map((token) => {\n        let color;\n        let bgColor;\n        if (token.decorations.has('reverse')) {\n            color = token.background ? colorPalette.value(token.background) : theme.bg;\n            bgColor = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n        }\n        else {\n            color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n            bgColor = token.background ? colorPalette.value(token.background) : undefined;\n        }\n        color = applyColorReplacements(color, colorReplacements);\n        bgColor = applyColorReplacements(bgColor, colorReplacements);\n        if (token.decorations.has('dim'))\n            color = dimColor(color);\n        let fontStyle = FontStyle.None;\n        if (token.decorations.has('bold'))\n            fontStyle |= FontStyle.Bold;\n        if (token.decorations.has('italic'))\n            fontStyle |= FontStyle.Italic;\n        if (token.decorations.has('underline'))\n            fontStyle |= FontStyle.Underline;\n        return {\n            content: token.value,\n            offset: line[1], // TODO: more accurate offset? might need to fork ansi-sequence-parser\n            color,\n            bgColor,\n            fontStyle,\n        };\n    }));\n}\n/**\n * Adds 50% alpha to a hex color string or the \"-dim\" postfix to a CSS variable\n */\nfunction dimColor(color) {\n    const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);\n    if (hexMatch) {\n        if (hexMatch[3]) {\n            // convert from #rrggbbaa to #rrggbb(aa/2)\n            const alpha = Math.round(Number.parseInt(hexMatch[3], 16) / 2)\n                .toString(16)\n                .padStart(2, '0');\n            return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;\n        }\n        else if (hexMatch[2]) {\n            // convert from #rrggbb to #rrggbb80\n            return `#${hexMatch[1]}${hexMatch[2]}80`;\n        }\n        else {\n            // convert from #rgb to #rrggbb80\n            return `#${Array.from(hexMatch[1])\n                .map(x => `${x}${x}`)\n                .join('')}80`;\n        }\n    }\n    const cssVarMatch = color.match(/var\\((--[\\w-]+-ansi-[\\w-]+)\\)/);\n    if (cssVarMatch)\n        return `var(${cssVarMatch[1]}-dim)`;\n    return color;\n}\n\nclass ShikiError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'ShikiError';\n    }\n}\n\n/**\n * GrammarState is a special reference object that holds the state of a grammar.\n *\n * It's used to highlight code snippets that are part of the target language.\n */\nclass GrammarState {\n    _stack;\n    lang;\n    theme;\n    constructor(_stack, lang, theme) {\n        this._stack = _stack;\n        this.lang = lang;\n        this.theme = theme;\n    }\n    get scopes() {\n        return getScopes(this._stack);\n    }\n    toJSON() {\n        return {\n            lang: this.lang,\n            theme: this.theme,\n            scopes: this.scopes,\n        };\n    }\n}\nfunction getScopes(stack) {\n    const scopes = [];\n    const visited = new Set();\n    function pushScope(stack) {\n        if (visited.has(stack))\n            return;\n        visited.add(stack);\n        const name = stack?.nameScopesList?.scopeName;\n        if (name)\n            scopes.push(name);\n        if (stack.parent)\n            pushScope(stack.parent);\n    }\n    pushScope(stack);\n    return scopes;\n}\nfunction getGrammarStack(state) {\n    if (!(state instanceof GrammarState))\n        throw new ShikiError('Invalid grammar state');\n    // @ts-expect-error _stack is private\n    return state._stack;\n}\n\n/**\n * Code to tokens, with a simple theme.\n */\nfunction codeToTokensBase(internal, code, options = {}) {\n    const { lang = 'text', theme: themeName = internal.getLoadedThemes()[0], } = options;\n    if (isPlainLang(lang) || isNoneTheme(themeName))\n        return splitLines(code).map(line => [{ content: line[0], offset: line[1] }]);\n    const { theme, colorMap } = internal.setTheme(themeName);\n    if (lang === 'ansi')\n        return tokenizeAnsiWithTheme(theme, code, options);\n    const _grammar = internal.getLanguage(lang);\n    if (options.grammarState) {\n        if (options.grammarState.lang !== _grammar.name) {\n            throw new ShikiError(`Grammar state language \"${options.grammarState.lang}\" does not match highlight language \"${_grammar.name}\"`);\n        }\n        if (options.grammarState.theme !== themeName) {\n            throw new ShikiError(`Grammar state theme \"${options.grammarState.theme}\" does not match highlight theme \"${themeName}\"`);\n        }\n    }\n    return tokenizeWithTheme(code, _grammar, theme, colorMap, options);\n}\nfunction getLastGrammarState(internal, code, options = {}) {\n    const { lang = 'text', theme: themeName = internal.getLoadedThemes()[0], } = options;\n    if (isPlainLang(lang) || isNoneTheme(themeName))\n        throw new ShikiError('Plain language does not have grammar state');\n    if (lang === 'ansi')\n        throw new ShikiError('ANSI language does not have grammar state');\n    const { theme, colorMap } = internal.setTheme(themeName);\n    const _grammar = internal.getLanguage(lang);\n    return new GrammarState(_tokenizeWithTheme(code, _grammar, theme, colorMap, options).stateStack, _grammar.name, theme.name);\n}\nfunction tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n    return _tokenizeWithTheme(code, grammar, theme, colorMap, options).tokens;\n}\nfunction _tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n    const colorReplacements = resolveColorReplacements(theme, options);\n    const { tokenizeMaxLineLength = 0, tokenizeTimeLimit = 500, } = options;\n    const lines = splitLines(code);\n    let stateStack = options.grammarState\n        ? getGrammarStack(options.grammarState)\n        : options.grammarContextCode != null\n            ? _tokenizeWithTheme(options.grammarContextCode, grammar, theme, colorMap, {\n                ...options,\n                grammarState: undefined,\n                grammarContextCode: undefined,\n            }).stateStack\n            : INITIAL;\n    let actual = [];\n    const final = [];\n    const themeSettingsSelectors = [];\n    if (options.includeExplanation) {\n        for (const setting of theme.settings) {\n            let selectors;\n            switch (typeof setting.scope) {\n                case 'string':\n                    selectors = setting.scope.split(/,/).map(scope => scope.trim());\n                    break;\n                case 'object':\n                    selectors = setting.scope;\n                    break;\n                default:\n                    continue;\n            }\n            themeSettingsSelectors.push({\n                settings: setting,\n                selectors: selectors.map(selector => selector.split(/ /)),\n            });\n        }\n    }\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const [line, lineOffset] = lines[i];\n        if (line === '') {\n            actual = [];\n            final.push([]);\n            continue;\n        }\n        // Do not attempt to tokenize if the line length is longer than the `tokenizationMaxLineLength`\n        if (tokenizeMaxLineLength > 0 && line.length >= tokenizeMaxLineLength) {\n            actual = [];\n            final.push([{\n                    content: line,\n                    offset: lineOffset,\n                    color: '',\n                    fontStyle: 0,\n                }]);\n            continue;\n        }\n        let resultWithScopes;\n        let tokensWithScopes;\n        let tokensWithScopesIndex;\n        if (options.includeExplanation) {\n            resultWithScopes = grammar.tokenizeLine(line, stateStack);\n            tokensWithScopes = resultWithScopes.tokens;\n            tokensWithScopesIndex = 0;\n        }\n        const result = grammar.tokenizeLine2(line, stateStack, tokenizeTimeLimit);\n        const tokensLength = result.tokens.length / 2;\n        for (let j = 0; j < tokensLength; j++) {\n            const startIndex = result.tokens[2 * j];\n            const nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\n            if (startIndex === nextStartIndex)\n                continue;\n            const metadata = result.tokens[2 * j + 1];\n            const color = applyColorReplacements(colorMap[StackElementMetadata.getForeground(metadata)], colorReplacements);\n            const fontStyle = StackElementMetadata.getFontStyle(metadata);\n            const token = {\n                content: line.substring(startIndex, nextStartIndex),\n                offset: lineOffset + startIndex,\n                color,\n                fontStyle,\n            };\n            if (options.includeExplanation) {\n                token.explanation = [];\n                let offset = 0;\n                while (startIndex + offset < nextStartIndex) {\n                    const tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\n                    const tokenWithScopesText = line.substring(tokenWithScopes.startIndex, tokenWithScopes.endIndex);\n                    offset += tokenWithScopesText.length;\n                    token.explanation.push({\n                        content: tokenWithScopesText,\n                        scopes: explainThemeScopes(themeSettingsSelectors, tokenWithScopes.scopes),\n                    });\n                    tokensWithScopesIndex += 1;\n                }\n            }\n            actual.push(token);\n        }\n        final.push(actual);\n        actual = [];\n        stateStack = result.ruleStack;\n    }\n    return {\n        tokens: final,\n        stateStack,\n    };\n}\nfunction explainThemeScopes(themeSelectors, scopes) {\n    const result = [];\n    for (let i = 0, len = scopes.length; i < len; i++) {\n        const parentScopes = scopes.slice(0, i);\n        const scope = scopes[i];\n        result[i] = {\n            scopeName: scope,\n            themeMatches: explainThemeScope(themeSelectors, scope, parentScopes),\n        };\n    }\n    return result;\n}\nfunction matchesOne(selector, scope) {\n    return selector === scope\n        || (scope.substring(0, selector.length) === selector && scope[selector.length] === '.');\n}\nfunction matches(selectors, scope, parentScopes) {\n    if (!matchesOne(selectors[selectors.length - 1], scope))\n        return false;\n    let selectorParentIndex = selectors.length - 2;\n    let parentIndex = parentScopes.length - 1;\n    while (selectorParentIndex >= 0 && parentIndex >= 0) {\n        if (matchesOne(selectors[selectorParentIndex], parentScopes[parentIndex]))\n            selectorParentIndex -= 1;\n        parentIndex -= 1;\n    }\n    if (selectorParentIndex === -1)\n        return true;\n    return false;\n}\nfunction explainThemeScope(themeSettingsSelectors, scope, parentScopes) {\n    const result = [];\n    for (const { selectors, settings } of themeSettingsSelectors) {\n        for (const selectorPieces of selectors) {\n            if (matches(selectorPieces, scope, parentScopes)) {\n                result.push(settings);\n                break; // continue to the next theme settings\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Get tokens with multiple themes\n */\nfunction codeToTokensWithThemes(internal, code, options) {\n    const themes = Object.entries(options.themes)\n        .filter(i => i[1])\n        .map(i => ({ color: i[0], theme: i[1] }));\n    const tokens = syncThemesTokenization(...themes.map(t => codeToTokensBase(internal, code, {\n        ...options,\n        theme: t.theme,\n    })));\n    const mergedTokens = tokens[0]\n        .map((line, lineIdx) => line\n        .map((_token, tokenIdx) => {\n        const mergedToken = {\n            content: _token.content,\n            variants: {},\n            offset: _token.offset,\n        };\n        tokens.forEach((t, themeIdx) => {\n            const { content: _, explanation: __, offset: ___, ...styles } = t[lineIdx][tokenIdx];\n            mergedToken.variants[themes[themeIdx].color] = styles;\n        });\n        return mergedToken;\n    }));\n    return mergedTokens;\n}\n/**\n * Break tokens from multiple themes into same tokenization.\n *\n * For example, given two themes that tokenize `console.log(\"hello\")` as:\n *\n * - `console . log (\" hello \")` (6 tokens)\n * - `console .log ( \"hello\" )` (5 tokens)\n *\n * This function will return:\n *\n * - `console . log ( \" hello \" )` (8 tokens)\n * - `console . log ( \" hello \" )` (8 tokens)\n */\nfunction syncThemesTokenization(...themes) {\n    const outThemes = themes.map(() => []);\n    const count = themes.length;\n    for (let i = 0; i < themes[0].length; i++) {\n        const lines = themes.map(t => t[i]);\n        const outLines = outThemes.map(() => []);\n        outThemes.forEach((t, i) => t.push(outLines[i]));\n        const indexes = lines.map(() => 0);\n        const current = lines.map(l => l[0]);\n        while (current.every(t => t)) {\n            const minLength = Math.min(...current.map(t => t.content.length));\n            for (let n = 0; n < count; n++) {\n                const token = current[n];\n                if (token.content.length === minLength) {\n                    outLines[n].push(token);\n                    indexes[n] += 1;\n                    current[n] = lines[n][indexes[n]];\n                }\n                else {\n                    outLines[n].push({\n                        ...token,\n                        content: token.content.slice(0, minLength),\n                    });\n                    current[n] = {\n                        ...token,\n                        content: token.content.slice(minLength),\n                        offset: token.offset + minLength,\n                    };\n                }\n            }\n        }\n    }\n    return outThemes;\n}\n\n/**\n * High-level code-to-tokens API.\n *\n * It will use `codeToTokensWithThemes` or `codeToTokensBase` based on the options.\n */\nfunction codeToTokens(internal, code, options) {\n    let bg;\n    let fg;\n    let tokens;\n    let themeName;\n    let rootStyle;\n    if ('themes' in options) {\n        const { defaultColor = 'light', cssVariablePrefix = '--shiki-', } = options;\n        const themes = Object.entries(options.themes)\n            .filter(i => i[1])\n            .map(i => ({ color: i[0], theme: i[1] }))\n            .sort((a, b) => a.color === defaultColor ? -1 : b.color === defaultColor ? 1 : 0);\n        if (themes.length === 0)\n            throw new ShikiError('`themes` option must not be empty');\n        const themeTokens = codeToTokensWithThemes(internal, code, options);\n        if (defaultColor && !themes.find(t => t.color === defaultColor))\n            throw new ShikiError(`\\`themes\\` option must contain the defaultColor key \\`${defaultColor}\\``);\n        const themeRegs = themes.map(t => internal.getTheme(t.theme));\n        const themesOrder = themes.map(t => t.color);\n        tokens = themeTokens\n            .map(line => line.map(token => mergeToken(token, themesOrder, cssVariablePrefix, defaultColor)));\n        const themeColorReplacements = themes.map(t => resolveColorReplacements(t.theme, options));\n        fg = themes.map((t, idx) => (idx === 0 && defaultColor\n            ? ''\n            : `${cssVariablePrefix + t.color}:`) + (applyColorReplacements(themeRegs[idx].fg, themeColorReplacements[idx]) || 'inherit')).join(';');\n        bg = themes.map((t, idx) => (idx === 0 && defaultColor\n            ? ''\n            : `${cssVariablePrefix + t.color}-bg:`) + (applyColorReplacements(themeRegs[idx].bg, themeColorReplacements[idx]) || 'inherit')).join(';');\n        themeName = `shiki-themes ${themeRegs.map(t => t.name).join(' ')}`;\n        rootStyle = defaultColor ? undefined : [fg, bg].join(';');\n    }\n    else if ('theme' in options) {\n        const colorReplacements = resolveColorReplacements(options.theme, options.colorReplacements);\n        tokens = codeToTokensBase(internal, code, options);\n        const _theme = internal.getTheme(options.theme);\n        bg = applyColorReplacements(_theme.bg, colorReplacements);\n        fg = applyColorReplacements(_theme.fg, colorReplacements);\n        themeName = _theme.name;\n    }\n    else {\n        throw new ShikiError('Invalid options, either `theme` or `themes` must be provided');\n    }\n    return {\n        tokens,\n        fg,\n        bg,\n        themeName,\n        rootStyle,\n    };\n}\nfunction mergeToken(merged, variantsOrder, cssVariablePrefix, defaultColor) {\n    const token = {\n        content: merged.content,\n        explanation: merged.explanation,\n        offset: merged.offset,\n    };\n    const styles = variantsOrder.map(t => getTokenStyleObject(merged.variants[t]));\n    // Get all style keys, for themes that missing some style, we put `inherit` to override as needed\n    const styleKeys = new Set(styles.flatMap(t => Object.keys(t)));\n    const mergedStyles = styles.reduce((acc, cur, idx) => {\n        for (const key of styleKeys) {\n            const value = cur[key] || 'inherit';\n            if (idx === 0 && defaultColor) {\n                acc[key] = value;\n            }\n            else {\n                const keyName = key === 'color' ? '' : key === 'background-color' ? '-bg' : `-${key}`;\n                const varKey = cssVariablePrefix + variantsOrder[idx] + (key === 'color' ? '' : keyName);\n                if (acc[key])\n                    acc[key] += `;${varKey}:${value}`;\n                else\n                    acc[key] = `${varKey}:${value}`;\n            }\n        }\n        return acc;\n    }, {});\n    token.htmlStyle = defaultColor\n        ? stringifyTokenStyle(mergedStyles)\n        : Object.values(mergedStyles).join(';');\n    return token;\n}\n\n/**\n * A built-in transformer to add decorations to the highlighted code.\n */\nfunction transformerDecorations() {\n    const map = new WeakMap();\n    function getContext(shiki) {\n        if (!map.has(shiki.meta)) {\n            const converter = createPositionConverter(shiki.source);\n            function normalizePosition(p) {\n                if (typeof p === 'number') {\n                    return {\n                        ...converter.indexToPos(p),\n                        offset: p,\n                    };\n                }\n                else {\n                    return {\n                        ...p,\n                        offset: converter.posToIndex(p.line, p.character),\n                    };\n                }\n            }\n            const decorations = (shiki.options.decorations || [])\n                .map((d) => ({\n                ...d,\n                start: normalizePosition(d.start),\n                end: normalizePosition(d.end),\n            }));\n            verifyIntersections(decorations);\n            map.set(shiki.meta, {\n                decorations,\n                converter,\n                source: shiki.source,\n            });\n        }\n        return map.get(shiki.meta);\n    }\n    function verifyIntersections(items) {\n        for (let i = 0; i < items.length; i++) {\n            const foo = items[i];\n            if (foo.start.offset > foo.end.offset)\n                throw new ShikiError(`Invalid decoration range: ${JSON.stringify(foo.start)} - ${JSON.stringify(foo.end)}`);\n            for (let j = i + 1; j < items.length; j++) {\n                const bar = items[j];\n                const isFooHasBarStart = foo.start.offset < bar.start.offset && bar.start.offset < foo.end.offset;\n                const isFooHasBarEnd = foo.start.offset < bar.end.offset && bar.end.offset < foo.end.offset;\n                const isBarHasFooStart = bar.start.offset < foo.start.offset && foo.start.offset < bar.end.offset;\n                const isBarHasFooEnd = bar.start.offset < foo.end.offset && foo.end.offset < bar.end.offset;\n                if (isFooHasBarStart || isFooHasBarEnd || isBarHasFooStart || isBarHasFooEnd) {\n                    if (isFooHasBarEnd && isFooHasBarEnd)\n                        continue; // nested\n                    if (isBarHasFooStart && isBarHasFooEnd)\n                        continue; // nested\n                    throw new ShikiError(`Decorations ${JSON.stringify(foo.start)} and ${JSON.stringify(bar.start)} intersect.`);\n                }\n            }\n        }\n    }\n    return {\n        name: 'shiki:decorations',\n        tokens(tokens) {\n            if (!this.options.decorations?.length)\n                return;\n            const ctx = getContext(this);\n            const breakpoints = ctx.decorations.flatMap(d => [d.start.offset, d.end.offset]);\n            const splitted = splitTokens(tokens, breakpoints);\n            return splitted;\n        },\n        code(codeEl) {\n            if (!this.options.decorations?.length)\n                return;\n            const ctx = getContext(this);\n            const lines = Array.from(codeEl.children).filter(i => i.type === 'element' && i.tagName === 'span');\n            if (lines.length !== ctx.converter.lines.length)\n                throw new ShikiError(`Number of lines in code element (${lines.length}) does not match the number of lines in the source (${ctx.converter.lines.length}). Failed to apply decorations.`);\n            function applyLineSection(line, start, end, decoration) {\n                const lineEl = lines[line];\n                let text = '';\n                let startIndex = -1;\n                let endIndex = -1;\n                function stringify(el) {\n                    if (el.type === 'text')\n                        return el.value;\n                    if (el.type === 'element')\n                        return el.children.map(stringify).join('');\n                    return '';\n                }\n                if (start === 0)\n                    startIndex = 0;\n                if (end === 0)\n                    endIndex = 0;\n                if (end === Number.POSITIVE_INFINITY)\n                    endIndex = lineEl.children.length;\n                if (startIndex === -1 || endIndex === -1) {\n                    for (let i = 0; i < lineEl.children.length; i++) {\n                        text += stringify(lineEl.children[i]);\n                        if (startIndex === -1 && text.length === start)\n                            startIndex = i + 1;\n                        if (endIndex === -1 && text.length === end)\n                            endIndex = i + 1;\n                    }\n                }\n                if (startIndex === -1)\n                    throw new ShikiError(`Failed to find start index for decoration ${JSON.stringify(decoration.start)}`);\n                if (endIndex === -1)\n                    throw new ShikiError(`Failed to find end index for decoration ${JSON.stringify(decoration.end)}`);\n                const children = lineEl.children.slice(startIndex, endIndex);\n                // Full line decoration\n                if (!decoration.alwaysWrap && children.length === lineEl.children.length) {\n                    applyDecoration(lineEl, decoration, 'line');\n                }\n                // Single token decoration\n                else if (!decoration.alwaysWrap && children.length === 1 && children[0].type === 'element') {\n                    applyDecoration(children[0], decoration, 'token');\n                }\n                // Create a wrapper for the decoration\n                else {\n                    const wrapper = {\n                        type: 'element',\n                        tagName: 'span',\n                        properties: {},\n                        children,\n                    };\n                    applyDecoration(wrapper, decoration, 'wrapper');\n                    lineEl.children.splice(startIndex, children.length, wrapper);\n                }\n            }\n            function applyLine(line, decoration) {\n                lines[line] = applyDecoration(lines[line], decoration, 'line');\n            }\n            function applyDecoration(el, decoration, type) {\n                const properties = decoration.properties || {};\n                const transform = decoration.transform || (i => i);\n                el.tagName = decoration.tagName || 'span';\n                el.properties = {\n                    ...el.properties,\n                    ...properties,\n                    class: el.properties.class,\n                };\n                if (decoration.properties?.class)\n                    addClassToHast(el, decoration.properties.class);\n                el = transform(el, type) || el;\n                return el;\n            }\n            const lineApplies = [];\n            // Apply decorations in reverse order so the nested ones get applied first.\n            const sorted = ctx.decorations.sort((a, b) => b.start.offset - a.start.offset);\n            for (const decoration of sorted) {\n                const { start, end } = decoration;\n                if (start.line === end.line) {\n                    applyLineSection(start.line, start.character, end.character, decoration);\n                }\n                else if (start.line < end.line) {\n                    applyLineSection(start.line, start.character, Number.POSITIVE_INFINITY, decoration);\n                    for (let i = start.line + 1; i < end.line; i++)\n                        lineApplies.unshift(() => applyLine(i, decoration));\n                    applyLineSection(end.line, 0, end.character, decoration);\n                }\n            }\n            lineApplies.forEach(i => i());\n        },\n    };\n}\n\nconst builtInTransformers = [\n    /* @__PURE__ */ transformerDecorations(),\n];\nfunction getTransformers(options) {\n    return [\n        ...options.transformers || [],\n        ...builtInTransformers,\n    ];\n}\n\nfunction codeToHast(internal, code, options, transformerContext = {\n    meta: {},\n    options,\n    codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n    codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options),\n}) {\n    let input = code;\n    for (const transformer of getTransformers(options))\n        input = transformer.preprocess?.call(transformerContext, input, options) || input;\n    let { tokens, fg, bg, themeName, rootStyle, } = codeToTokens(internal, input, options);\n    const { mergeWhitespaces = true, } = options;\n    if (mergeWhitespaces === true)\n        tokens = mergeWhitespaceTokens(tokens);\n    else if (mergeWhitespaces === 'never')\n        tokens = splitWhitespaceTokens(tokens);\n    const contextSource = {\n        ...transformerContext,\n        get source() {\n            return input;\n        },\n    };\n    for (const transformer of getTransformers(options))\n        tokens = transformer.tokens?.call(contextSource, tokens) || tokens;\n    return tokensToHast(tokens, {\n        ...options,\n        fg,\n        bg,\n        themeName,\n        rootStyle,\n    }, contextSource);\n}\nfunction tokensToHast(tokens, options, transformerContext) {\n    const transformers = getTransformers(options);\n    const lines = [];\n    const root = {\n        type: 'root',\n        children: [],\n    };\n    const { structure = 'classic', } = options;\n    let preNode = {\n        type: 'element',\n        tagName: 'pre',\n        properties: {\n            class: `shiki ${options.themeName || ''}`,\n            style: options.rootStyle || `background-color:${options.bg};color:${options.fg}`,\n            tabindex: '0',\n            ...Object.fromEntries(Array.from(Object.entries(options.meta || {}))\n                .filter(([key]) => !key.startsWith('_'))),\n        },\n        children: [],\n    };\n    let codeNode = {\n        type: 'element',\n        tagName: 'code',\n        properties: {},\n        children: lines,\n    };\n    const lineNodes = [];\n    const context = {\n        ...transformerContext,\n        structure,\n        addClassToHast,\n        get source() {\n            return transformerContext.source;\n        },\n        get tokens() {\n            return tokens;\n        },\n        get options() {\n            return options;\n        },\n        get root() {\n            return root;\n        },\n        get pre() {\n            return preNode;\n        },\n        get code() {\n            return codeNode;\n        },\n        get lines() {\n            return lineNodes;\n        },\n    };\n    tokens.forEach((line, idx) => {\n        if (idx) {\n            if (structure === 'inline')\n                root.children.push({ type: 'element', tagName: 'br', properties: {}, children: [] });\n            else if (structure === 'classic')\n                lines.push({ type: 'text', value: '\\n' });\n        }\n        let lineNode = {\n            type: 'element',\n            tagName: 'span',\n            properties: { class: 'line' },\n            children: [],\n        };\n        let col = 0;\n        for (const token of line) {\n            let tokenNode = {\n                type: 'element',\n                tagName: 'span',\n                properties: {},\n                children: [{ type: 'text', value: token.content }],\n            };\n            const style = token.htmlStyle || stringifyTokenStyle(getTokenStyleObject(token));\n            if (style)\n                tokenNode.properties.style = style;\n            for (const transformer of transformers)\n                tokenNode = transformer?.span?.call(context, tokenNode, idx + 1, col, lineNode) || tokenNode;\n            if (structure === 'inline')\n                root.children.push(tokenNode);\n            else if (structure === 'classic')\n                lineNode.children.push(tokenNode);\n            col += token.content.length;\n        }\n        if (structure === 'classic') {\n            for (const transformer of transformers)\n                lineNode = transformer?.line?.call(context, lineNode, idx + 1) || lineNode;\n            lineNodes.push(lineNode);\n            lines.push(lineNode);\n        }\n    });\n    if (structure === 'classic') {\n        for (const transformer of transformers)\n            codeNode = transformer?.code?.call(context, codeNode) || codeNode;\n        preNode.children.push(codeNode);\n        for (const transformer of transformers)\n            preNode = transformer?.pre?.call(context, preNode) || preNode;\n        root.children.push(preNode);\n    }\n    let result = root;\n    for (const transformer of transformers)\n        result = transformer?.root?.call(context, result) || result;\n    return result;\n}\nfunction mergeWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        const newLine = [];\n        let carryOnContent = '';\n        let firstOffset = 0;\n        line.forEach((token, idx) => {\n            const isUnderline = token.fontStyle && token.fontStyle & FontStyle.Underline;\n            const couldMerge = !isUnderline;\n            if (couldMerge && token.content.match(/^\\s+$/) && line[idx + 1]) {\n                if (!firstOffset)\n                    firstOffset = token.offset;\n                carryOnContent += token.content;\n            }\n            else {\n                if (carryOnContent) {\n                    if (couldMerge) {\n                        newLine.push({\n                            ...token,\n                            offset: firstOffset,\n                            content: carryOnContent + token.content,\n                        });\n                    }\n                    else {\n                        newLine.push({\n                            content: carryOnContent,\n                            offset: firstOffset,\n                        }, token);\n                    }\n                    firstOffset = 0;\n                    carryOnContent = '';\n                }\n                else {\n                    newLine.push(token);\n                }\n            }\n        });\n        return newLine;\n    });\n}\nfunction splitWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        return line.flatMap((token) => {\n            if (token.content.match(/^\\s+$/))\n                return token;\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            const match = token.content.match(/^(\\s*)(.*?)(\\s*)$/);\n            if (!match)\n                return token;\n            const [, leading, content, trailing] = match;\n            if (!leading && !trailing)\n                return token;\n            const expanded = [{\n                    ...token,\n                    offset: token.offset + leading.length,\n                    content,\n                }];\n            if (leading) {\n                expanded.unshift({\n                    content: leading,\n                    offset: token.offset,\n                });\n            }\n            if (trailing) {\n                expanded.push({\n                    content: trailing,\n                    offset: token.offset + leading.length + content.length,\n                });\n            }\n            return expanded;\n        });\n    });\n}\n\n/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nconst htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n];\n\n/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nclass Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property;\n    this.normal = normal;\n    if (space) {\n      this.space = space;\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {};\n/** @type {Normal} */\nSchema.prototype.normal = {};\n/** @type {string|null} */\nSchema.prototype.space = null;\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nfunction merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  let index = -1;\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n\n  return new Schema(property, normal, space)\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalize(value) {\n  return value.toLowerCase()\n}\n\nclass Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property;\n    /** @type {string} */\n    this.attribute = attribute;\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null;\nInfo.prototype.boolean = false;\nInfo.prototype.booleanish = false;\nInfo.prototype.overloadedBoolean = false;\nInfo.prototype.number = false;\nInfo.prototype.commaSeparated = false;\nInfo.prototype.spaceSeparated = false;\nInfo.prototype.commaOrSpaceSeparated = false;\nInfo.prototype.mustUseProperty = false;\nInfo.prototype.defined = false;\n\nlet powers = 0;\n\nconst boolean = increment();\nconst booleanish = increment();\nconst overloadedBoolean = increment();\nconst number = increment();\nconst spaceSeparated = increment();\nconst commaSeparated = increment();\nconst commaOrSpaceSeparated = increment();\n\nfunction increment() {\n  return 2 ** ++powers\n}\n\nvar types = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  boolean: boolean,\n  booleanish: booleanish,\n  commaOrSpaceSeparated: commaOrSpaceSeparated,\n  commaSeparated: commaSeparated,\n  number: number,\n  overloadedBoolean: overloadedBoolean,\n  spaceSeparated: spaceSeparated\n});\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types);\n\nclass DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n\n    super(property, attribute);\n\n    mark(this, 'space', space);\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true;\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\n\nconst own$3 = {}.hasOwnProperty;\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nfunction create(definition) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  /** @type {string} */\n  let prop;\n\n  for (prop in definition.properties) {\n    if (own$3.call(definition.properties, prop)) {\n      const value = definition.properties[prop];\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      );\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true;\n      }\n\n      property[prop] = info;\n\n      normal[normalize(prop)] = prop;\n      normal[normalize(info.attribute)] = prop;\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n\nconst xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});\n\nconst xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n});\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nfunction caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nfunction caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n\nconst xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n});\n\nconst aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});\n\nconst html$3 = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});\n\nconst svg$1 = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});\n\n/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\n\nconst valid = /^data[-\\w.:]+$/i;\nconst dash = /-[a-z]/g;\nconst cap = /[A-Z]/g;\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nfunction find(schema, value) {\n  const normal = normalize(value);\n  let prop = value;\n  let Type = Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4);\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab);\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n\n        value = 'data' + dashes;\n      }\n    }\n\n    Type = DefinedInfo;\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n\n/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nconst html$2 = merge([xml, xlink, xmlns, aria, html$3], 'html');\nconst svg = merge([xml, xlink, xmlns, aria, svg$1], 'svg');\n\n/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own$2 = {}.hasOwnProperty;\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nfunction zwitch(key, options) {\n  const settings = options || {};\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid;\n    const handlers = one.handlers;\n\n    if (value && own$2.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key]);\n      // @ts-expect-error Indexable.\n      fn = own$2.call(handlers, id) ? handlers[id] : one.unknown;\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {};\n  one.invalid = settings.invalid;\n  one.unknown = settings.unknown;\n\n  // @ts-expect-error: matches!\n  return one\n}\n\n/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nfunction core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  );\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = [];\n  let index = -1;\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'));\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toDecimal(code, next, omit) {\n  const value = '&#' + String(code);\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nconst characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n];\n\n/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nconst characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n};\n\n/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nconst dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n];\n\nconst own$1 = {}.hasOwnProperty;\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {};\n\n/** @type {string} */\nlet key;\n\nfor (key in characterEntitiesHtml4) {\n  if (own$1.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key;\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nfunction toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code);\n\n  if (own$1.call(characters, character)) {\n    const name = characters[character];\n    const value = '&' + name;\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n\n/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nfunction formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);\n  /** @type {string|undefined} */\n  let named;\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    );\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal;\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n\n/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nfunction stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\nconst htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g;\n\n// Declare arrays as variables so it can be cached by `stringifyEntities`\nconst bogusCommentEntitySubset = ['>'];\nconst commentEntitySubset = ['<', '>'];\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {\n            subset: bogusCommentEntitySubset\n          })\n        ) +\n        '>'\n    : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: commentEntitySubset\n      })\n    )\n  }\n}\n\n/**\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n\n/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nfunction ccount(value, character) {\n  const source = String(value);\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0;\n  let index = source.indexOf(character);\n\n  while (index !== -1) {\n    count++;\n    index = source.indexOf(character, index + character.length);\n  }\n\n  return count\n}\n\n/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nfunction stringify$1(values, options) {\n  const settings = options || {};\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n\n/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nfunction stringify(values) {\n  return values.join(' ').trim()\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g;\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nfunction whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n */\n\n\nconst siblingAfter = siblings(1);\nconst siblingBefore = siblings(-1);\n\n/** @type {Array<RootContent>} */\nconst emptyChildren$1 = [];\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren$1;\n    let offset = (index || 0) + increment;\n    let next = siblings[offset];\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment;\n        next = siblings[offset];\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty;\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nfunction omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n\nconst closing = omission({\n  body: body$1,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html: html$1,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody: tbody$1,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n});\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true);\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n\nconst opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n});\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1);\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children;\n  /** @type {Array<string>} */\n  const seen = [];\n  let index = -1;\n\n  while (++index < children.length) {\n    const child = children[index];\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName);\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true);\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1, true);\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1);\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Properties} Properties\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n};\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction element(node, index, parent, state) {\n  const schema = state.schema;\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array<string>} */\n  const parts = [];\n  /** @type {string} */\n  let last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg;\n  }\n\n  const attributes = serializeAttributes(state, node.properties);\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  );\n\n  state.schema = schema;\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false;\n\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '');\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1);\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n  let key;\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key]);\n        if (value) values.push(value);\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined;\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key);\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\n  const y = state.settings.allowDangerousCharacters ? 0 : 1;\n  let quote = state.quote;\n  /** @type {string | undefined} */\n  let result;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value);\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  );\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? stringify$1 : stringify)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value);\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    );\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative;\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote;\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n// Declare array as variable so it can be cached by `stringifyEntities`\nconst textEntitySubset = ['<', '&'];\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: textEntitySubset\n        })\n      )\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction root(node, _1, _2, state) {\n  return state.all(node)\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nconst handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n});\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_);\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('stringify-entities').Options} StringifyEntitiesOptions\n */\n\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {};\n\n/** @type {Array<never>} */\nconst emptyChildren = [];\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nfunction toHtml(tree, options) {\n  const options_ = options || emptyOptions;\n  const quote = options_.quote || '\"';\n  const alternative = quote === '\"' ? \"'\" : '\"';\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html$2,\n    quote,\n    alternative\n  };\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nfunction all(parent) {\n  /** @type {Array<string>} */\n  const results = [];\n  const children = (parent && parent.children) || emptyChildren;\n  let index = -1;\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent);\n  }\n\n  return results.join('')\n}\n\n/**\n * Get highlighted code in HTML.\n */\nfunction codeToHtml(internal, code, options) {\n    const context = {\n        meta: {},\n        options,\n        codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n        codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options),\n    };\n    let result = toHtml(codeToHast(internal, code, options, context));\n    for (const transformer of getTransformers(options))\n        result = transformer.postprocess?.call(context, result, options) || result;\n    return result;\n}\n\nasync function main(init) {\n    let wasmMemory;\n    let buffer;\n    const binding = {};\n    function updateGlobalBufferAndViews(buf) {\n        buffer = buf;\n        binding.HEAPU8 = new Uint8Array(buf);\n        binding.HEAPU32 = new Uint32Array(buf);\n    }\n    function _emscripten_get_now() {\n        return typeof performance !== 'undefined' ? performance.now() : Date.now();\n    }\n    function _emscripten_memcpy_big(dest, src, num) {\n        binding.HEAPU8.copyWithin(dest, src, src + num);\n    }\n    function getHeapMax() {\n        return 2147483648;\n    }\n    function emscripten_realloc_buffer(size) {\n        try {\n            wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            return 1;\n        }\n        catch { }\n    }\n    function _emscripten_resize_heap(requestedSize) {\n        const oldSize = binding.HEAPU8.length;\n        requestedSize = requestedSize >>> 0;\n        const maxHeapSize = getHeapMax();\n        if (requestedSize > maxHeapSize)\n            return false;\n        const alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\n        for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            const replacement = emscripten_realloc_buffer(newSize);\n            if (replacement)\n                return true;\n        }\n        return false;\n    }\n    const UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n    function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead = 1024) {\n        const endIdx = idx + maxBytesToRead;\n        let endPtr = idx;\n        while (heapOrArray[endPtr] && !(endPtr >= endIdx))\n            ++endPtr;\n        if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n            return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n        }\n        let str = '';\n        while (idx < endPtr) {\n            let u0 = heapOrArray[idx++];\n            if (!(u0 & 128)) {\n                str += String.fromCharCode(u0);\n                continue;\n            }\n            const u1 = heapOrArray[idx++] & 63;\n            if ((u0 & 224) === 192) {\n                str += String.fromCharCode(((u0 & 31) << 6) | u1);\n                continue;\n            }\n            const u2 = heapOrArray[idx++] & 63;\n            if ((u0 & 240) === 224) {\n                u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n            }\n            else {\n                u0 = ((u0 & 7) << 18)\n                    | (u1 << 12)\n                    | (u2 << 6)\n                    | (heapOrArray[idx++] & 63);\n            }\n            if (u0 < 65536) {\n                str += String.fromCharCode(u0);\n            }\n            else {\n                const ch = u0 - 65536;\n                str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n            }\n        }\n        return str;\n    }\n    function UTF8ToString(ptr, maxBytesToRead) {\n        return ptr ? UTF8ArrayToString(binding.HEAPU8, ptr, maxBytesToRead) : '';\n    }\n    const asmLibraryArg = {\n        emscripten_get_now: _emscripten_get_now,\n        emscripten_memcpy_big: _emscripten_memcpy_big,\n        emscripten_resize_heap: _emscripten_resize_heap,\n        fd_write: () => 0,\n    };\n    async function createWasm() {\n        const info = {\n            env: asmLibraryArg,\n            wasi_snapshot_preview1: asmLibraryArg,\n        };\n        const exports = await init(info);\n        wasmMemory = exports.memory;\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        Object.assign(binding, exports);\n        binding.UTF8ToString = UTF8ToString;\n    }\n    await createWasm();\n    return binding;\n}\n\n/* ---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *-------------------------------------------------------- */\nlet onigBinding = null;\nlet defaultDebugCall = false;\nfunction throwLastOnigError(onigBinding) {\n    throw new ShikiError(onigBinding.UTF8ToString(onigBinding.getLastOnigError()));\n}\nclass UtfString {\n    static _utf8ByteLength(str) {\n        let result = 0;\n        for (let i = 0, len = str.length; i < len; i++) {\n            const charCode = str.charCodeAt(i);\n            let codepoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i + 1 < len) {\n                    const nextCharCode = str.charCodeAt(i + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codepoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (codepoint <= 0x7F)\n                result += 1;\n            else if (codepoint <= 0x7FF)\n                result += 2;\n            else if (codepoint <= 0xFFFF)\n                result += 3;\n            else\n                result += 4;\n            if (wasSurrogatePair)\n                i++;\n        }\n        return result;\n    }\n    utf16Length;\n    utf8Length;\n    utf16Value;\n    utf8Value;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    constructor(str) {\n        const utf16Length = str.length;\n        const utf8Length = UtfString._utf8ByteLength(str);\n        const computeIndicesMapping = (utf8Length !== utf16Length);\n        const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;\n        if (computeIndicesMapping)\n            utf16OffsetToUtf8[utf16Length] = utf8Length;\n        const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;\n        if (computeIndicesMapping)\n            utf8OffsetToUtf16[utf8Length] = utf16Length;\n        const utf8Value = new Uint8Array(utf8Length);\n        let i8 = 0;\n        for (let i16 = 0; i16 < utf16Length; i16++) {\n            const charCode = str.charCodeAt(i16);\n            let codePoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i16 + 1 < utf16Length) {\n                    const nextCharCode = str.charCodeAt(i16 + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codePoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (computeIndicesMapping) {\n                utf16OffsetToUtf8[i16] = i8;\n                if (wasSurrogatePair)\n                    utf16OffsetToUtf8[i16 + 1] = i8;\n                if (codePoint <= 0x7F) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                }\n                else if (codePoint <= 0x7FF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                }\n                else if (codePoint <= 0xFFFF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                }\n                else {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                    utf8OffsetToUtf16[i8 + 3] = i16;\n                }\n            }\n            if (codePoint <= 0x7F) {\n                utf8Value[i8++] = codePoint;\n            }\n            else if (codePoint <= 0x7FF) {\n                utf8Value[i8++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else if (codePoint <= 0xFFFF) {\n                utf8Value[i8++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else {\n                utf8Value[i8++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            if (wasSurrogatePair)\n                i16++;\n        }\n        this.utf16Length = utf16Length;\n        this.utf8Length = utf8Length;\n        this.utf16Value = str;\n        this.utf8Value = utf8Value;\n        this.utf16OffsetToUtf8 = utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utf8OffsetToUtf16;\n    }\n    createString(onigBinding) {\n        const result = onigBinding.omalloc(this.utf8Length);\n        onigBinding.HEAPU8.set(this.utf8Value, result);\n        return result;\n    }\n}\nclass OnigString {\n    static LAST_ID = 0;\n    static _sharedPtr = 0; // a pointer to a string of 10000 bytes\n    static _sharedPtrInUse = false;\n    id = (++OnigString.LAST_ID);\n    _onigBinding;\n    content;\n    utf16Length;\n    utf8Length;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    ptr;\n    constructor(str) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        this._onigBinding = onigBinding;\n        this.content = str;\n        const utfString = new UtfString(str);\n        this.utf16Length = utfString.utf16Length;\n        this.utf8Length = utfString.utf8Length;\n        this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;\n        if (this.utf8Length < 10000 && !OnigString._sharedPtrInUse) {\n            if (!OnigString._sharedPtr)\n                OnigString._sharedPtr = onigBinding.omalloc(10000);\n            OnigString._sharedPtrInUse = true;\n            onigBinding.HEAPU8.set(utfString.utf8Value, OnigString._sharedPtr);\n            this.ptr = OnigString._sharedPtr;\n        }\n        else {\n            this.ptr = utfString.createString(onigBinding);\n        }\n    }\n    convertUtf8OffsetToUtf16(utf8Offset) {\n        if (this.utf8OffsetToUtf16) {\n            if (utf8Offset < 0)\n                return 0;\n            if (utf8Offset > this.utf8Length)\n                return this.utf16Length;\n            return this.utf8OffsetToUtf16[utf8Offset];\n        }\n        return utf8Offset;\n    }\n    convertUtf16OffsetToUtf8(utf16Offset) {\n        if (this.utf16OffsetToUtf8) {\n            if (utf16Offset < 0)\n                return 0;\n            if (utf16Offset > this.utf16Length)\n                return this.utf8Length;\n            return this.utf16OffsetToUtf8[utf16Offset];\n        }\n        return utf16Offset;\n    }\n    dispose() {\n        if (this.ptr === OnigString._sharedPtr)\n            OnigString._sharedPtrInUse = false;\n        else\n            this._onigBinding.ofree(this.ptr);\n    }\n}\nclass OnigScanner {\n    _onigBinding;\n    _ptr;\n    constructor(patterns) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        const strPtrsArr = [];\n        const strLenArr = [];\n        for (let i = 0, len = patterns.length; i < len; i++) {\n            const utfString = new UtfString(patterns[i]);\n            strPtrsArr[i] = utfString.createString(onigBinding);\n            strLenArr[i] = utfString.utf8Length;\n        }\n        const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);\n        const strLenPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);\n        const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);\n        for (let i = 0, len = patterns.length; i < len; i++)\n            onigBinding.ofree(strPtrsArr[i]);\n        onigBinding.ofree(strLenPtr);\n        onigBinding.ofree(strPtrsPtr);\n        if (scannerPtr === 0)\n            throwLastOnigError(onigBinding);\n        this._onigBinding = onigBinding;\n        this._ptr = scannerPtr;\n    }\n    dispose() {\n        this._onigBinding.freeOnigScanner(this._ptr);\n    }\n    findNextMatchSync(string, startPosition, arg) {\n        let debugCall = defaultDebugCall;\n        let options = 0 /* FindOption.None */;\n        if (typeof arg === 'number') {\n            if (arg & 8 /* FindOption.DebugCall */)\n                debugCall = true;\n            options = arg;\n        }\n        else if (typeof arg === 'boolean') {\n            debugCall = arg;\n        }\n        if (typeof string === 'string') {\n            string = new OnigString(string);\n            const result = this._findNextMatchSync(string, startPosition, debugCall, options);\n            string.dispose();\n            return result;\n        }\n        return this._findNextMatchSync(string, startPosition, debugCall, options);\n    }\n    _findNextMatchSync(string, startPosition, debugCall, options) {\n        const onigBinding = this._onigBinding;\n        let resultPtr;\n        if (debugCall)\n            resultPtr = onigBinding.findNextOnigScannerMatchDbg(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        else\n            resultPtr = onigBinding.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        if (resultPtr === 0) {\n            // no match\n            return null;\n        }\n        const HEAPU32 = onigBinding.HEAPU32;\n        let offset = resultPtr / 4; // byte offset -> uint32 offset\n        const index = HEAPU32[offset++];\n        const count = HEAPU32[offset++];\n        const captureIndices = [];\n        for (let i = 0; i < count; i++) {\n            const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            captureIndices[i] = {\n                start: beg,\n                end,\n                length: end - beg,\n            };\n        }\n        return {\n            index,\n            captureIndices,\n        };\n    }\n}\nfunction isInstantiatorOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.instantiator === 'function');\n}\nfunction isInstantiatorModule(dataOrOptions) {\n    return (typeof dataOrOptions.default === 'function');\n}\nfunction isDataOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.data !== 'undefined');\n}\nfunction isResponse(dataOrOptions) {\n    return (typeof Response !== 'undefined' && dataOrOptions instanceof Response);\n}\nfunction isArrayBuffer(data) {\n    return (typeof ArrayBuffer !== 'undefined' && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)))\n        // eslint-disable-next-line node/prefer-global/buffer\n        || (typeof Buffer !== 'undefined' && Buffer.isBuffer?.(data))\n        || (typeof SharedArrayBuffer !== 'undefined' && data instanceof SharedArrayBuffer)\n        || (typeof Uint32Array !== 'undefined' && data instanceof Uint32Array);\n}\nlet initPromise;\nfunction loadWasm(options) {\n    if (initPromise)\n        return initPromise;\n    async function _load() {\n        onigBinding = await main(async (info) => {\n            let instance = options;\n            instance = await instance;\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (isInstantiatorOptionsObject(instance)) {\n                instance = await instance.instantiator(info);\n            }\n            else if (isInstantiatorModule(instance)) {\n                instance = await instance.default(info);\n            }\n            else {\n                if (isDataOptionsObject(instance))\n                    instance = instance.data;\n                if (isResponse(instance)) {\n                    if (typeof WebAssembly.instantiateStreaming === 'function')\n                        instance = await _makeResponseStreamingLoader(instance)(info);\n                    else\n                        instance = await _makeResponseNonStreamingLoader(instance)(info);\n                }\n                else if (isArrayBuffer(instance)) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                // import(\"shiki/onig.wasm\") returns `{ default: WebAssembly.Module }` on cloudflare workers\n                // https://developers.cloudflare.com/workers/wrangler/bundling/\n                else if (instance instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                else if ('default' in instance && instance.default instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance.default)(info);\n                }\n            }\n            if ('instance' in instance)\n                instance = instance.instance;\n            if ('exports' in instance)\n                instance = instance.exports;\n            return instance;\n        });\n    }\n    initPromise = _load();\n    return initPromise;\n}\nfunction _makeArrayBufferLoader(data) {\n    return importObject => WebAssembly.instantiate(data, importObject);\n}\nfunction _makeResponseStreamingLoader(data) {\n    return importObject => WebAssembly.instantiateStreaming(data, importObject);\n}\nfunction _makeResponseNonStreamingLoader(data) {\n    return async (importObject) => {\n        const arrayBuffer = await data.arrayBuffer();\n        return WebAssembly.instantiate(arrayBuffer, importObject);\n    };\n}\nfunction createOnigString(str) {\n    return new OnigString(str);\n}\nfunction createOnigScanner(patterns) {\n    return new OnigScanner(patterns);\n}\n\n/**\n * https://github.com/microsoft/vscode/blob/f7f05dee53fb33fe023db2e06e30a89d3094488f/src/vs/platform/theme/common/colorRegistry.ts#L258-L268\n */\nconst VSCODE_FALLBACK_EDITOR_FG = { light: '#333333', dark: '#bbbbbb' };\nconst VSCODE_FALLBACK_EDITOR_BG = { light: '#fffffe', dark: '#1e1e1e' };\nconst RESOLVED_KEY = '__shiki_resolved';\n/**\n * Normalize a textmate theme to shiki theme\n */\nfunction normalizeTheme(rawTheme) {\n    // @ts-expect-error private field\n    if (rawTheme?.[RESOLVED_KEY])\n        return rawTheme;\n    const theme = {\n        ...rawTheme,\n    };\n    // Fallback settings\n    if (theme.tokenColors && !theme.settings) {\n        theme.settings = theme.tokenColors;\n        delete theme.tokenColors;\n    }\n    theme.type ||= 'dark';\n    theme.colorReplacements = { ...theme.colorReplacements };\n    theme.settings ||= [];\n    // Guess fg/bg colors\n    let { bg, fg } = theme;\n    if (!bg || !fg) {\n        /**\n         * First try:\n         * Theme might contain a global `tokenColor` without `name` or `scope`\n         * Used as default value for foreground/background\n         */\n        const globalSetting = theme.settings\n            ? theme.settings.find((s) => !s.name && !s.scope)\n            : undefined;\n        if (globalSetting?.settings?.foreground)\n            fg = globalSetting.settings.foreground;\n        if (globalSetting?.settings?.background)\n            bg = globalSetting.settings.background;\n        /**\n         * Second try:\n         * If there's no global `tokenColor` without `name` or `scope`\n         * Use `editor.foreground` and `editor.background`\n         */\n        if (!fg && theme?.colors?.['editor.foreground'])\n            fg = theme.colors['editor.foreground'];\n        if (!bg && theme?.colors?.['editor.background'])\n            bg = theme.colors['editor.background'];\n        /**\n         * Last try:\n         * If there's no fg/bg color specified in theme, use default\n         */\n        if (!fg)\n            fg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\n        if (!bg)\n            bg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\n        theme.fg = fg;\n        theme.bg = bg;\n    }\n    // Push a no-scope setting with fallback colors\n    if (!(theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope)) {\n        theme.settings.unshift({\n            settings: {\n                foreground: theme.fg,\n                background: theme.bg,\n            },\n        });\n    }\n    // Push non-hex colors to color replacements, as `vscode-textmate` doesn't support them\n    let replacementCount = 0;\n    const replacementMap = new Map();\n    function getReplacementColor(value) {\n        if (replacementMap.has(value))\n            return replacementMap.get(value);\n        replacementCount += 1;\n        const hex = `#${replacementCount.toString(16).padStart(8, '0').toLowerCase()}`;\n        if (theme.colorReplacements?.[`#${hex}`]) // already exists\n            return getReplacementColor(value);\n        replacementMap.set(value, hex);\n        return hex;\n    }\n    theme.settings = theme.settings.map((setting) => {\n        const replaceFg = setting.settings?.foreground && !setting.settings.foreground.startsWith('#');\n        const replaceBg = setting.settings?.background && !setting.settings.background.startsWith('#');\n        if (!replaceFg && !replaceBg)\n            return setting;\n        const clone = {\n            ...setting,\n            settings: {\n                ...setting.settings,\n            },\n        };\n        if (replaceFg) {\n            const replacement = getReplacementColor(setting.settings.foreground);\n            theme.colorReplacements[replacement] = setting.settings.foreground;\n            clone.settings.foreground = replacement;\n        }\n        if (replaceBg) {\n            const replacement = getReplacementColor(setting.settings.background);\n            theme.colorReplacements[replacement] = setting.settings.background;\n            clone.settings.background = replacement;\n        }\n        return clone;\n    });\n    for (const key of Object.keys(theme.colors || {})) {\n        // Only patch for known keys\n        if (key === 'editor.foreground' || key === 'editor.background' || key.startsWith('terminal.ansi')) {\n            if (!theme.colors[key]?.startsWith('#')) {\n                const replacement = getReplacementColor(theme.colors[key]);\n                theme.colorReplacements[replacement] = theme.colors[key];\n                theme.colors[key] = replacement;\n            }\n        }\n    }\n    Object.defineProperty(theme, RESOLVED_KEY, {\n        enumerable: false,\n        writable: false,\n        value: true,\n    });\n    return theme;\n}\n\nclass Registry extends Registry$1 {\n    _resolver;\n    _themes;\n    _langs;\n    _alias;\n    _resolvedThemes = new Map();\n    _resolvedGrammars = new Map();\n    _langMap = new Map();\n    _langGraph = new Map();\n    _textmateThemeCache = new WeakMap();\n    _loadedThemesCache = null;\n    _loadedLanguagesCache = null;\n    constructor(_resolver, _themes, _langs, _alias = {}) {\n        super(_resolver);\n        this._resolver = _resolver;\n        this._themes = _themes;\n        this._langs = _langs;\n        this._alias = _alias;\n        _themes.forEach(t => this.loadTheme(t));\n        _langs.forEach(l => this.loadLanguage(l));\n    }\n    getTheme(theme) {\n        if (typeof theme === 'string')\n            return this._resolvedThemes.get(theme);\n        else\n            return this.loadTheme(theme);\n    }\n    loadTheme(theme) {\n        const _theme = normalizeTheme(theme);\n        if (_theme.name) {\n            this._resolvedThemes.set(_theme.name, _theme);\n            // Reset cache\n            this._loadedThemesCache = null;\n        }\n        return _theme;\n    }\n    getLoadedThemes() {\n        if (!this._loadedThemesCache)\n            this._loadedThemesCache = [...this._resolvedThemes.keys()];\n        return this._loadedThemesCache;\n    }\n    // Override and re-implement this method to cache the textmate themes as `TextMateTheme.createFromRawTheme`\n    // is expensive. Themes can switch often especially for dual-theme support.\n    //\n    // The parent class also accepts `colorMap` as the second parameter, but since we don't use that,\n    // we omit here so it's easier to cache the themes.\n    setTheme(theme) {\n        let textmateTheme = this._textmateThemeCache.get(theme);\n        if (!textmateTheme) {\n            textmateTheme = Theme.createFromRawTheme(theme);\n            this._textmateThemeCache.set(theme, textmateTheme);\n        }\n        // @ts-expect-error Access private `_syncRegistry`, but should work in runtime\n        this._syncRegistry.setTheme(textmateTheme);\n    }\n    getGrammar(name) {\n        if (this._alias[name]) {\n            const resolved = new Set([name]);\n            while (this._alias[name]) {\n                name = this._alias[name];\n                if (resolved.has(name))\n                    throw new ShikiError(`Circular alias \\`${Array.from(resolved).join(' -> ')} -> ${name}\\``);\n                resolved.add(name);\n            }\n        }\n        return this._resolvedGrammars.get(name);\n    }\n    async loadLanguage(lang) {\n        if (this.getGrammar(lang.name))\n            return;\n        const embeddedLazilyBy = new Set([...this._langMap.values()]\n            .filter(i => i.embeddedLangsLazy?.includes(lang.name)));\n        this._resolver.addLanguage(lang);\n        const grammarConfig = {\n            balancedBracketSelectors: lang.balancedBracketSelectors || ['*'],\n            unbalancedBracketSelectors: lang.unbalancedBracketSelectors || [],\n        };\n        // @ts-expect-error Private members, set this to override the previous grammar (that can be a stub)\n        this._syncRegistry._rawGrammars.set(lang.scopeName, lang);\n        const g = await this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);\n        g.name = lang.name;\n        this._resolvedGrammars.set(lang.name, g);\n        if (lang.aliases) {\n            lang.aliases.forEach((alias) => {\n                this._alias[alias] = lang.name;\n            });\n        }\n        // Reset cache\n        this._loadedLanguagesCache = null;\n        // If there is a language that embeds this language lazily, we need to reload it\n        if (embeddedLazilyBy.size) {\n            for (const e of embeddedLazilyBy) {\n                this._resolvedGrammars.delete(e.name);\n                // Reset cache\n                this._loadedLanguagesCache = null;\n                // @ts-expect-error clear cache\n                this._syncRegistry?._injectionGrammars?.delete(e.scopeName);\n                // @ts-expect-error clear cache\n                this._syncRegistry?._grammars?.delete(e.scopeName);\n                await this.loadLanguage(this._langMap.get(e.name));\n            }\n        }\n    }\n    async init() {\n        this._themes.map(t => this.loadTheme(t));\n        await this.loadLanguages(this._langs);\n    }\n    dispose() {\n        super.dispose();\n        this._resolvedThemes.clear();\n        this._resolvedGrammars.clear();\n        this._langMap.clear();\n        this._langGraph.clear();\n        this._loadedThemesCache = null;\n    }\n    async loadLanguages(langs) {\n        for (const lang of langs)\n            this.resolveEmbeddedLanguages(lang);\n        const langsGraphArray = Array.from(this._langGraph.entries());\n        const missingLangs = langsGraphArray.filter(([_, lang]) => !lang);\n        if (missingLangs.length) {\n            const dependents = langsGraphArray\n                .filter(([_, lang]) => lang && lang.embeddedLangs?.some(l => missingLangs.map(([name]) => name).includes(l)))\n                .filter(lang => !missingLangs.includes(lang));\n            throw new ShikiError(`Missing languages ${missingLangs.map(([name]) => `\\`${name}\\``).join(', ')}, required by ${dependents.map(([name]) => `\\`${name}\\``).join(', ')}`);\n        }\n        for (const [_, lang] of langsGraphArray)\n            this._resolver.addLanguage(lang);\n        for (const [_, lang] of langsGraphArray)\n            await this.loadLanguage(lang);\n    }\n    getLoadedLanguages() {\n        if (!this._loadedLanguagesCache) {\n            this._loadedLanguagesCache = [\n                ...new Set([...this._resolvedGrammars.keys(), ...Object.keys(this._alias)]),\n            ];\n        }\n        return this._loadedLanguagesCache;\n    }\n    resolveEmbeddedLanguages(lang) {\n        this._langMap.set(lang.name, lang);\n        this._langGraph.set(lang.name, lang);\n        if (lang.embeddedLangs) {\n            for (const embeddedLang of lang.embeddedLangs)\n                this._langGraph.set(embeddedLang, this._langMap.get(embeddedLang));\n        }\n    }\n}\n\nclass Resolver {\n    _langs = new Map();\n    _scopeToLang = new Map();\n    _injections = new Map();\n    _onigLibPromise;\n    constructor(onigLibPromise, langs) {\n        this._onigLibPromise = onigLibPromise;\n        langs.forEach(i => this.addLanguage(i));\n    }\n    get onigLib() {\n        return this._onigLibPromise;\n    }\n    getLangRegistration(langIdOrAlias) {\n        return this._langs.get(langIdOrAlias);\n    }\n    async loadGrammar(scopeName) {\n        return this._scopeToLang.get(scopeName);\n    }\n    addLanguage(l) {\n        this._langs.set(l.name, l);\n        if (l.aliases) {\n            l.aliases.forEach((a) => {\n                this._langs.set(a, l);\n            });\n        }\n        this._scopeToLang.set(l.scopeName, l);\n        if (l.injectTo) {\n            l.injectTo.forEach((i) => {\n                if (!this._injections.get(i))\n                    this._injections.set(i, []);\n                this._injections.get(i).push(l.scopeName);\n            });\n        }\n    }\n    getInjections(scopeName) {\n        const scopeParts = scopeName.split('.');\n        let injections = [];\n        for (let i = 1; i <= scopeParts.length; i++) {\n            const subScopeName = scopeParts.slice(0, i).join('.');\n            injections = [...injections, ...(this._injections.get(subScopeName) || [])];\n        }\n        return injections;\n    }\n}\n\nlet _defaultWasmLoader;\n/**\n * Set the default wasm loader for `loadWasm`.\n * @internal\n */\nfunction setDefaultWasmLoader(_loader) {\n    _defaultWasmLoader = _loader;\n}\nlet instancesCount = 0;\n/**\n * Get the minimal shiki context for rendering.\n */\nasync function createShikiInternal(options = {}) {\n    instancesCount += 1;\n    if (options.warnings !== false && instancesCount >= 10 && instancesCount % 10 === 0)\n        console.warn(`[Shiki] ${instancesCount} instances have been created. Shiki is supposed to be used as a singleton, consider refactoring your code to cache your highlighter instance; Or call \\`highlighter.dispose()\\` to release unused instances.`);\n    let isDisposed = false;\n    async function normalizeGetter(p) {\n        return Promise.resolve(typeof p === 'function' ? p() : p).then(r => r.default || r);\n    }\n    async function resolveLangs(langs) {\n        return Array.from(new Set((await Promise.all(langs\n            .filter(l => !isSpecialLang(l))\n            .map(async (lang) => await normalizeGetter(lang).then(r => Array.isArray(r) ? r : [r])))).flat()));\n    }\n    const wasmLoader = options.loadWasm || _defaultWasmLoader;\n    const [themes, langs,] = await Promise.all([\n        Promise.all((options.themes || []).map(normalizeGetter)).then(r => r.map(normalizeTheme)),\n        resolveLangs(options.langs || []),\n        wasmLoader ? loadWasm(wasmLoader) : undefined,\n    ]);\n    const resolver = new Resolver(Promise.resolve({\n        createOnigScanner(patterns) {\n            return createOnigScanner(patterns);\n        },\n        createOnigString(s) {\n            return createOnigString(s);\n        },\n    }), langs);\n    const _registry = new Registry(resolver, themes, langs, options.langAlias);\n    await _registry.init();\n    let _lastTheme;\n    function getLanguage(name) {\n        ensureNotDisposed();\n        const _lang = _registry.getGrammar(typeof name === 'string' ? name : name.name);\n        if (!_lang)\n            throw new ShikiError(`Language \\`${name}\\` not found, you may need to load it first`);\n        return _lang;\n    }\n    function getTheme(name) {\n        if (name === 'none')\n            return { bg: '', fg: '', name: 'none', settings: [], type: 'dark' };\n        ensureNotDisposed();\n        const _theme = _registry.getTheme(name);\n        if (!_theme)\n            throw new ShikiError(`Theme \\`${name}\\` not found, you may need to load it first`);\n        return _theme;\n    }\n    function setTheme(name) {\n        ensureNotDisposed();\n        const theme = getTheme(name);\n        if (_lastTheme !== name) {\n            _registry.setTheme(theme);\n            _lastTheme = name;\n        }\n        const colorMap = _registry.getColorMap();\n        return {\n            theme,\n            colorMap,\n        };\n    }\n    function getLoadedThemes() {\n        ensureNotDisposed();\n        return _registry.getLoadedThemes();\n    }\n    function getLoadedLanguages() {\n        ensureNotDisposed();\n        return _registry.getLoadedLanguages();\n    }\n    async function loadLanguage(...langs) {\n        ensureNotDisposed();\n        await _registry.loadLanguages(await resolveLangs(langs));\n    }\n    async function loadTheme(...themes) {\n        ensureNotDisposed();\n        await Promise.all(themes.map(async (theme) => isSpecialTheme(theme)\n            ? null\n            : _registry.loadTheme(await normalizeGetter(theme))));\n    }\n    function ensureNotDisposed() {\n        if (isDisposed)\n            throw new ShikiError('Shiki instance has been disposed');\n    }\n    function dispose() {\n        if (isDisposed)\n            return;\n        isDisposed = true;\n        _registry.dispose();\n        instancesCount -= 1;\n    }\n    return {\n        setTheme,\n        getTheme,\n        getLanguage,\n        getLoadedThemes,\n        getLoadedLanguages,\n        loadLanguage,\n        loadTheme,\n        dispose,\n        [Symbol.dispose]: dispose,\n    };\n}\n/**\n * @deprecated Use `createShikiInternal` instead.\n */\nfunction getShikiInternal(options = {}) {\n    // TODO: next: console.warn('`getShikiInternal` is deprecated. Use `createShikiInternal` instead.')\n    return createShikiInternal(options);\n}\n\n/**\n * Create a Shiki core highlighter instance, with no languages or themes bundled.\n * Wasm and each language and theme must be loaded manually.\n *\n * @see http://shiki.style/guide/install#fine-grained-bundle\n */\nasync function createHighlighterCore(options = {}) {\n    const internal = await createShikiInternal(options);\n    return {\n        getLastGrammarState: (code, options) => getLastGrammarState(internal, code, options),\n        codeToTokensBase: (code, options) => codeToTokensBase(internal, code, options),\n        codeToTokensWithThemes: (code, options) => codeToTokensWithThemes(internal, code, options),\n        codeToTokens: (code, options) => codeToTokens(internal, code, options),\n        codeToHast: (code, options) => codeToHast(internal, code, options),\n        codeToHtml: (code, options) => codeToHtml(internal, code, options),\n        ...internal,\n        getInternalContext: () => internal,\n    };\n}\nfunction makeSingletonHighlighterCore(createHighlighter) {\n    let _shiki;\n    async function getSingletonHighlighterCore(options = {}) {\n        if (!_shiki) {\n            _shiki = createHighlighter({\n                ...options,\n                themes: options.themes || [],\n                langs: options.langs || [],\n            });\n            return _shiki;\n        }\n        else {\n            const s = await _shiki;\n            await Promise.all([\n                s.loadTheme(...(options.themes || [])),\n                s.loadLanguage(...(options.langs || [])),\n            ]);\n            return s;\n        }\n    }\n    return getSingletonHighlighterCore;\n}\nconst getSingletonHighlighterCore = /* @__PURE__ */ makeSingletonHighlighterCore(createHighlighterCore);\n/**\n * @deprecated Use `createHighlighterCore` or `getSingletonHighlighterCore` instead.\n */\n/* v8 ignore next 5 */\nfunction getHighlighterCore(options = {}) {\n    // TODO: next:  console.warn('`getHighlighterCore` is deprecated. Use `createHighlighterCore` or `getSingletonHighlighterCore` instead.')\n    return createHighlighterCore(options);\n}\n\n/**\n * Create a `createHighlighter` function with bundled themes and languages.\n *\n * @param bundledLanguages\n * @param bundledThemes\n * @param loadWasm\n */\nfunction createdBundledHighlighter(bundledLanguages, bundledThemes, loadWasm) {\n    async function createHighlighter(options) {\n        function resolveLang(lang) {\n            if (typeof lang === 'string') {\n                if (isSpecialLang(lang))\n                    return [];\n                const bundle = bundledLanguages[lang];\n                if (!bundle)\n                    throw new ShikiError(`Language \\`${lang}\\` is not included in this bundle. You may want to load it from external source.`);\n                return bundle;\n            }\n            return lang;\n        }\n        function resolveTheme(theme) {\n            if (isSpecialTheme(theme))\n                return 'none';\n            if (typeof theme === 'string') {\n                const bundle = bundledThemes[theme];\n                if (!bundle)\n                    throw new ShikiError(`Theme \\`${theme}\\` is not included in this bundle. You may want to load it from external source.`);\n                return bundle;\n            }\n            return theme;\n        }\n        const _themes = (options.themes ?? []).map(i => resolveTheme(i));\n        const langs = (options.langs ?? [])\n            .map(i => resolveLang(i));\n        const core = await createHighlighterCore({\n            ...options,\n            themes: _themes,\n            langs,\n            loadWasm,\n        });\n        return {\n            ...core,\n            loadLanguage(...langs) {\n                return core.loadLanguage(...langs.map(resolveLang));\n            },\n            loadTheme(...themes) {\n                return core.loadTheme(...themes.map(resolveTheme));\n            },\n        };\n    }\n    return createHighlighter;\n}\nfunction makeSingletonHighlighter(createHighlighter) {\n    let _shiki;\n    async function getSingletonHighlighter(options = {}) {\n        if (!_shiki) {\n            _shiki = createHighlighter({\n                ...options,\n                themes: options.themes || [],\n                langs: options.langs || [],\n            });\n            return _shiki;\n        }\n        else {\n            const s = await _shiki;\n            await Promise.all([\n                s.loadTheme(...(options.themes || [])),\n                s.loadLanguage(...(options.langs || [])),\n            ]);\n            return s;\n        }\n    }\n    return getSingletonHighlighter;\n}\nfunction createSingletonShorthands(createHighlighter) {\n    const getSingletonHighlighter = makeSingletonHighlighter(createHighlighter);\n    return {\n        getSingletonHighlighter(options) {\n            return getSingletonHighlighter(options);\n        },\n        async codeToHtml(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHtml(code, options);\n        },\n        async codeToHast(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHast(code, options);\n        },\n        async codeToTokens(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToTokens(code, options);\n        },\n        async codeToTokensBase(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: [options.theme],\n            });\n            return shiki.codeToTokensBase(code, options);\n        },\n        async codeToTokensWithThemes(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: Object.values(options.themes).filter(Boolean),\n            });\n            return shiki.codeToTokensWithThemes(code, options);\n        },\n        async getLastGrammarState(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: [options.theme],\n            });\n            return shiki.getLastGrammarState(code, options);\n        },\n    };\n}\n\nexport { FontStyle, ShikiError, addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createHighlighterCore, createPositionConverter, createShikiInternal, createSingletonShorthands, createdBundledHighlighter, getHighlighterCore, getShikiInternal, getSingletonHighlighterCore, getTokenStyleObject, toHtml as hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, loadWasm, makeSingletonHighlighter, makeSingletonHighlighterCore, normalizeTheme, resolveColorReplacements, setDefaultWasmLoader, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations };\n"],"names":["key","initPromise","_defaultWasmLoader","splitLines","code","preserveEnding","parts","split","index","lines","i","length","line","push","isPlainLang","lang","includes","isSpecialLang","isNoneTheme","theme","addClassToHast","node","className","c","properties","class","Array","isArray","resolveColorReplacements","options","replacements","colorReplacements","themeName","name","value","Object","entries","assign","applyColorReplacements","color","toLowerCase","getTokenStyleObject","token","styles","bgColor","fontStyle","_types_mjs__WEBPACK_IMPORTED_MODULE_0__","H","Italic","Bold","Underline","stringifyTokenStyle","map","join","namedColors","decorations","parseColor","sequence","offset","colorMode","rgb","Number","parseInt","x","some","isNaN","type","colorIndex","defaultNamedColorsMap","black","red","green","yellow","blue","magenta","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","ShikiError","Error","constructor","message","GrammarState","_stack","scopes","getScopes","stack","visited","Set","pushScope","has","add","nameScopesList","scopeName","parent","toJSON","codeToTokensBase","internal","getLoadedThemes","content","colorMap","setTheme","tokenizeAnsiWithTheme","fileContents","foreground","background","decorations2","colorPalette","createColorPalette","namedColorsMap","colorTable","rgbColor","Math","max","min","toString","padStart","getColorTable","levels","r","g","b","level","fromEntries","colors","toUpperCase","substring","parser","parse","tokens","position","findResult","findSequence","nextEscape","indexOf","nextClose","startPosition","text","commands","parseSequence","codeInt","decoration","styleToken","clear","delete","bg","fg","undefined","dimColor","hexMatch","match","alpha","round","from","cssVarMatch","None","_grammar","getLanguage","grammarState","_tokenizeWithTheme","grammar","tokenizeMaxLineLength","tokenizeTimeLimit","stateStack","getGrammarStack","state","grammarContextCode","_textmate_mjs__WEBPACK_IMPORTED_MODULE_1__","_X","actual","final","themeSettingsSelectors","includeExplanation","setting","settings","selectors","scope","trim","selector","len","tokensWithScopes","tokensWithScopesIndex","lineOffset","resultWithScopes","tokenizeLine","result","tokenizeLine2","tokensLength","j","startIndex","nextStartIndex","metadata","i8","getForeground","getFontStyle","explanation","tokenWithScopes","tokenWithScopesText","endIndex","explainThemeScopes","themeSelectors","parentScopes","slice","themeMatches","explainThemeScope","selectorPieces","matches","matchesOne","selectorParentIndex","parentIndex","ruleStack","codeToTokensWithThemes","themes","filter","syncThemesTokenization","outThemes","count","t","outLines","forEach","indexes","current","l","every","minLength","n","lineIdx","_token","tokenIdx","mergedToken","variants","themeIdx","_","__","___","codeToTokens","rootStyle","defaultColor","cssVariablePrefix","sort","a","themeTokens","find","themeRegs","getTheme","themesOrder","mergeToken","merged","variantsOrder","styleKeys","flatMap","keys","mergedStyles","reduce","acc","cur","idx","keyName","varKey","htmlStyle","values","themeColorReplacements","_theme","builtInTransformers","transformerDecorations","WeakMap","getContext","shiki","meta","converter","createPositionConverter","indexToPos","character","lineText","posToIndex","source","normalizePosition","p","d","start","end","verifyIntersections","items","foo","JSON","stringify","bar","isFooHasBarStart","isFooHasBarEnd","isBarHasFooStart","isBarHasFooEnd","set","get","splitTokens","breakpoints","sorted","breakpointsInToken","splitToken","offsets","lastOffset","ctx","codeEl","children","tagName","applyLineSection","lineEl","POSITIVE_INFINITY","el","alwaysWrap","wrapper","applyDecoration","splice","transform","lineApplies","unshift","getTransformers","transformers","codeToHast","transformerContext","_code","_options","input","transformer","preprocess","call","mergeWhitespaces","newLine","carryOnContent","firstOffset","couldMerge","leading","trailing","expanded","contextSource","tokensToHast","root","structure","preNode","style","tabindex","startsWith","codeNode","lineNodes","context","pre","lineNode","col","tokenNode","span","htmlVoidElements","Schema","property","normal","space","merge","definitions","normalize","prototype","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","types","freeze","__proto__","checks","DefinedInfo","mask","mark","check","own$3","hasOwnProperty","create","definition","prop","info","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html$3","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","language","list","loading","loop","low","manifest","maxLength","media","method","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","spellCheck","src","srcDoc","srcLang","srcSet","step","tabIndex","target","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","codeBase","codeType","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg$1","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","charAt","html$2","svg","own$2","characterEntitiesLegacy","characterEntitiesHtml4","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","rang","loz","spades","clubs","hearts","diams","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","dangerous","own$1","characters","formatSmart","next","named","numeric","toHexadecimal","omit","test","String","fromCharCode","omitOptionalSemicolons","useNamedReferences","useShortestReferences","toNamed","decimal","toDecimal","stringifyEntities","core","replace","subset","charactersToExpression","groups","basic","escapeOnly","pair","all","charCodeAt","htmlCommentRegex","bogusCommentEntitySubset","commentEntitySubset","ccount","re","whitespace","thing","siblingAfter","siblings","siblingBefore","emptyChildren$1","includeWhitespace","own","omission","handlers","closing","body","caption","headOrColgroupOrCaption","colgroup","dd","dt","Boolean","head","html","li","optgroup","option","rp","rubyElement","rt","tbody","td","cells","tfoot","th","thead","tr","opening","previous","seen","child","constants","unquoted","single","double","textEntitySubset","characterReferences","handle","zwitch","one","parameters","fn","invalid","unknown","node_","comment","_1","_2","bogusComments","doctype","_3","upperDoctype","tightDoctype","element","last","schema","omitOptionalTags","selfClosing","closeEmptyElements","voids","serializeAttributes","serializeAttribute","Type","rest","dashes","allowParseErrors","allowDangerousCharacters","quote","padRight","padLeft","tightCommaSeparatedLists","collapseEmptyAttributes","preferUnquoted","quoteSmart","alternative","tightAttributes","closeSelfClosing","tightSelfClosing","raw","allowDangerousHtml","emptyOptions","emptyCharacterReferences","emptyChildren","main","init","wasmMemory","buffer","binding","updateGlobalBufferAndViews","buf","HEAPU8","Uint8Array","HEAPU32","Uint32Array","UTF8Decoder","TextDecoder","UTF8ToString","ptr","maxBytesToRead","UTF8ArrayToString","heapOrArray","endIdx","endPtr","decode","subarray","str","u0","ch","asmLibraryArg","emscripten_get_now","performance","now","Date","emscripten_memcpy_big","dest","num","copyWithin","emscripten_resize_heap","requestedSize","oldSize","alignUp","cutDown","overGrownHeapSize","emscripten_realloc_buffer","grow","byteLength","fd_write","createWasm","exports","env","wasi_snapshot_preview1","memory","onigBinding","UtfString","_utf8ByteLength","charCode","codepoint","wasSurrogatePair","nextCharCode","utf16Length","utf8Length","utf16Value","utf8Value","utf16OffsetToUtf8","utf8OffsetToUtf16","computeIndicesMapping","i16","codePoint","createString","omalloc","OnigString","LAST_ID","_sharedPtr","_sharedPtrInUse","_onigBinding","utfString","convertUtf8OffsetToUtf16","utf8Offset","convertUtf16OffsetToUtf8","utf16Offset","dispose","ofree","OnigScanner","_ptr","patterns","strPtrsArr","strLenArr","strPtrsPtr","strLenPtr","scannerPtr","createOnigScanner","throwLastOnigError","getLastOnigError","freeOnigScanner","findNextMatchSync","arg","debugCall","_findNextMatchSync","resultPtr","findNextOnigScannerMatchDbg","findNextOnigScannerMatch","captureIndices","beg","_makeArrayBufferLoader","importObject","WebAssembly","instantiate","VSCODE_FALLBACK_EDITOR_FG","light","dark","VSCODE_FALLBACK_EDITOR_BG","RESOLVED_KEY","normalizeTheme","rawTheme","tokenColors","globalSetting","s","replacementCount","replacementMap","Map","getReplacementColor","hex","replaceFg","replaceBg","clone","replacement","defineProperty","enumerable","writable","Registry","Bz","_resolver","_themes","_langs","_alias","_resolvedThemes","_resolvedGrammars","_langMap","_langGraph","_textmateThemeCache","_loadedThemesCache","_loadedLanguagesCache","loadTheme","loadLanguage","textmateTheme","Q2","createFromRawTheme","_syncRegistry","getGrammar","resolved","embeddedLazilyBy","embeddedLangsLazy","addLanguage","grammarConfig","balancedBracketSelectors","unbalancedBracketSelectors","_rawGrammars","loadGrammarWithConfiguration","aliases","alias","e","_injectionGrammars","_grammars","loadLanguages","langs","resolveEmbeddedLanguages","langsGraphArray","missingLangs","dependents","embeddedLangs","getLoadedLanguages","embeddedLang","Resolver","_scopeToLang","_injections","_onigLibPromise","onigLibPromise","onigLib","getLangRegistration","langIdOrAlias","loadGrammar","injectTo","getInjections","scopeParts","injections","subScopeName","instancesCount","createShikiInternal","_lastTheme","warnings","console","warn","isDisposed","normalizeGetter","Promise","resolve","then","resolveLangs","flat","wasmLoader","loadWasm","_load","instance","dataOrOptions","instantiator","Response","instantiateStreaming","_makeResponseStreamingLoader","_makeResponseNonStreamingLoader","arrayBuffer","ArrayBuffer","isView","Buffer","isBuffer","SharedArrayBuffer","Module","_registry","createOnigString","langAlias","ensureNotDisposed","getColorMap","_lang","isSpecialTheme","Symbol","createHighlighterCore","getLastGrammarState","codeToHtml","toHtml","tree","options_","postprocess","getInternalContext","createdBundledHighlighter","bundledLanguages","bundledThemes","resolveLang","bundle","resolveTheme","createSingletonShorthands","createHighlighter","_shiki","getSingletonHighlighter"],"sourceRoot":""}