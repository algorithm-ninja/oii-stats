{"version":3,"file":"static/chunks/2228.579facc341c2c2c6.js","mappings":"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","sources":["webpack://_N_E/./node_modules/shiki/dist/langs/vyper.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Vyper\", \"name\": \"vyper\", \"patterns\": [{ \"include\": \"#statement\" }, { \"include\": \"#expression\" }, { \"include\": \"#reserved-names-vyper\" }], \"repository\": { \"annotated-parameter\": { \"begin\": \"(?x)\\n\\\\b\\n([[:alpha:]_]\\\\w*) \\\\s* (:)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"variable.parameter.function.language.python\" }, \"2\": { \"name\": \"punctuation.separator.annotation.python\" } }, \"end\": \"(,)|(?=\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.separator.parameters.python\" } }, \"patterns\": [{ \"include\": \"#expression\" }, { \"match\": \"=(?!=)\", \"name\": \"keyword.operator.assignment.python\" }] }, \"assignment-operator\": { \"match\": \"(?x)\\n<<= | >>= | //= | \\\\*\\\\*=\\n| \\\\+= | -= | /= | @=\\n| \\\\*= | %= | ~= | \\\\^= | &= | \\\\|=\\n| =(?!=)\\n\", \"name\": \"keyword.operator.assignment.python\" }, \"backticks\": { \"begin\": \"\\\\`\", \"end\": \"(?:\\\\`|(?<!\\\\\\\\)(\\\\n))\", \"name\": \"invalid.deprecated.backtick.python\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"builtin-callables\": { \"patterns\": [{ \"include\": \"#illegal-names\" }, { \"include\": \"#illegal-object-name\" }, { \"include\": \"#builtin-exceptions\" }, { \"include\": \"#builtin-functions\" }, { \"include\": \"#builtin-types\" }] }, \"builtin-exceptions\": { \"match\": \"(?x) (?<!\\\\.) \\\\b(\\n(\\nArithmetic | Assertion | Attribute | Buffer | BlockingIO\\n| BrokenPipe | ChildProcess\\n| (Connection (Aborted | Refused | Reset)?)\\n| EOF | Environment | FileExists | FileNotFound\\n| FloatingPoint | IO | Import | Indentation | Index | Interrupted\\n| IsADirectory | NotADirectory | Permission | ProcessLookup\\n| Timeout\\n| Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\\n| Reference | Runtime | Recursion | Syntax | System\\n| Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\\n| Value | Windows | ZeroDivision | ModuleNotFound\\n) Error\\n|\\n((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\\n| Unicode | Bytes | Resource\\n)? Warning\\n|\\nSystemExit | Stop(Async)?Iteration\\n| KeyboardInterrupt\\n| GeneratorExit | (Base)?Exception\\n)\\\\b\\n\", \"name\": \"support.type.exception.python\" }, \"builtin-functions\": { \"patterns\": [{ \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\n__import__ | abs | all | any | ascii | bin | breakpoint | callable\\n| chr | compile | copyright | credits | delattr | dir | divmod\\n| enumerate | eval | exec | exit | filter | format | getattr\\n| globals | hasattr | hash | help | hex | id | input\\n| isinstance | issubclass | iter | len | license | locals | map\\n| max | memoryview | min | next | oct | open | ord | pow | print\\n| quit | range | reload | repr | reversed | round\\n| setattr | sorted | sum | vars | zip\\n)\\\\b\\n\", \"name\": \"support.function.builtin.python\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nfile | reduce | intern | raw_input | unicode | cmp | basestring\\n| execfile | long | xrange\\n)\\\\b\\n\", \"name\": \"variable.legacy.builtin.python\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\n_abi_encode | floor | ceil | convert | slice | len | concat | sha256 | method_id | keccak256 | ecrecover | ecadd | ecmul | extract32 | as_wei_value | raw_call | blockhash | bitwise_and | bitwise_or | bitwise_xor | bitwise_not | uint256_addmod | uint256_mulmod | pow_mod256 | sqrt | shift | create_forwarder_to | min | max | empty | abs   )\\\\b\\n\", \"name\": \"support.function.builtin.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nsend | selfdestruct | raw_call | raw_log | create_forwarder_to   )\\\\b\\n\", \"name\": \"support.function.builtin.lowlevel.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nevent   )\\\\b\\n\", \"name\": \"support.type.event.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nmap | struct | HashMap   )\\\\b\\n\", \"name\": \"support.type.reference.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nprivate | nonreentrant | constant | event | internal | view | pure   )\\\\b\\n\", \"name\": \"support.function.builtin.modifiers.safe.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\npublic | payable | modifying | external   )\\\\b\\n\", \"name\": \"support.function.builtin.modifiers.unsafe.vyper\" }] }, \"builtin-possible-callables\": { \"patterns\": [{ \"include\": \"#builtin-callables\" }, { \"include\": \"#magic-names\" }] }, \"builtin-types\": { \"patterns\": [{ \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nbool | bytearray | bytes | classmethod | complex | dict\\n| float | frozenset | int | list | object | property\\n| set | slice | staticmethod | str | tuple | type\\n\\n(?# Although 'super' is not a type, it's related to types,\\nand is special enough to be highlighted differently from\\nother built-ins)\\n| super\\n)\\\\b\\n\", \"name\": \"support.type.python\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nbytes32 | bytearray | wei_value | timestamp | int256 | uint8 | uint256 | decimal | timedelta | string | int128 | address | bool | bytes   )\\\\b\\n\", \"name\": \"support.type.basetype.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nfinney | gwei | range | def | ____init____ | timedelta | babbage | zero_address | raise | external | empty_bytes32 | assert | continue | wei | ada | min_int256 | min_int128 | chainid | max_decimal | default | indexed | selfdestruct | lovelace | immutable | throw | kwei | max_int128 | while | constant | ___default___ | balance | twei | codesize | false | max_int256 | _default_ | init | mwei | if | ____default____ | true | payable | internal | until | this | nonpayable | pass | public | nonreentrant | blockhash | max_uint256 | shannon | none | units | _init_ | ___init___ | is_contract | for | zero_wei | min_decimal | szabo | timestamp | ether | pwei | send   )\\\\b\\n\", \"name\": \"support.type.keywords.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nshannon | finney | gwei | twei | kwei | wei | lovelace | ether | szabo | pwei | babbage | mwei | ada\\n\\n(?# Although 'super' is not a type, it's related to types,\\nand is special enough to be highlighted differently from\\nother built-ins)\\n| super\\n)\\\\b\\n\", \"name\": \"support.type.unit.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nZERO_ADDRESS | EMPTY_BYTES32 | MAX_INT128 | MIN_INT128 | MAX_DECIMAL | MIN_DECIMAL | MAX_UINT256\\n\\n(?# Although 'super' is not a type, it's related to types,\\nand is special enough to be highlighted differently from\\nother built-ins)\\n| super\\n)\\\\b\\n\", \"name\": \"support.type.constant.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nimplements   )\\\\b\\n\", \"name\": \"entity.other.inherited-class.interface.vyper\" }] }, \"call-wrapper-inheritance\": { \"begin\": \"(?x)\\n\\\\b(?=\\n([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n)\\n\", \"comment\": \"same as a function call, but in inheritance context\", \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.arguments.end.python\" } }, \"name\": \"meta.function-call.python\", \"patterns\": [{ \"include\": \"#inheritance-name\" }, { \"include\": \"#function-arguments\" }] }, \"class-declaration\": { \"patterns\": [{ \"begin\": \"(?x)\\n\\\\s*(class)\\\\s+\\n(?=\\n[[:alpha:]_]\\\\w* \\\\s* (:|\\\\()\\n)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.class.python\" } }, \"end\": \"(:)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.class.begin.python\" } }, \"name\": \"meta.class.python\", \"patterns\": [{ \"include\": \"#class-name\" }, { \"include\": \"#class-inheritance\" }] }] }, \"class-inheritance\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.inheritance.begin.python\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.inheritance.end.python\" } }, \"name\": \"meta.class.inheritance.python\", \"patterns\": [{ \"match\": \"(\\\\*\\\\*|\\\\*)\", \"name\": \"keyword.operator.unpacking.arguments.python\" }, { \"match\": \",\", \"name\": \"punctuation.separator.inheritance.python\" }, { \"match\": \"=(?!=)\", \"name\": \"keyword.operator.assignment.python\" }, { \"match\": \"\\\\bmetaclass\\\\b\", \"name\": \"support.type.metaclass.python\" }, { \"include\": \"#illegal-names\" }, { \"include\": \"#class-kwarg\" }, { \"include\": \"#call-wrapper-inheritance\" }, { \"include\": \"#expression-base\" }, { \"include\": \"#member-access-class\" }, { \"include\": \"#inheritance-identifier\" }] }, \"class-kwarg\": { \"captures\": { \"1\": { \"name\": \"entity.other.inherited-class.python variable.parameter.class.python\" }, \"2\": { \"name\": \"keyword.operator.assignment.python\" } }, \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\s*(=)(?!=)\\n\" }, \"class-name\": { \"patterns\": [{ \"include\": \"#illegal-object-name\" }, { \"include\": \"#builtin-possible-callables\" }, { \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\", \"name\": \"entity.name.type.class.python\" }] }, \"codetags\": { \"captures\": { \"1\": { \"name\": \"keyword.codetag.notation.python\" } }, \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\" }, \"comments\": { \"patterns\": [{ \"begin\": \"(?x)\\n(?:\\n\\\\# \\\\s* (type:)\\n\\\\s*+ (?# we want `\\\\s*+` which is possessive quantifier since\\nwe do not actually want to backtrack when matching\\nwhitespace here)\\n(?! $ | \\\\#)\\n)\\n\", \"beginCaptures\": { \"0\": { \"name\": \"meta.typehint.comment.python\" }, \"1\": { \"name\": \"comment.typehint.directive.notation.python\" } }, \"contentName\": \"meta.typehint.comment.python\", \"end\": \"(?:$|(?=\\\\#))\", \"name\": \"comment.line.number-sign.python\", \"patterns\": [{ \"match\": \"(?x)\\n\\\\G ignore\\n(?= \\\\s* (?: $ | \\\\#))\\n\", \"name\": \"comment.typehint.ignore.notation.python\" }, { \"match\": \"(?x)\\n(?<!\\\\.)\\\\b(\\nbool | bytes | float | int | object | str\\n| List | Dict | Iterable | Sequence | Set\\n| FrozenSet | Callable | Union | Tuple\\n| Any | None\\n)\\\\b\\n\", \"name\": \"comment.typehint.type.notation.python\" }, { \"match\": \"([\\\\[\\\\]\\\\(\\\\),\\\\.\\\\=\\\\*]|(->))\", \"name\": \"comment.typehint.punctuation.notation.python\" }, { \"match\": \"([[:alpha:]_]\\\\w*)\", \"name\": \"comment.typehint.variable.notation.python\" }] }, { \"include\": \"#comments-base\" }] }, \"comments-base\": { \"begin\": \"(\\\\#)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.python\" } }, \"end\": \"($)\", \"name\": \"comment.line.number-sign.python\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"comments-string-double-three\": { \"begin\": \"(\\\\#)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.python\" } }, \"end\": '($|(?=\"\"\"))', \"name\": \"comment.line.number-sign.python\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"comments-string-single-three\": { \"begin\": \"(\\\\#)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.python\" } }, \"end\": \"($|(?='''))\", \"name\": \"comment.line.number-sign.python\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"curly-braces\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.dict.begin.python\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.dict.end.python\" } }, \"patterns\": [{ \"match\": \":\", \"name\": \"punctuation.separator.dict.python\" }, { \"include\": \"#expression\" }] }, \"decorator\": { \"begin\": \"(?x)\\n^\\\\s*\\n((@)) \\\\s* (?=[[:alpha:]_]\\\\w*)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.decorator.python\" }, \"2\": { \"name\": \"punctuation.definition.decorator.python\" } }, \"end\": \"(?x)\\n( \\\\) )\\n\\n(?: (.*?) (?=\\\\s*(?:\\\\#|$)) )\\n| (?=\\\\n|\\\\#)\\n\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.arguments.end.python\" }, \"2\": { \"name\": \"invalid.illegal.decorator.python\" } }, \"name\": \"meta.function.decorator.python\", \"patterns\": [{ \"include\": \"#decorator-name\" }, { \"include\": \"#function-arguments\" }] }, \"decorator-name\": { \"patterns\": [{ \"include\": \"#builtin-callables\" }, { \"include\": \"#illegal-object-name\" }, { \"captures\": { \"2\": { \"name\": \"punctuation.separator.period.python\" } }, \"match\": \"(?x)\\n([[:alpha:]_]\\\\w*) | (\\\\.)\\n\", \"name\": \"entity.name.function.decorator.python\" }, { \"include\": \"#line-continuation\" }, { \"captures\": { \"1\": { \"name\": \"invalid.illegal.decorator.python\" } }, \"match\": \"(?x)\\n\\\\s* ([^([:alpha:]\\\\s_\\\\.#\\\\\\\\] .*?) (?=\\\\#|$)\\n\", \"name\": \"invalid.illegal.decorator.python\" }] }, \"docstring\": { \"patterns\": [{ \"begin\": `(\\\\'\\\\'\\\\'|\\\\\"\\\\\"\\\\\")`, \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\1)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" } }, \"name\": \"string.quoted.docstring.multi.python\", \"patterns\": [{ \"include\": \"#docstring-prompt\" }, { \"include\": \"#codetags\" }, { \"include\": \"#docstring-guts-unicode\" }] }, { \"begin\": `([rR])(\\\\'\\\\'\\\\'|\\\\\"\\\\\"\\\\\")`, \"beginCaptures\": { \"1\": { \"name\": \"storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\2)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" } }, \"name\": \"string.quoted.docstring.raw.multi.python\", \"patterns\": [{ \"include\": \"#string-consume-escape\" }, { \"include\": \"#docstring-prompt\" }, { \"include\": \"#codetags\" }] }, { \"begin\": `(\\\\'|\\\\\")`, \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\1)|(\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.docstring.single.python\", \"patterns\": [{ \"include\": \"#codetags\" }, { \"include\": \"#docstring-guts-unicode\" }] }, { \"begin\": `([rR])(\\\\'|\\\\\")`, \"beginCaptures\": { \"1\": { \"name\": \"storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\2)|(\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.docstring.raw.single.python\", \"patterns\": [{ \"include\": \"#string-consume-escape\" }, { \"include\": \"#codetags\" }] }] }, \"docstring-guts-unicode\": { \"patterns\": [{ \"include\": \"#escape-sequence-unicode\" }, { \"include\": \"#escape-sequence\" }, { \"include\": \"#string-line-continuation\" }] }, \"docstring-prompt\": { \"captures\": { \"1\": { \"name\": \"keyword.control.flow.python\" } }, \"match\": \"(?x)\\n(?:\\n(?:^|\\\\G) \\\\s* (?# '\\\\G' is necessary for ST)\\n((?:>>>|\\\\.\\\\.\\\\.) \\\\s) (?=\\\\s*\\\\S)\\n)\\n\" }, \"docstring-statement\": { \"begin\": `^(?=\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\"\\\\\"\\\\\"|\\\\'|\\\\\"))`, \"comment\": \"the string either terminates correctly or by the beginning of a new line (this is for single line docstrings that aren't terminated) AND it's not followed by another docstring\", \"end\": `((?<=\\\\1)|^)(?!\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\"\\\\\"\\\\\"|\\\\'|\\\\\"))`, \"patterns\": [{ \"include\": \"#docstring\" }] }, \"double-one-fregexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-fregexp-expression\": { \"patterns\": [{ \"include\": \"#fregexp-base-expression\" }, { \"include\": \"#double-one-regexp-character-set\" }, { \"include\": \"#double-one-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#double-one-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#double-one-fregexp-lookahead\" }, { \"include\": \"#double-one-fregexp-lookahead-negative\" }, { \"include\": \"#double-one-fregexp-lookbehind\" }, { \"include\": \"#double-one-fregexp-lookbehind-negative\" }, { \"include\": \"#double-one-fregexp-conditional\" }, { \"include\": \"#double-one-fregexp-parentheses-non-capturing\" }, { \"include\": \"#double-one-fregexp-parentheses\" }] }, \"double-one-fregexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-fregexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-fregexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-fregexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-fregexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-fregexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-fregexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"double-one-regexp-character-set\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\" }, { \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"keyword.operator.negation.regexp\" }, \"3\": { \"name\": \"constant.character.set.regexp\" } }, \"end\": '(\\\\]|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.character.set.regexp\", \"patterns\": [{ \"include\": \"#regexp-charecter-set-escapes\" }, { \"match\": \"[^\\\\n]\", \"name\": \"constant.character.set.regexp\" }] }] }, \"double-one-regexp-comments\": { \"begin\": \"\\\\(\\\\?#\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.comment.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"punctuation.comment.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"comment.regexp\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"double-one-regexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-one-regexp-expression\": { \"patterns\": [{ \"include\": \"#regexp-base-expression\" }, { \"include\": \"#double-one-regexp-character-set\" }, { \"include\": \"#double-one-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#double-one-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#double-one-regexp-lookahead\" }, { \"include\": \"#double-one-regexp-lookahead-negative\" }, { \"include\": \"#double-one-regexp-lookbehind\" }, { \"include\": \"#double-one-regexp-lookbehind-negative\" }, { \"include\": \"#double-one-regexp-conditional\" }, { \"include\": \"#double-one-regexp-parentheses-non-capturing\" }, { \"include\": \"#double-one-regexp-parentheses\" }] }, \"double-one-regexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-one-regexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-one-regexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-one-regexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-one-regexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-one-regexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-one-regexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"double-three-fregexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-expression\": { \"patterns\": [{ \"include\": \"#fregexp-base-expression\" }, { \"include\": \"#double-three-regexp-character-set\" }, { \"include\": \"#double-three-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#double-three-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#double-three-fregexp-lookahead\" }, { \"include\": \"#double-three-fregexp-lookahead-negative\" }, { \"include\": \"#double-three-fregexp-lookbehind\" }, { \"include\": \"#double-three-fregexp-lookbehind-negative\" }, { \"include\": \"#double-three-fregexp-conditional\" }, { \"include\": \"#double-three-fregexp-parentheses-non-capturing\" }, { \"include\": \"#double-three-fregexp-parentheses\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-fregexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-character-set\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\" }, { \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"keyword.operator.negation.regexp\" }, \"3\": { \"name\": \"constant.character.set.regexp\" } }, \"end\": '(\\\\]|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.character.set.regexp\", \"patterns\": [{ \"include\": \"#regexp-charecter-set-escapes\" }, { \"match\": \"[^\\\\n]\", \"name\": \"constant.character.set.regexp\" }] }] }, \"double-three-regexp-comments\": { \"begin\": \"\\\\(\\\\?#\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.comment.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"punctuation.comment.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"comment.regexp\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"double-three-regexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-expression\": { \"patterns\": [{ \"include\": \"#regexp-base-expression\" }, { \"include\": \"#double-three-regexp-character-set\" }, { \"include\": \"#double-three-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#double-three-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#double-three-regexp-lookahead\" }, { \"include\": \"#double-three-regexp-lookahead-negative\" }, { \"include\": \"#double-three-regexp-lookbehind\" }, { \"include\": \"#double-three-regexp-lookbehind-negative\" }, { \"include\": \"#double-three-regexp-conditional\" }, { \"include\": \"#double-three-regexp-parentheses-non-capturing\" }, { \"include\": \"#double-three-regexp-parentheses\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"double-three-regexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": '(\\\\)|(?=\"\"\"))', \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }, { \"include\": \"#comments-string-double-three\" }] }, \"ellipsis\": { \"match\": \"\\\\.\\\\.\\\\.\", \"name\": \"constant.other.ellipsis.python\" }, \"escape-sequence\": { \"match\": `(?x)\n\\\\\\\\ (\nx[0-9A-Fa-f]{2}\n| [0-7]{1,3}\n| [\\\\\\\\\"'abfnrtv]\n)\n`, \"name\": \"constant.character.escape.python\" }, \"escape-sequence-unicode\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n| N\\\\{[\\\\w\\\\s]+?\\\\}\\n)\\n\", \"name\": \"constant.character.escape.python\" }] }, \"expression\": { \"comment\": \"All valid Python expressions\", \"patterns\": [{ \"include\": \"#expression-base\" }, { \"include\": \"#member-access\" }, { \"comment\": \"Tokenize identifiers to help linters\", \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\" }] }, \"expression-bare\": { \"comment\": \"valid Python expressions w/o comments and line continuation\", \"patterns\": [{ \"include\": \"#backticks\" }, { \"include\": \"#illegal-anno\" }, { \"include\": \"#literal\" }, { \"include\": \"#regexp\" }, { \"include\": \"#string\" }, { \"include\": \"#lambda\" }, { \"include\": \"#generator\" }, { \"include\": \"#illegal-operator\" }, { \"include\": \"#operator\" }, { \"include\": \"#curly-braces\" }, { \"include\": \"#item-access\" }, { \"include\": \"#list\" }, { \"include\": \"#odd-function-call\" }, { \"include\": \"#round-braces\" }, { \"include\": \"#function-call\" }, { \"include\": \"#builtin-functions\" }, { \"include\": \"#builtin-types\" }, { \"include\": \"#builtin-exceptions\" }, { \"include\": \"#magic-names\" }, { \"include\": \"#special-names\" }, { \"include\": \"#illegal-names\" }, { \"include\": \"#special-variables\" }, { \"include\": \"#ellipsis\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#line-continuation\" }, { \"include\": \"#special-variables-types\" }] }, \"expression-base\": { \"comment\": \"valid Python expressions with comments and line continuation\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expression-bare\" }, { \"include\": \"#line-continuation\" }] }, \"f-expression\": { \"comment\": \"All valid Python expressions, except comments and line continuation\", \"patterns\": [{ \"include\": \"#expression-bare\" }, { \"include\": \"#member-access\" }, { \"comment\": \"Tokenize identifiers to help linters\", \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\" }] }, \"fregexp-base-expression\": { \"patterns\": [{ \"include\": \"#fregexp-quantifier\" }, { \"include\": \"#fstring-formatting-braces\" }, { \"match\": \"\\\\{.*?\\\\}\" }, { \"include\": \"#regexp-base-common\" }] }, \"fregexp-double-one-line\": { \"begin\": '\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\")', \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": '(\")|(?<!\\\\\\\\)(\\\\n)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.interpolated.python string.regexp.quoted.single.python\", \"patterns\": [{ \"include\": \"#double-one-fregexp-expression\" }] }, \"fregexp-double-three-line\": { \"begin\": '\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\"\"\")', \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": '(\"\"\")', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.interpolated.python string.regexp.quoted.multi.python\", \"patterns\": [{ \"include\": \"#double-three-fregexp-expression\" }] }, \"fregexp-quantifier\": { \"match\": \"(?x)\\n\\\\{\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" }, \"fregexp-single-one-line\": { \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\')\", \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.interpolated.python string.regexp.quoted.single.python\", \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"fregexp-single-three-line\": { \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\'\\\\'\\\\')\", \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\'\\\\'\\\\')\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.interpolated.python string.regexp.quoted.multi.python\", \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }] }, \"fstring-fnorm-quoted-multi-line\": { \"begin\": `(\\\\b[fF])([bBuU])?('''|\"\"\")`, \"beginCaptures\": { \"1\": { \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\" }, \"2\": { \"name\": \"invalid.illegal.prefix.python\" }, \"3\": { \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.multi.python\" } }, \"end\": \"(\\\\3)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.fstring.python\", \"patterns\": [{ \"include\": \"#fstring-guts\" }, { \"include\": \"#fstring-illegal-multi-brace\" }, { \"include\": \"#fstring-multi-brace\" }, { \"include\": \"#fstring-multi-core\" }] }, \"fstring-fnorm-quoted-single-line\": { \"begin\": `(\\\\b[fF])([bBuU])?((['\"]))`, \"beginCaptures\": { \"1\": { \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\" }, \"2\": { \"name\": \"invalid.illegal.prefix.python\" }, \"3\": { \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.single.python\" } }, \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.fstring.python\", \"patterns\": [{ \"include\": \"#fstring-guts\" }, { \"include\": \"#fstring-illegal-single-brace\" }, { \"include\": \"#fstring-single-brace\" }, { \"include\": \"#fstring-single-core\" }] }, \"fstring-formatting\": { \"patterns\": [{ \"include\": \"#fstring-formatting-braces\" }, { \"include\": \"#fstring-formatting-singe-brace\" }] }, \"fstring-formatting-braces\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" }, \"2\": { \"name\": \"invalid.illegal.brace.python\" }, \"3\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"comment\": \"empty braces are illegal\", \"match\": \"({)(\\\\s*?)(})\" }, { \"match\": \"({{|}})\", \"name\": \"constant.character.escape.python\" }] }, \"fstring-formatting-singe-brace\": { \"match\": \"(}(?!}))\", \"name\": \"invalid.illegal.brace.python\" }, \"fstring-guts\": { \"patterns\": [{ \"include\": \"#escape-sequence-unicode\" }, { \"include\": \"#escape-sequence\" }, { \"include\": \"#string-line-continuation\" }, { \"include\": \"#fstring-formatting\" }] }, \"fstring-illegal-multi-brace\": { \"patterns\": [{ \"include\": \"#impossible\" }] }, \"fstring-illegal-single-brace\": { \"begin\": \"(\\\\{)(?=[^\\\\n}]*$\\\\n?)\", \"beginCaptures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"comment\": \"it is illegal to have a multiline brace inside a single-line string\", \"end\": \"(\\\\})|(?=\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"patterns\": [{ \"include\": \"#fstring-terminator-single\" }, { \"include\": \"#f-expression\" }] }, \"fstring-multi-brace\": { \"begin\": \"(\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"comment\": \"value interpolation using { ... }\", \"end\": \"(?x)\\n(\\\\})\\n\", \"endCaptures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"patterns\": [{ \"include\": \"#fstring-terminator-multi\" }, { \"include\": \"#f-expression\" }] }, \"fstring-multi-core\": { \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|'''|\"\"\")\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`, \"name\": \"string.interpolated.python string.quoted.multi.python\" }, \"fstring-normf-quoted-multi-line\": { \"begin\": `(\\\\b[bBuU])([fF])('''|\"\"\")`, \"beginCaptures\": { \"1\": { \"name\": \"invalid.illegal.prefix.python\" }, \"2\": { \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\" }, \"3\": { \"name\": \"punctuation.definition.string.begin.python string.quoted.multi.python\" } }, \"end\": \"(\\\\3)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.fstring.python\", \"patterns\": [{ \"include\": \"#fstring-guts\" }, { \"include\": \"#fstring-illegal-multi-brace\" }, { \"include\": \"#fstring-multi-brace\" }, { \"include\": \"#fstring-multi-core\" }] }, \"fstring-normf-quoted-single-line\": { \"begin\": `(\\\\b[bBuU])([fF])((['\"]))`, \"beginCaptures\": { \"1\": { \"name\": \"invalid.illegal.prefix.python\" }, \"2\": { \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\" }, \"3\": { \"name\": \"punctuation.definition.string.begin.python string.quoted.single.python\" } }, \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.fstring.python\", \"patterns\": [{ \"include\": \"#fstring-guts\" }, { \"include\": \"#fstring-illegal-single-brace\" }, { \"include\": \"#fstring-single-brace\" }, { \"include\": \"#fstring-single-core\" }] }, \"fstring-raw-guts\": { \"patterns\": [{ \"include\": \"#string-consume-escape\" }, { \"include\": \"#fstring-formatting\" }] }, \"fstring-raw-multi-core\": { \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|'''|\"\"\")\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`, \"name\": \"string.interpolated.python string.quoted.raw.multi.python\" }, \"fstring-raw-quoted-multi-line\": { \"begin\": `(\\\\b(?:[R][fF]|[fF][R]))('''|\"\"\")`, \"beginCaptures\": { \"1\": { \"name\": \"string.interpolated.python string.quoted.raw.multi.python storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.multi.python\" } }, \"end\": \"(\\\\2)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.multi.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.fstring.python\", \"patterns\": [{ \"include\": \"#fstring-raw-guts\" }, { \"include\": \"#fstring-illegal-multi-brace\" }, { \"include\": \"#fstring-multi-brace\" }, { \"include\": \"#fstring-raw-multi-core\" }] }, \"fstring-raw-quoted-single-line\": { \"begin\": `(\\\\b(?:[R][fF]|[fF][R]))((['\"]))`, \"beginCaptures\": { \"1\": { \"name\": \"string.interpolated.python string.quoted.raw.single.python storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.single.python\" } }, \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.single.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.fstring.python\", \"patterns\": [{ \"include\": \"#fstring-raw-guts\" }, { \"include\": \"#fstring-illegal-single-brace\" }, { \"include\": \"#fstring-single-brace\" }, { \"include\": \"#fstring-raw-single-core\" }] }, \"fstring-raw-single-core\": { \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|(['\"])|((?<!\\\\\\\\)\\\\n))\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`, \"name\": \"string.interpolated.python string.quoted.raw.single.python\" }, \"fstring-single-brace\": { \"begin\": \"(\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"comment\": \"value interpolation using { ... }\", \"end\": \"(?x)\\n(\\\\})|(?=\\\\n)\\n\", \"endCaptures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"patterns\": [{ \"include\": \"#fstring-terminator-single\" }, { \"include\": \"#f-expression\" }] }, \"fstring-single-core\": { \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|(['\"])|((?<!\\\\\\\\)\\\\n))\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`, \"name\": \"string.interpolated.python string.quoted.single.python\" }, \"fstring-terminator-multi\": { \"patterns\": [{ \"match\": \"(![rsa])(?=})\", \"name\": \"storage.type.format.python\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.format.python\" }, \"2\": { \"name\": \"storage.type.format.python\" } }, \"match\": \"(?x)\\n(![rsa])?\\n( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n\\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\" }, { \"include\": \"#fstring-terminator-multi-tail\" }] }, \"fstring-terminator-multi-tail\": { \"begin\": \"(![rsa])?(:)(?=.*?{)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.format.python\" }, \"2\": { \"name\": \"storage.type.format.python\" } }, \"end\": \"(?=})\", \"patterns\": [{ \"include\": \"#fstring-illegal-multi-brace\" }, { \"include\": \"#fstring-multi-brace\" }, { \"match\": \"([bcdeEfFgGnosxX%])(?=})\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\.\\\\d+)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(,)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\d+)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\#)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"([-+ ])\", \"name\": \"storage.type.format.python\" }, { \"match\": \"([<>=^])\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\w)\", \"name\": \"storage.type.format.python\" }] }, \"fstring-terminator-single\": { \"patterns\": [{ \"match\": \"(![rsa])(?=})\", \"name\": \"storage.type.format.python\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.format.python\" }, \"2\": { \"name\": \"storage.type.format.python\" } }, \"match\": \"(?x)\\n(![rsa])?\\n( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n\\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\" }, { \"include\": \"#fstring-terminator-single-tail\" }] }, \"fstring-terminator-single-tail\": { \"begin\": \"(![rsa])?(:)(?=.*?{)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.format.python\" }, \"2\": { \"name\": \"storage.type.format.python\" } }, \"end\": \"(?=})|(?=\\\\n)\", \"patterns\": [{ \"include\": \"#fstring-illegal-single-brace\" }, { \"include\": \"#fstring-single-brace\" }, { \"match\": \"([bcdeEfFgGnosxX%])(?=})\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\.\\\\d+)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(,)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\d+)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\#)\", \"name\": \"storage.type.format.python\" }, { \"match\": \"([-+ ])\", \"name\": \"storage.type.format.python\" }, { \"match\": \"([<>=^])\", \"name\": \"storage.type.format.python\" }, { \"match\": \"(\\\\w)\", \"name\": \"storage.type.format.python\" }] }, \"function-arguments\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.arguments.begin.python\" } }, \"contentName\": \"meta.function-call.arguments.python\", \"end\": \"(?=\\\\))(?!\\\\)\\\\s*\\\\()\", \"patterns\": [{ \"match\": \"(,)\", \"name\": \"punctuation.separator.arguments.python\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.unpacking.arguments.python\" } }, \"match\": \"(?x)\\n(?:(?<=[,(])|^) \\\\s* (\\\\*{1,2})\\n\" }, { \"include\": \"#lambda-incomplete\" }, { \"include\": \"#illegal-names\" }, { \"captures\": { \"1\": { \"name\": \"variable.parameter.function-call.python\" }, \"2\": { \"name\": \"keyword.operator.assignment.python\" } }, \"match\": \"\\\\b([[:alpha:]_]\\\\w*)\\\\s*(=)(?!=)\" }, { \"match\": \"=(?!=)\", \"name\": \"keyword.operator.assignment.python\" }, { \"include\": \"#expression\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.definition.arguments.end.python\" }, \"2\": { \"name\": \"punctuation.definition.arguments.begin.python\" } }, \"match\": \"\\\\s*(\\\\))\\\\s*(\\\\()\" }] }, \"function-call\": { \"begin\": \"(?x)\\n\\\\b(?=\\n([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n)\\n\", \"comment\": 'Regular function call of the type \"name(args)\"', \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.arguments.end.python\" } }, \"name\": \"meta.function-call.python\", \"patterns\": [{ \"include\": \"#special-variables\" }, { \"include\": \"#function-name\" }, { \"include\": \"#function-arguments\" }] }, \"function-declaration\": { \"begin\": \"(?x)\\n\\\\s*\\n(?:\\\\b(async) \\\\s+)? \\\\b(def)\\\\s+\\n(?=\\n[[:alpha:]_][[:word:]]* \\\\s* \\\\(\\n)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.function.async.python\" }, \"2\": { \"name\": \"storage.type.function.python\" } }, \"end\": `(:|(?=[#'\"\\\\n]))`, \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.function.begin.python\" } }, \"name\": \"meta.function.python\", \"patterns\": [{ \"include\": \"#function-def-name\" }, { \"include\": \"#parameters\" }, { \"include\": \"#line-continuation\" }, { \"include\": \"#return-annotation\" }] }, \"function-def-name\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\b (__default__) \\\\b\\n\", \"name\": \"entity.name.function.fallback.vyper\" }, { \"match\": \"(?x)\\n\\\\b (__init__) \\\\b\\n\", \"name\": \"entity.name.function.constructor.vyper\" }, { \"include\": \"#illegal-object-name\" }, { \"include\": \"#builtin-possible-callables\" }, { \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\", \"name\": \"entity.name.function.python\" }] }, \"function-name\": { \"patterns\": [{ \"include\": \"#builtin-possible-callables\" }, { \"comment\": \"Some color schemas support meta.function-call.generic scope\", \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\", \"name\": \"meta.function-call.generic.python\" }] }, \"generator\": { \"begin\": \"\\\\bfor\\\\b\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.control.flow.python\" } }, \"comment\": 'Match \"for ... in\" construct used in generators and for loops to\\ncorrectly identify the \"in\" as a control flow keyword.\\n', \"end\": \"\\\\bin\\\\b\", \"endCaptures\": { \"0\": { \"name\": \"keyword.control.flow.python\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"illegal-anno\": { \"match\": \"->\", \"name\": \"invalid.illegal.annotation.python\" }, \"illegal-names\": { \"captures\": { \"1\": { \"name\": \"keyword.control.flow.python\" }, \"2\": { \"name\": \"keyword.control.import.python\" } }, \"match\": \"(?x)\\n\\\\b(?:\\n(\\nand | assert | async | await | break | class | continue | def\\n| del | elif | else | except | finally | for | from | global\\n| if | in | is | (?<=\\\\.)lambda | lambda(?=\\\\s*[\\\\.=])\\n| nonlocal | not | or | pass | raise | return | try | while | with\\n| yield\\n) | (\\nas | import\\n)\\n)\\\\b\\n\" }, \"illegal-object-name\": { \"comment\": `It's illegal to name class or function \"True\"`, \"match\": \"\\\\b(True|False|None)\\\\b\", \"name\": \"keyword.illegal.name.python\" }, \"illegal-operator\": { \"patterns\": [{ \"match\": \"&&|\\\\|\\\\||--|\\\\+\\\\+\", \"name\": \"invalid.illegal.operator.python\" }, { \"match\": \"[?$]\", \"name\": \"invalid.illegal.operator.python\" }, { \"comment\": \"We don't want `!` to flash when we're typing `!=`\", \"match\": \"!\\\\b\", \"name\": \"invalid.illegal.operator.python\" }] }, \"import\": { \"comment\": \"Import statements used to correctly mark `from`, `import`, and `as`\\n\", \"patterns\": [{ \"begin\": \"\\\\b(?<!\\\\.)(from)\\\\b(?=.+import)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.import.python\" } }, \"end\": \"$|(?=import)\", \"patterns\": [{ \"match\": \"\\\\.+\", \"name\": \"punctuation.separator.period.python\" }, { \"include\": \"#expression\" }] }, { \"begin\": \"\\\\b(?<!\\\\.)(import)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.import.python\" } }, \"end\": \"$\", \"patterns\": [{ \"match\": \"\\\\b(?<!\\\\.)as\\\\b\", \"name\": \"keyword.control.import.python\" }, { \"include\": \"#expression\" }] }] }, \"impossible\": { \"comment\": \"This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.\", \"match\": \"$.^\" }, \"inheritance-identifier\": { \"captures\": { \"1\": { \"name\": \"entity.other.inherited-class.python\" } }, \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\" }, \"inheritance-name\": { \"patterns\": [{ \"include\": \"#lambda-incomplete\" }, { \"include\": \"#builtin-possible-callables\" }, { \"include\": \"#inheritance-identifier\" }] }, \"item-access\": { \"patterns\": [{ \"begin\": \"(?x)\\n\\\\b(?=\\n[[:alpha:]_]\\\\w* \\\\s* \\\\[\\n)\\n\", \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.arguments.end.python\" } }, \"name\": \"meta.item-access.python\", \"patterns\": [{ \"include\": \"#item-name\" }, { \"include\": \"#item-index\" }, { \"include\": \"#expression\" }] }] }, \"item-index\": { \"begin\": \"(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.arguments.begin.python\" } }, \"contentName\": \"meta.item-access.arguments.python\", \"end\": \"(?=\\\\])\", \"patterns\": [{ \"match\": \":\", \"name\": \"punctuation.separator.slice.python\" }, { \"include\": \"#expression\" }] }, \"item-name\": { \"patterns\": [{ \"include\": \"#special-variables\" }, { \"include\": \"#builtin-functions\" }, { \"include\": \"#special-names\" }, { \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\", \"name\": \"meta.indexed-name.python\" }, { \"include\": \"#special-variables-types\" }] }, \"lambda\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.control.flow.python\" } }, \"match\": \"((?<=\\\\.)lambda|lambda(?=\\\\s*[\\\\.=]))\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.function.lambda.python\" } }, \"match\": \"\\\\b(lambda)\\\\s*?(?=[,\\\\n]|$)\" }, { \"begin\": \"(?x)\\n\\\\b (lambda) \\\\b\\n\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.function.lambda.python\" } }, \"contentName\": \"meta.function.lambda.parameters.python\", \"end\": \"(:)|(\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.function.lambda.begin.python\" } }, \"name\": \"meta.lambda-function.python\", \"patterns\": [{ \"match\": \"(\\\\*\\\\*|\\\\*)\", \"name\": \"keyword.operator.unpacking.parameter.python\" }, { \"include\": \"#lambda-nested-incomplete\" }, { \"include\": \"#illegal-names\" }, { \"captures\": { \"1\": { \"name\": \"variable.parameter.function.language.python\" }, \"2\": { \"name\": \"punctuation.separator.parameters.python\" } }, \"match\": \"([[:alpha:]_]\\\\w*)\\\\s*(?:(,)|(?=:|$))\" }, { \"include\": \"#comments\" }, { \"include\": \"#backticks\" }, { \"include\": \"#illegal-anno\" }, { \"include\": \"#lambda-parameter-with-default\" }, { \"include\": \"#line-continuation\" }, { \"include\": \"#illegal-operator\" }] }] }, \"lambda-incomplete\": { \"match\": \"\\\\blambda(?=\\\\s*[,)])\", \"name\": \"storage.type.function.lambda.python\" }, \"lambda-nested-incomplete\": { \"match\": \"\\\\blambda(?=\\\\s*[:,)])\", \"name\": \"storage.type.function.lambda.python\" }, \"lambda-parameter-with-default\": { \"begin\": \"(?x)\\n\\\\b\\n([[:alpha:]_]\\\\w*) \\\\s* (=)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"variable.parameter.function.language.python\" }, \"2\": { \"name\": \"keyword.operator.python\" } }, \"end\": \"(,)|(?=:|$)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.separator.parameters.python\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"line-continuation\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.separator.continuation.line.python\" }, \"2\": { \"name\": \"invalid.illegal.line.continuation.python\" } }, \"match\": \"(\\\\\\\\)\\\\s*(\\\\S.*$\\\\n?)\" }, { \"begin\": \"(\\\\\\\\)\\\\s*$\\\\n?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.continuation.line.python\" } }, \"end\": `(?x)\n(?=^\\\\s*$)\n|\n(?! (\\\\s* [rR]? (\\\\'\\\\'\\\\'|\\\\\"\\\\\"\\\\\"|\\\\'|\\\\\"))\n|\n(\\\\G $)  (?# '\\\\G' is necessary for ST)\n)\n`, \"patterns\": [{ \"include\": \"#regexp\" }, { \"include\": \"#string\" }] }] }, \"list\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.list.begin.python\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.list.end.python\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"literal\": { \"patterns\": [{ \"match\": \"\\\\b(True|False|None|NotImplemented|Ellipsis)\\\\b\", \"name\": \"constant.language.python\" }, { \"include\": \"#number\" }] }, \"loose-default\": { \"begin\": \"(=)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.python\" } }, \"end\": \"(,)|(?=\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.separator.parameters.python\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"magic-function-names\": { \"captures\": { \"1\": { \"name\": \"support.function.magic.python\" } }, \"comment\": \"these methods have magic interpretation by python and are generally called\\nindirectly through syntactic constructs\\n\", \"match\": \"(?x)\\n\\\\b(\\n__(?:\\nabs | add | aenter | aexit | aiter | and | anext | await\\n| bool | call | ceil | cmp | coerce | complex | contains\\n| copy | deepcopy | del | delattr | delete | delitem\\n| delslice | dir | div | divmod | enter | eq | exit | float\\n| floor | floordiv | format | ge | get | getattr\\n| getattribute | getinitargs | getitem | getnewargs\\n| getslice | getstate | gt | hash | hex | iadd | iand | idiv\\n| ifloordiv | ilshift | imod | imul | index | init\\n| instancecheck | int | invert | ior | ipow | irshift | isub\\n| iter | itruediv | ixor | le | len | long | lshift | lt\\n| missing | mod | mul | ne | neg | new | next | nonzero | oct | or\\n| pos | pow | radd | rand | rdiv | rdivmod | reduce\\n| reduce_ex | repr | reversed | rfloordiv | rlshift | rmod\\n| rmul | ror | round | rpow | rrshift | rshift | rsub\\n| rtruediv | rxor | set | setattr | setitem | setslice\\n| setstate | sizeof | str | sub | subclasscheck | truediv\\n| trunc | unicode | xor | matmul | rmatmul | imatmul\\n| init_subclass | set_name | fspath | bytes | prepare\\n)__\\n)\\\\b\\n\" }, \"magic-names\": { \"patterns\": [{ \"include\": \"#magic-function-names\" }, { \"include\": \"#magic-variable-names\" }] }, \"magic-variable-names\": { \"captures\": { \"1\": { \"name\": \"support.variable.magic.python\" } }, \"comment\": \"magic variables which a class/module may have.\", \"match\": \"(?x)\\n\\\\b(\\n__(?:\\nall | bases | builtins | class | class_getitem | code | debug\\n| defaults | dict | doc | file | func | kwdefaults | members\\n| metaclass | methods | module | mro | mro_entries | name\\n| qualname | post_init | self | signature | slots | subclasses\\n| version | weakref | wrapped | annotations | classcell\\n| spec | path | package | future | traceback\\n)__\\n)\\\\b\\n\" }, \"member-access\": { \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.period.python\" } }, \"end\": \"(?x)\\n\\n\\n(?<=\\\\S)(?=\\\\W) |\\n\\n\\n(^|(?<=\\\\s))(?=[^\\\\\\\\\\\\w\\\\s]) |\\n$\\n\", \"name\": \"meta.member.access.python\", \"patterns\": [{ \"include\": \"#function-call\" }, { \"include\": \"#member-access-base\" }, { \"include\": \"#member-access-attribute\" }] }, \"member-access-attribute\": { \"comment\": \"Highlight attribute access in otherwise non-specialized cases.\", \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\", \"name\": \"meta.attribute.python\" }, \"member-access-base\": { \"patterns\": [{ \"include\": \"#magic-names\" }, { \"include\": \"#illegal-names\" }, { \"include\": \"#illegal-object-name\" }, { \"include\": \"#special-names\" }, { \"include\": \"#line-continuation\" }, { \"include\": \"#item-access\" }, { \"include\": \"#special-variables-types\" }] }, \"member-access-class\": { \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.period.python\" } }, \"end\": \"(?<=\\\\S)(?=\\\\W)|$\", \"name\": \"meta.member.access.python\", \"patterns\": [{ \"include\": \"#call-wrapper-inheritance\" }, { \"include\": \"#member-access-base\" }, { \"include\": \"#inheritance-identifier\" }] }, \"number\": { \"name\": \"constant.numeric.python\", \"patterns\": [{ \"include\": \"#number-float\" }, { \"include\": \"#number-dec\" }, { \"include\": \"#number-hex\" }, { \"include\": \"#number-oct\" }, { \"include\": \"#number-bin\" }, { \"include\": \"#number-long\" }, { \"match\": \"\\\\b[0-9]+\\\\w+\", \"name\": \"invalid.illegal.name.python\" }] }, \"number-bin\": { \"captures\": { \"1\": { \"name\": \"storage.type.number.python\" } }, \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n(0[bB]) (_?[01])+\\n\\\\b\\n\", \"name\": \"constant.numeric.bin.python\" }, \"number-dec\": { \"captures\": { \"1\": { \"name\": \"storage.type.imaginary.number.python\" }, \"2\": { \"name\": \"invalid.illegal.dec.python\" } }, \"match\": \"(?x)\\n(?<![\\\\w\\\\.])(?:\\n[1-9](?: _?[0-9] )*\\n|\\n0+\\n|\\n[0-9](?: _?[0-9] )* ([jJ])\\n|\\n0 ([0-9]+)(?![eE\\\\.])\\n)\\\\b\\n\", \"name\": \"constant.numeric.dec.python\" }, \"number-float\": { \"captures\": { \"1\": { \"name\": \"storage.type.imaginary.number.python\" } }, \"match\": \"(?x)\\n(?<! \\\\w)(?:\\n(?:\\n\\\\.[0-9](?: _?[0-9] )*\\n|\\n[0-9](?: _?[0-9] )* \\\\. [0-9](?: _?[0-9] )*\\n|\\n[0-9](?: _?[0-9] )* \\\\.\\n) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\\n|\\n[0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\\n)([jJ])?\\\\b\\n\", \"name\": \"constant.numeric.float.python\" }, \"number-hex\": { \"captures\": { \"1\": { \"name\": \"storage.type.number.python\" } }, \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n(0[xX]) (_?[0-9a-fA-F])+\\n\\\\b\\n\", \"name\": \"constant.numeric.hex.python\" }, \"number-long\": { \"captures\": { \"2\": { \"name\": \"storage.type.number.python\" } }, \"comment\": \"this is to support python2 syntax for long ints\", \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n([1-9][0-9]* | 0) ([lL])\\n\\\\b\\n\", \"name\": \"constant.numeric.bin.python\" }, \"number-oct\": { \"captures\": { \"1\": { \"name\": \"storage.type.number.python\" } }, \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n(0[oO]) (_?[0-7])+\\n\\\\b\\n\", \"name\": \"constant.numeric.oct.python\" }, \"odd-function-call\": { \"begin\": \"(?x)\\n(?<= \\\\] | \\\\) ) \\\\s*\\n(?=\\\\()\\n\", \"comment\": 'A bit obscured function call where there may have been an\\narbitrary number of other operations to get the function.\\nE.g. \"arr[idx](args)\"\\n', \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.arguments.end.python\" } }, \"patterns\": [{ \"include\": \"#function-arguments\" }] }, \"operator\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.logical.python\" }, \"2\": { \"name\": \"keyword.control.flow.python\" }, \"3\": { \"name\": \"keyword.operator.bitwise.python\" }, \"4\": { \"name\": \"keyword.operator.arithmetic.python\" }, \"5\": { \"name\": \"keyword.operator.comparison.python\" } }, \"match\": \"(?x)\\n\\\\b(?<!\\\\.)\\n(?:\\n(and | or | not | in | is)                         (?# 1)\\n|\\n(for | if | else | await | (?:yield(?:\\\\s+from)?))  (?# 2)\\n)\\n(?!\\\\s*:)\\\\b\\n\\n| (<< | >> | & | \\\\| | \\\\^ | ~)                          (?# 3)\\n\\n| (\\\\*\\\\* | \\\\* | \\\\+ | - | % | // | / | @)                (?# 4)\\n\\n| (!= | == | >= | <= | < | >)                          (?# 5)\\n\" }, \"parameter-special\": { \"captures\": { \"1\": { \"name\": \"variable.parameter.function.language.python\" }, \"2\": { \"name\": \"variable.parameter.function.language.special.self.python\" }, \"3\": { \"name\": \"variable.parameter.function.language.special.cls.python\" }, \"4\": { \"name\": \"punctuation.separator.parameters.python\" } }, \"match\": \"(?x)\\n\\\\b ((self)|(cls)) \\\\b \\\\s*(?:(,)|(?=\\\\)))\\n\" }, \"parameters\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.parameters.begin.python\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.parameters.end.python\" } }, \"name\": \"meta.function.parameters.python\", \"patterns\": [{ \"match\": \"(\\\\*\\\\*|\\\\*)\", \"name\": \"keyword.operator.unpacking.parameter.python\" }, { \"include\": \"#lambda-incomplete\" }, { \"include\": \"#illegal-names\" }, { \"include\": \"#illegal-object-name\" }, { \"include\": \"#parameter-special\" }, { \"captures\": { \"1\": { \"name\": \"variable.parameter.function.language.python\" }, \"2\": { \"name\": \"punctuation.separator.parameters.python\" } }, \"match\": \"(?x)\\n([[:alpha:]_]\\\\w*)\\n\\\\s* (?: (,) | (?=[)#\\\\n=]))\\n\" }, { \"include\": \"#comments\" }, { \"include\": \"#loose-default\" }, { \"include\": \"#annotated-parameter\" }] }, \"punctuation\": { \"patterns\": [{ \"match\": \":\", \"name\": \"punctuation.separator.colon.python\" }, { \"match\": \",\", \"name\": \"punctuation.separator.element.python\" }] }, \"regexp\": { \"patterns\": [{ \"include\": \"#regexp-single-three-line\" }, { \"include\": \"#regexp-double-three-line\" }, { \"include\": \"#regexp-single-one-line\" }, { \"include\": \"#regexp-double-one-line\" }, { \"include\": \"#fregexp-single-three-line\" }, { \"include\": \"#fregexp-double-three-line\" }, { \"include\": \"#fregexp-single-one-line\" }, { \"include\": \"#fregexp-double-one-line\" }] }, \"regexp-backreference\": { \"captures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.backreference.regexp\" }, \"3\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\" } }, \"match\": \"(?x)\\n(\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\", \"name\": \"meta.backreference.named.regexp\" }, \"regexp-backreference-number\": { \"captures\": { \"1\": { \"name\": \"entity.name.tag.backreference.regexp\" } }, \"match\": \"(\\\\\\\\[1-9]\\\\d?)\", \"name\": \"meta.backreference.regexp\" }, \"regexp-base-common\": { \"patterns\": [{ \"match\": \"\\\\.\", \"name\": \"support.other.match.any.regexp\" }, { \"match\": \"\\\\^\", \"name\": \"support.other.match.begin.regexp\" }, { \"match\": \"\\\\$\", \"name\": \"support.other.match.end.regexp\" }, { \"match\": \"[+*?]\\\\??\", \"name\": \"keyword.operator.quantifier.regexp\" }, { \"match\": \"\\\\|\", \"name\": \"keyword.operator.disjunction.regexp\" }, { \"include\": \"#regexp-escape-sequence\" }] }, \"regexp-base-expression\": { \"patterns\": [{ \"include\": \"#regexp-quantifier\" }, { \"include\": \"#regexp-base-common\" }] }, \"regexp-charecter-set-escapes\": { \"patterns\": [{ \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-special\" }, { \"match\": \"\\\\\\\\([0-7]{1,3})\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-double-one-line\": { \"begin\": '\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\")', \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": '(\")|(?<!\\\\\\\\)(\\\\n)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.regexp.quoted.single.python\", \"patterns\": [{ \"include\": \"#double-one-regexp-expression\" }] }, \"regexp-double-three-line\": { \"begin\": '\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\"\"\")', \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": '(\"\"\")', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.regexp.quoted.multi.python\", \"patterns\": [{ \"include\": \"#double-three-regexp-expression\" }] }, \"regexp-escape-catchall\": { \"match\": \"\\\\\\\\(.|\\\\n)\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-character\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nx[0-9A-Fa-f]{2}\\n| 0[0-7]{1,2}\\n| [0-7]{3}\\n)\\n\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-sequence\": { \"patterns\": [{ \"include\": \"#regexp-escape-special\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-backreference-number\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-escape-special\": { \"match\": \"\\\\\\\\([AbBdDsSwWZ])\", \"name\": \"support.other.escape.special.regexp\" }, \"regexp-escape-unicode\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n)\\n\", \"name\": \"constant.character.unicode.regexp\" }, \"regexp-flags\": { \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\", \"name\": \"storage.modifier.flag.regexp\" }, \"regexp-quantifier\": { \"match\": \"(?x)\\n\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" }, \"regexp-single-one-line\": { \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\')\", \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.regexp.quoted.single.python\", \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"regexp-single-three-line\": { \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\'\\\\'\\\\')\", \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"storage.type.string.python\" }, \"5\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\'\\\\'\\\\')\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.regexp.quoted.multi.python\", \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }] }, \"reserved-names-vyper\": { \"match\": \"(?x)\\n\\\\b (finney | gwei | range | def | ____init____ | timedelta | babbage | zero_address | raise | external | empty_bytes32 | assert | continue | wei | ada | min_int256 | min_int128 | chainid | max_decimal | default | indexed | selfdestruct | lovelace | immutable | throw | kwei | max_int128 | while | constant | ___default___ | balance | twei | codesize | false | max_int256 | _default_ | init | mwei | if | ____default____ | true | payable | internal | until | this | nonpayable | pass | public | nonreentrant | blockhash | max_uint256 | shannon | none | units | _init_ | ___init___ | is_contract | for | zero_wei | min_decimal | szabo | timestamp | ether | pwei | send) \\\\b\\n\", \"name\": \"name.reserved.vyper\" }, \"return-annotation\": { \"begin\": \"(->)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.annotation.result.python\" } }, \"end\": \"(?=:)\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"round-braces\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.begin.python\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.end.python\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"semicolon\": { \"patterns\": [{ \"match\": \"\\\\;$\", \"name\": \"invalid.deprecated.semicolon.python\" }] }, \"single-one-fregexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-fregexp-expression\": { \"patterns\": [{ \"include\": \"#fregexp-base-expression\" }, { \"include\": \"#single-one-regexp-character-set\" }, { \"include\": \"#single-one-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#single-one-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#single-one-fregexp-lookahead\" }, { \"include\": \"#single-one-fregexp-lookahead-negative\" }, { \"include\": \"#single-one-fregexp-lookbehind\" }, { \"include\": \"#single-one-fregexp-lookbehind-negative\" }, { \"include\": \"#single-one-fregexp-conditional\" }, { \"include\": \"#single-one-fregexp-parentheses-non-capturing\" }, { \"include\": \"#single-one-fregexp-parentheses\" }] }, \"single-one-fregexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-fregexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-fregexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-fregexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-fregexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-fregexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-fregexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-fregexp-expression\" }] }, \"single-one-regexp-character-set\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\" }, { \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"keyword.operator.negation.regexp\" }, \"3\": { \"name\": \"constant.character.set.regexp\" } }, \"end\": \"(\\\\]|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.character.set.regexp\", \"patterns\": [{ \"include\": \"#regexp-charecter-set-escapes\" }, { \"match\": \"[^\\\\n]\", \"name\": \"constant.character.set.regexp\" }] }] }, \"single-one-regexp-comments\": { \"begin\": \"\\\\(\\\\?#\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.comment.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.comment.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"comment.regexp\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"single-one-regexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-one-regexp-expression\": { \"patterns\": [{ \"include\": \"#regexp-base-expression\" }, { \"include\": \"#single-one-regexp-character-set\" }, { \"include\": \"#single-one-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#single-one-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#single-one-regexp-lookahead\" }, { \"include\": \"#single-one-regexp-lookahead-negative\" }, { \"include\": \"#single-one-regexp-lookbehind\" }, { \"include\": \"#single-one-regexp-lookbehind-negative\" }, { \"include\": \"#single-one-regexp-conditional\" }, { \"include\": \"#single-one-regexp-parentheses-non-capturing\" }, { \"include\": \"#single-one-regexp-parentheses\" }] }, \"single-one-regexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-one-regexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-one-regexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-one-regexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-one-regexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-one-regexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-one-regexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-one-regexp-expression\" }] }, \"single-three-fregexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-expression\": { \"patterns\": [{ \"include\": \"#fregexp-base-expression\" }, { \"include\": \"#single-three-regexp-character-set\" }, { \"include\": \"#single-three-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#single-three-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#single-three-fregexp-lookahead\" }, { \"include\": \"#single-three-fregexp-lookahead-negative\" }, { \"include\": \"#single-three-fregexp-lookbehind\" }, { \"include\": \"#single-three-fregexp-lookbehind-negative\" }, { \"include\": \"#single-three-fregexp-conditional\" }, { \"include\": \"#single-three-fregexp-parentheses-non-capturing\" }, { \"include\": \"#single-three-fregexp-parentheses\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-fregexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-fregexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-character-set\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\" }, { \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"keyword.operator.negation.regexp\" }, \"3\": { \"name\": \"constant.character.set.regexp\" } }, \"end\": \"(\\\\]|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.character.set.regexp\", \"patterns\": [{ \"include\": \"#regexp-charecter-set-escapes\" }, { \"match\": \"[^\\\\n]\", \"name\": \"constant.character.set.regexp\" }] }] }, \"single-three-regexp-comments\": { \"begin\": \"\\\\(\\\\?#\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.comment.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.comment.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"comment.regexp\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"single-three-regexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-expression\": { \"patterns\": [{ \"include\": \"#regexp-base-expression\" }, { \"include\": \"#single-three-regexp-character-set\" }, { \"include\": \"#single-three-regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#single-three-regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#single-three-regexp-lookahead\" }, { \"include\": \"#single-three-regexp-lookahead-negative\" }, { \"include\": \"#single-three-regexp-lookbehind\" }, { \"include\": \"#single-three-regexp-lookbehind-negative\" }, { \"include\": \"#single-three-regexp-conditional\" }, { \"include\": \"#single-three-regexp-parentheses-non-capturing\" }, { \"include\": \"#single-three-regexp-parentheses\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"single-three-regexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#single-three-regexp-expression\" }, { \"include\": \"#comments-string-single-three\" }] }, \"special-names\": { \"match\": \"(?x)\\n\\\\b\\n\\n\\n\\n\\n\\n(\\n_* [[:upper:]] [_\\\\d]* [[:upper:]]\\n)\\n[[:upper:]\\\\d]* (_\\\\w*)?\\n\\\\b\\n\", \"name\": \"constant.other.caps.python\" }, \"special-variables\": { \"captures\": { \"1\": { \"name\": \"variable.language.special.self.python\" }, \"2\": { \"name\": \"variable.language.special.cls.python\" } }, \"match\": \"(?x)\\n\\\\b (?<!\\\\.) (?:\\n(self) | (cls)\\n)\\\\b\\n\" }, \"special-variables-types\": { \"patterns\": [{ \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nlog   )\\\\b\\n\", \"name\": \"variable.language.special.log.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nmsg   )\\\\b\\n\", \"name\": \"variable.language.special.msg.vyper\" }, { \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nblock   )\\\\b\\n\", \"name\": \"variable.language.special.block.vyper\" }] }, \"statement\": { \"patterns\": [{ \"include\": \"#import\" }, { \"include\": \"#class-declaration\" }, { \"include\": \"#function-declaration\" }, { \"include\": \"#generator\" }, { \"include\": \"#statement-keyword\" }, { \"include\": \"#assignment-operator\" }, { \"include\": \"#decorator\" }, { \"include\": \"#docstring-statement\" }, { \"include\": \"#semicolon\" }] }, \"statement-keyword\": { \"patterns\": [{ \"match\": \"\\\\b((async\\\\s+)?\\\\s*def)\\\\b\", \"name\": \"storage.type.function.python\" }, { \"comment\": \"if `as` is eventually followed by `:` or line continuation\\nit's probably control flow like:\\n    with foo as bar, \\\\\\n         Foo as Bar:\\n      try:\\n        do_stuff()\\n      except Exception as e:\\n        pass\\n\", \"match\": \"\\\\b(?<!\\\\.)as\\\\b(?=.*[:\\\\\\\\])\", \"name\": \"keyword.control.flow.python\" }, { \"comment\": \"other legal use of `as` is in an import\", \"match\": \"\\\\b(?<!\\\\.)as\\\\b\", \"name\": \"keyword.control.import.python\" }, { \"match\": \"(?x)\\n\\\\b(?<!\\\\.)(\\nasync | continue | del | assert | break | finally | for\\n| from | elif | else | if | except | pass | raise\\n| return | try | while | with\\n)\\\\b\\n\", \"name\": \"keyword.control.flow.python\" }, { \"match\": \"(?x)\\n\\\\b(?<!\\\\.)(\\nglobal | nonlocal\\n)\\\\b\\n\", \"name\": \"storage.modifier.declaration.python\" }, { \"match\": \"\\\\b(?<!\\\\.)(class)\\\\b\", \"name\": \"storage.type.class.python\" }] }, \"string\": { \"patterns\": [{ \"include\": \"#string-quoted-multi-line\" }, { \"include\": \"#string-quoted-single-line\" }, { \"include\": \"#string-bin-quoted-multi-line\" }, { \"include\": \"#string-bin-quoted-single-line\" }, { \"include\": \"#string-raw-quoted-multi-line\" }, { \"include\": \"#string-raw-quoted-single-line\" }, { \"include\": \"#string-raw-bin-quoted-multi-line\" }, { \"include\": \"#string-raw-bin-quoted-single-line\" }, { \"include\": \"#fstring-fnorm-quoted-multi-line\" }, { \"include\": \"#fstring-fnorm-quoted-single-line\" }, { \"include\": \"#fstring-normf-quoted-multi-line\" }, { \"include\": \"#fstring-normf-quoted-single-line\" }, { \"include\": \"#fstring-raw-quoted-multi-line\" }, { \"include\": \"#fstring-raw-quoted-single-line\" }] }, \"string-bin-quoted-multi-line\": { \"begin\": `(\\\\b[bB])('''|\"\"\")`, \"beginCaptures\": { \"1\": { \"name\": \"storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\2)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.binary.multi.python\", \"patterns\": [{ \"include\": \"#string-entity\" }] }, \"string-bin-quoted-single-line\": { \"begin\": `(\\\\b[bB])((['\"]))`, \"beginCaptures\": { \"1\": { \"name\": \"storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.binary.single.python\", \"patterns\": [{ \"include\": \"#string-entity\" }] }, \"string-brace-formatting\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" }, \"3\": { \"name\": \"storage.type.format.python\" }, \"4\": { \"name\": \"storage.type.format.python\" } }, \"match\": `(?x)\n(\n{{ | }}\n| (?:\n{\n\\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\"]+\\\\])*\n(![rsa])?\n( : \\\\w? [<>=^]? [-+ ]? \\\\#?\n\\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )?\n})\n)\n`, \"name\": \"meta.format.brace.python\" }, { \"captures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" }, \"3\": { \"name\": \"storage.type.format.python\" }, \"4\": { \"name\": \"storage.type.format.python\" } }, \"match\": `(?x)\n(\n{\n\\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\"]+\\\\])*\n(![rsa])?\n(:)\n[^'\"{}\\\\n]* (?:\n\\\\{ [^'\"}\\\\n]*? \\\\} [^'\"{}\\\\n]*\n)*\n}\n)\n`, \"name\": \"meta.format.brace.python\" }] }, \"string-consume-escape\": { \"match\": `\\\\\\\\['\"\\\\n\\\\\\\\]` }, \"string-entity\": { \"patterns\": [{ \"include\": \"#escape-sequence\" }, { \"include\": \"#string-line-continuation\" }, { \"include\": \"#string-formatting\" }] }, \"string-formatting\": { \"captures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"match\": \"(?x)\\n(\\n% (\\\\([\\\\w\\\\s]*\\\\))?\\n[-+#0 ]*\\n(\\\\d+|\\\\*)? (\\\\.(\\\\d+|\\\\*))?\\n([hlL])?\\n[diouxXeEfFgGcrsab%]\\n)\\n\", \"name\": \"meta.format.percent.python\" }, \"string-line-continuation\": { \"match\": \"\\\\\\\\$\", \"name\": \"constant.language.python\" }, \"string-multi-bad-brace1-formatting-raw\": { \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!'''|\"\"\") )\n%\\\\}\n)\n`, \"comment\": \"template using {% ... %}\", \"end\": `(?='''|\"\"\")`, \"patterns\": [{ \"include\": \"#string-consume-escape\" }] }, \"string-multi-bad-brace1-formatting-unicode\": { \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!'''|\"\"\") )\n%\\\\}\n)\n`, \"comment\": \"template using {% ... %}\", \"end\": `(?='''|\"\"\")`, \"patterns\": [{ \"include\": \"#escape-sequence-unicode\" }, { \"include\": \"#escape-sequence\" }, { \"include\": \"#string-line-continuation\" }] }, \"string-multi-bad-brace2-formatting-raw\": { \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!'''|\"\"\") [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!'''|\"\"\")\n\\\\}\n)\n`, \"comment\": \"odd format or format-like syntax\", \"end\": `(?='''|\"\"\")`, \"patterns\": [{ \"include\": \"#string-consume-escape\" }, { \"include\": \"#string-formatting\" }] }, \"string-multi-bad-brace2-formatting-unicode\": { \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!'''|\"\"\") [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!'''|\"\"\")\n\\\\}\n)\n`, \"comment\": \"odd format or format-like syntax\", \"end\": `(?='''|\"\"\")`, \"patterns\": [{ \"include\": \"#escape-sequence-unicode\" }, { \"include\": \"#string-entity\" }] }, \"string-quoted-multi-line\": { \"begin\": `(?:\\\\b([rR])(?=[uU]))?([uU])?('''|\"\"\")`, \"beginCaptures\": { \"1\": { \"name\": \"invalid.illegal.prefix.python\" }, \"2\": { \"name\": \"storage.type.string.python\" }, \"3\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\3)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.multi.python\", \"patterns\": [{ \"include\": \"#string-multi-bad-brace1-formatting-unicode\" }, { \"include\": \"#string-multi-bad-brace2-formatting-unicode\" }, { \"include\": \"#string-unicode-guts\" }] }, \"string-quoted-single-line\": { \"begin\": `(?:\\\\b([rR])(?=[uU]))?([uU])?((['\"]))`, \"beginCaptures\": { \"1\": { \"name\": \"invalid.illegal.prefix.python\" }, \"2\": { \"name\": \"storage.type.string.python\" }, \"3\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.single.python\", \"patterns\": [{ \"include\": \"#string-single-bad-brace1-formatting-unicode\" }, { \"include\": \"#string-single-bad-brace2-formatting-unicode\" }, { \"include\": \"#string-unicode-guts\" }] }, \"string-raw-bin-guts\": { \"patterns\": [{ \"include\": \"#string-consume-escape\" }, { \"include\": \"#string-formatting\" }] }, \"string-raw-bin-quoted-multi-line\": { \"begin\": `(\\\\b(?:R[bB]|[bB]R))('''|\"\"\")`, \"beginCaptures\": { \"1\": { \"name\": \"storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\2)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.raw.binary.multi.python\", \"patterns\": [{ \"include\": \"#string-raw-bin-guts\" }] }, \"string-raw-bin-quoted-single-line\": { \"begin\": `(\\\\b(?:R[bB]|[bB]R))((['\"]))`, \"beginCaptures\": { \"1\": { \"name\": \"storage.type.string.python\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.raw.binary.single.python\", \"patterns\": [{ \"include\": \"#string-raw-bin-guts\" }] }, \"string-raw-guts\": { \"patterns\": [{ \"include\": \"#string-consume-escape\" }, { \"include\": \"#string-formatting\" }, { \"include\": \"#string-brace-formatting\" }] }, \"string-raw-quoted-multi-line\": { \"begin\": `\\\\b(([uU]R)|(R))('''|\"\"\")`, \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\4)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.raw.multi.python\", \"patterns\": [{ \"include\": \"#string-multi-bad-brace1-formatting-raw\" }, { \"include\": \"#string-multi-bad-brace2-formatting-raw\" }, { \"include\": \"#string-raw-guts\" }] }, \"string-raw-quoted-single-line\": { \"begin\": `\\\\b(([uU]R)|(R))((['\"]))`, \"beginCaptures\": { \"2\": { \"name\": \"invalid.deprecated.prefix.python\" }, \"3\": { \"name\": \"storage.type.string.python\" }, \"4\": { \"name\": \"punctuation.definition.string.begin.python\" } }, \"end\": \"(\\\\4)|((?<!\\\\\\\\)\\\\n)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.python\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"string.quoted.raw.single.python\", \"patterns\": [{ \"include\": \"#string-single-bad-brace1-formatting-raw\" }, { \"include\": \"#string-single-bad-brace2-formatting-raw\" }, { \"include\": \"#string-raw-guts\" }] }, \"string-single-bad-brace1-formatting-raw\": { \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) )\n%\\\\}\n)\n`, \"comment\": \"template using {% ... %}\", \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`, \"patterns\": [{ \"include\": \"#string-consume-escape\" }] }, \"string-single-bad-brace1-formatting-unicode\": { \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) )\n%\\\\}\n)\n`, \"comment\": \"template using {% ... %}\", \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`, \"patterns\": [{ \"include\": \"#escape-sequence-unicode\" }, { \"include\": \"#escape-sequence\" }, { \"include\": \"#string-line-continuation\" }] }, \"string-single-bad-brace2-formatting-raw\": { \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!(['\"])|((?<!\\\\\\\\)\\\\n))\n\\\\}\n)\n`, \"comment\": \"odd format or format-like syntax\", \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`, \"patterns\": [{ \"include\": \"#string-consume-escape\" }, { \"include\": \"#string-formatting\" }] }, \"string-single-bad-brace2-formatting-unicode\": { \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!(['\"])|((?<!\\\\\\\\)\\\\n))\n\\\\}\n)\n`, \"comment\": \"odd format or format-like syntax\", \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`, \"patterns\": [{ \"include\": \"#escape-sequence-unicode\" }, { \"include\": \"#string-entity\" }] }, \"string-unicode-guts\": { \"patterns\": [{ \"include\": \"#escape-sequence-unicode\" }, { \"include\": \"#string-entity\" }, { \"include\": \"#string-brace-formatting\" }] } }, \"scopeName\": \"source.vyper\", \"aliases\": [\"vy\"] });\nvar vyper = [\n  lang\n];\n\nexport { vyper as default };\n"],"names":["vyper","Object","freeze"],"sourceRoot":""}