{"version":3,"file":"static/chunks/4151.298188b1efb0b995.js","mappings":"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","sources":["webpack://_N_E/./node_modules/shiki/dist/langs/csharp.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"C#\", \"name\": \"csharp\", \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#directives\" }, { \"include\": \"#declarations\" }, { \"include\": \"#script-top-level\" }], \"repository\": { \"accessor-getter\": { \"patterns\": [{ \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"contentName\": \"meta.accessor.getter.cs\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#statement\" }] }, { \"include\": \"#accessor-getter-expression\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"accessor-getter-expression\": { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"contentName\": \"meta.accessor.getter.cs\", \"end\": \"(?=;|\\\\})\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"accessor-setter\": { \"patterns\": [{ \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"contentName\": \"meta.accessor.setter.cs\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#statement\" }] }, { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"contentName\": \"meta.accessor.setter.cs\", \"end\": \"(?=;|\\\\})\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, { \"include\": \"#punctuation-semicolon\" }] }, \"anonymous-method-expression\": { \"patterns\": [{ \"begin\": \"(?x)\\n((?:\\\\b(?:async|static)\\\\b\\\\s*)*)\\n(?:\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b|\\n(\\\\()\\n(?<tuple>(?:[^()]|\\\\(\\\\g<tuple>\\\\))*)\\n(\\\\))\\n)\\\\s*\\n(=>)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"match\": \"async|static\", \"name\": \"storage.modifier.$0.cs\" }] }, \"2\": { \"name\": \"entity.name.variable.parameter.cs\" }, \"3\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"4\": { \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#explicit-anonymous-function-parameter\" }, { \"include\": \"#implicit-anonymous-function-parameter\" }, { \"include\": \"#default-argument\" }, { \"include\": \"#punctuation-comma\" }] }, \"5\": { \"name\": \"punctuation.parenthesis.close.cs\" }, \"6\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"end\": \"(?=[,;)}])\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"(?={)\", \"end\": \"(?=[,;)}])\", \"patterns\": [{ \"include\": \"#block\" }, { \"include\": \"#intrusive\" }] }, { \"begin\": \"\\\\b(ref)\\\\b|(?=\\\\S)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.ref.cs\" } }, \"end\": \"(?=[,;)}])\", \"patterns\": [{ \"include\": \"#expression\" }] }] }, { \"begin\": \"(?x)\\n((?:\\\\b(?:async|static)\\\\b\\\\s*)*)\\n\\\\b(delegate)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"match\": \"async|static\", \"name\": \"storage.modifier.$0.cs\" }] }, \"2\": { \"name\": \"storage.type.delegate.cs\" } }, \"end\": \"(?<=})|(?=[,;)}])\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#explicit-anonymous-function-parameter\" }, { \"include\": \"#punctuation-comma\" }] }, { \"include\": \"#block\" }] }] }, \"anonymous-object-creation-expression\": { \"begin\": \"\\\\b(new)\\\\b\\\\s*(?=\\\\{|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#initializer-expression\" }] }, \"argument\": { \"patterns\": [{ \"match\": \"\\\\b(ref|in)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, { \"begin\": \"\\\\b(out)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.out.cs\" } }, \"end\": \"(?=,|\\\\)|\\\\])\", \"patterns\": [{ \"include\": \"#declaration-expression-local\" }, { \"include\": \"#expression\" }] }, { \"include\": \"#expression\" }] }, \"argument-list\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#named-argument\" }, { \"include\": \"#argument\" }, { \"include\": \"#punctuation-comma\" }] }, \"array-creation-expression\": { \"begin\": \"(?x)\\n\\\\b(new|stackalloc)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)?\\\\s*\\n(?=\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.$1.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"end\": \"(?<=\\\\])\", \"patterns\": [{ \"include\": \"#bracketed-argument-list\" }] }, \"as-expression\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.as.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"match\": \"(?x)\\n(?<!\\\\.)\\\\b(as)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?(?!\\\\?))?\\n(?:\\\\s*\\n\\\\[\\n\\\\s*(?:,\\\\s*)*\\n\\\\]\\n(?:\\\\s*\\\\?(?!\\\\?))?\\n)*\\n)\\n)?\" }, \"assignment-expression\": { \"begin\": \"(?:\\\\*|/|%|\\\\+|-|\\\\?\\\\?|\\\\&|\\\\^|<<|>>>?|\\\\|)?=(?!=|>)\", \"beginCaptures\": { \"0\": { \"patterns\": [{ \"include\": \"#assignment-operators\" }] } }, \"end\": \"(?=[,\\\\)\\\\];}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"assignment-operators\": { \"patterns\": [{ \"match\": \"\\\\*=|/=|%=|\\\\+=|-=|\\\\?\\\\?=\", \"name\": \"keyword.operator.assignment.compound.cs\" }, { \"match\": \"\\\\&=|\\\\^=|<<=|>>>?=|\\\\|=\", \"name\": \"keyword.operator.assignment.compound.bitwise.cs\" }, { \"match\": \"\\\\=\", \"name\": \"keyword.operator.assignment.cs\" }] }, \"attribute\": { \"patterns\": [{ \"include\": \"#type-name\" }, { \"include\": \"#type-arguments\" }, { \"include\": \"#attribute-arguments\" }] }, \"attribute-arguments\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#attribute-named-argument\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"attribute-named-argument\": { \"begin\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(?==)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.variable.property.cs\" } }, \"end\": \"(?=(,|\\\\)))\", \"patterns\": [{ \"include\": \"#operator-assignment\" }, { \"include\": \"#expression\" }] }, \"attribute-section\": { \"begin\": \"(\\\\[)(assembly|module|field|event|method|param|property|return|type)?(\\\\:)?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.open.cs\" }, \"2\": { \"name\": \"keyword.other.attribute-specifier.cs\" }, \"3\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute\" }, { \"include\": \"#punctuation-comma\" }] }, \"await-expression\": { \"match\": \"(?<!\\\\.\\\\s*)\\\\b(await)\\\\b\", \"name\": \"keyword.operator.expression.await.cs\" }, \"await-statement\": { \"begin\": \"(?<!\\\\.\\\\s*)\\\\b(await)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.await.cs\" } }, \"end\": \"(?<=})|(?=;|})\", \"patterns\": [{ \"include\": \"#foreach-statement\" }, { \"include\": \"#using-statement\" }, { \"include\": \"#expression\" }] }, \"base-types\": { \"begin\": \":\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{|where|;)\", \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#preprocessor\" }] }, \"block\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#statement\" }] }, \"boolean-literal\": { \"patterns\": [{ \"match\": \"(?<!\\\\.)\\\\btrue\\\\b\", \"name\": \"constant.language.boolean.true.cs\" }, { \"match\": \"(?<!\\\\.)\\\\bfalse\\\\b\", \"name\": \"constant.language.boolean.false.cs\" }] }, \"bracketed-argument-list\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#named-argument\" }, { \"include\": \"#argument\" }, { \"include\": \"#punctuation-comma\" }] }, \"bracketed-parameter-list\": { \"begin\": \"(?=(\\\\[))\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"(?=(\\\\]))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"begin\": \"(?<=\\\\[)\", \"end\": \"(?=\\\\])\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#parameter\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#variable-initializer\" }] }] }, \"break-or-continue-statement\": { \"match\": \"(?<!\\\\.)\\\\b(break|continue)\\\\b\", \"name\": \"keyword.control.flow.$1.cs\" }, \"case-guard\": { \"patterns\": [{ \"include\": \"#parenthesized-expression\" }, { \"include\": \"#expression\" }] }, \"cast-expression\": { \"captures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"match\": \"(?x)\\n(\\\\()\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(\\\\))(?=\\\\s*-*!*@?[_[:alnum:]\\\\(])\" }, \"casted-constant-pattern\": { \"begin\": `(?x)\n(\\\\()\n([\\\\s.:@_[:alnum:]]+)\n(\\\\))\n(?=[\\\\s+\\\\-!~]*@?[_[:alnum:]('\"]+)`, \"beginCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-builtin\" }, { \"include\": \"#type-name\" }] }, \"3\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#casted-constant-pattern\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#constant-pattern\" }] }, { \"include\": \"#constant-pattern\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.alias.cs\" }, \"2\": { \"name\": \"punctuation.separator.coloncolon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\:\\\\:)\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\.)\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.constant.cs\" }] }, \"catch-clause\": { \"begin\": \"(?<!\\\\.)\\\\b(catch)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.catch.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"entity.name.variable.local.cs\" } }, \"match\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(?:(\\\\g<identifier>)\\\\b)?\" }] }, { \"include\": \"#when-clause\" }, { \"include\": \"#comment\" }, { \"include\": \"#block\" }] }, \"char-character-escape\": { \"match\": \"\\\\\\\\(x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4}|.)\", \"name\": \"constant.character.escape.cs\" }, \"char-literal\": { \"begin\": \"'\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.char.begin.cs\" } }, \"end\": \"(\\\\')|((?:[^\\\\\\\\\\\\n])$)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.char.end.cs\" }, \"2\": { \"name\": \"invalid.illegal.newline.cs\" } }, \"name\": \"string.quoted.single.cs\", \"patterns\": [{ \"include\": \"#char-character-escape\" }] }, \"class-declaration\": { \"begin\": \"(?=(\\\\brecord\\\\b\\\\s+)?\\\\bclass\\\\b)\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"(?x)\\n(\\\\b(record)\\\\b\\\\s+)?\\n\\\\b(class)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.record.cs\" }, \"3\": { \"name\": \"storage.type.class.cs\" }, \"4\": { \"name\": \"entity.name.type.class.cs\" } }, \"end\": \"(?=\\\\{)|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#class-or-struct-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"class-or-struct-members\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#storage-modifier\" }, { \"include\": \"#type-declarations\" }, { \"include\": \"#property-declaration\" }, { \"include\": \"#field-declaration\" }, { \"include\": \"#event-declaration\" }, { \"include\": \"#indexer-declaration\" }, { \"include\": \"#variable-initializer\" }, { \"include\": \"#constructor-declaration\" }, { \"include\": \"#destructor-declaration\" }, { \"include\": \"#operator-declaration\" }, { \"include\": \"#conversion-operator-declaration\" }, { \"include\": \"#method-declaration\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"combinator-pattern\": { \"match\": \"\\\\b(and|or|not)\\\\b\", \"name\": \"keyword.operator.expression.pattern.combinator.$1.cs\" }, \"comment\": { \"patterns\": [{ \"begin\": \"(^\\\\s+)?(///)(?!/)\", \"captures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"name\": \"comment.block.documentation.cs\", \"patterns\": [{ \"include\": \"#xml-doc-comment\" }], \"while\": \"^(\\\\s*)(///)(?!/)\" }, { \"begin\": \"(^\\\\s+)?(/\\\\*\\\\*)(?!/)\", \"captures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"end\": \"(^\\\\s+)?(\\\\*/)\", \"name\": \"comment.block.documentation.cs\", \"patterns\": [{ \"begin\": \"\\\\G(?=(?~\\\\*/)$)\", \"patterns\": [{ \"include\": \"#xml-doc-comment\" }], \"while\": \"^(\\\\s*+)(\\\\*(?!/))?(?=(?~\\\\*/)$)\", \"whileCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } } }, { \"include\": \"#xml-doc-comment\" }] }, { \"begin\": \"(^\\\\s+)?(//).*$\", \"captures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"name\": \"comment.line.double-slash.cs\", \"while\": \"^(\\\\s*)(//).*$\" }, { \"begin\": \"/\\\\*\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"end\": \"\\\\*/\", \"name\": \"comment.block.cs\" }] }, \"conditional-operator\": { \"patterns\": [{ \"match\": \"\\\\?(?!\\\\?|\\\\s*[.\\\\[])\", \"name\": \"keyword.operator.conditional.question-mark.cs\" }, { \"match\": \":\", \"name\": \"keyword.operator.conditional.colon.cs\" }] }, \"constant-pattern\": { \"patterns\": [{ \"include\": \"#boolean-literal\" }, { \"include\": \"#null-literal\" }, { \"include\": \"#numeric-literal\" }, { \"include\": \"#char-literal\" }, { \"include\": \"#string-literal\" }, { \"include\": \"#raw-string-literal\" }, { \"include\": \"#verbatim-string-literal\" }, { \"include\": \"#type-operator-expression\" }, { \"include\": \"#expression-operator-expression\" }, { \"include\": \"#expression-operators\" }, { \"include\": \"#casted-constant-pattern\" }] }, \"constructor-declaration\": { \"begin\": \"(?=@?[_[:alpha:]][_[:alnum:]]*\\\\s*\\\\()\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.function.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\" }, { \"begin\": \"(:)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{|=>)\", \"patterns\": [{ \"include\": \"#constructor-initializer\" }] }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"constructor-initializer\": { \"begin\": \"\\\\b(base|this)\\\\b\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"variable.language.$1.cs\" } }, \"end\": \"(?<=\\\\))\", \"patterns\": [{ \"include\": \"#argument-list\" }] }, \"context-control-paren-statement\": { \"patterns\": [{ \"include\": \"#fixed-statement\" }, { \"include\": \"#lock-statement\" }, { \"include\": \"#using-statement\" }] }, \"context-control-statement\": { \"match\": \"\\\\b(checked|unchecked|unsafe)\\\\b(?!\\\\s*[@_[:alpha:](])\", \"name\": \"keyword.control.context.$1.cs\" }, \"conversion-operator-declaration\": { \"begin\": \"(?x)\\n(?<explicit_or_implicit_keyword>(?:\\\\b(?:explicit|implicit)))\\\\s*\\n(?<operator_keyword>(?:\\\\b(?:operator)))\\\\s*\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"storage.modifier.explicit.cs\" } }, \"match\": \"\\\\b(explicit)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"storage.modifier.implicit.cs\" } }, \"match\": \"\\\\b(implicit)\\\\b\" }] }, \"2\": { \"name\": \"storage.type.operator.cs\" }, \"3\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"declaration-expression-local\": { \"captures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.local.cs\" } }, \"match\": \"(?x)\\n(?:\\n\\\\b(var)\\\\b|\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\b\\\\s*\\n(?=[,)\\\\]])\" }, \"declaration-expression-tuple\": { \"captures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"match\": \"(?x)\\n(?:\\n\\\\b(var)\\\\b|\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\b\\\\s*\\n(?=[,)])\" }, \"declarations\": { \"patterns\": [{ \"include\": \"#namespace-declaration\" }, { \"include\": \"#type-declarations\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"default-argument\": { \"begin\": \"=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=,|\\\\))\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"default-literal-expression\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.default.cs\" } }, \"match\": \"\\\\b(default)\\\\b\" }, \"delegate-declaration\": { \"begin\": \"(?x)\\n(?:\\\\b(delegate)\\\\b)\\\\s+\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(<([^<>]+)>)?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.delegate.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.type.delegate.cs\" }, \"8\": { \"patterns\": [{ \"include\": \"#type-parameter-list\" }] } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#generic-constraints\" }] }, \"designation-pattern\": { \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#punctuation-comma\" }, { \"include\": \"#designation-pattern\" }] }, { \"include\": \"#simple-designation-pattern\" }] }, \"destructor-declaration\": { \"begin\": \"(~)(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.tilde.cs\" }, \"2\": { \"name\": \"entity.name.function.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"directives\": { \"patterns\": [{ \"include\": \"#extern-alias-directive\" }, { \"include\": \"#using-directive\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"discard-pattern\": { \"match\": \"_(?![_[:alnum:]])\", \"name\": \"variable.language.discard.cs\" }, \"do-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(do)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.do.cs\" } }, \"end\": \"(?=;|})\", \"patterns\": [{ \"include\": \"#statement\" }] }, \"double-raw-interpolation\": { \"begin\": \"(?<=[^\\\\{][^\\\\{]|^)((?:\\\\{)*)(\\\\{\\\\{)(?=[^\\\\{])\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.double.cs\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.begin.cs\" } }, \"end\": \"\\\\}\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.interpolation.end.cs\" } }, \"name\": \"meta.interpolation.cs\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"element-access-expression\": { \"begin\": \"(?x)\\n(?:\\n(?:(\\\\?)\\\\s*)?\\n(\\\\.)\\\\s*|\\n(->)\\\\s*\\n)?\\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*)?\\n(?:(\\\\?)\\\\s*)?\\n(?=\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.null-conditional.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" }, \"3\": { \"name\": \"punctuation.accessor.pointer.cs\" }, \"4\": { \"name\": \"variable.other.object.property.cs\" }, \"5\": { \"name\": \"keyword.operator.null-conditional.cs\" } }, \"end\": \"(?<=\\\\])(?!\\\\s*\\\\[)\", \"patterns\": [{ \"include\": \"#bracketed-argument-list\" }] }, \"else-part\": { \"begin\": \"(?<!\\\\.)\\\\b(else)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.else.cs\" } }, \"end\": \"(?<=})|(?=;)\", \"patterns\": [{ \"include\": \"#statement\" }] }, \"enum-declaration\": { \"begin\": \"(?=\\\\benum\\\\b)\", \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"begin\": \"(?=enum)\", \"end\": \"(?=\\\\{)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.enum.cs\" }, \"2\": { \"name\": \"entity.name.type.enum.cs\" } }, \"match\": \"(enum)\\\\s+(@?[_[:alpha:]][_[:alnum:]]*)\" }, { \"begin\": \":\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{)\", \"patterns\": [{ \"include\": \"#type\" }] }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-comma\" }, { \"begin\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"beginCaptures\": { \"0\": { \"name\": \"entity.name.variable.enum-member.cs\" } }, \"end\": \"(?=(,|\\\\}))\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"event-accessors\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"begin\": \"\\\\b(add|remove)\\\\b\\\\s*(?=\\\\{|;|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.accessor.$1.cs\" } }, \"end\": \"(?<=\\\\}|;)|(?=\\\\})\", \"patterns\": [{ \"include\": \"#accessor-setter\" }] }] }, \"event-declaration\": { \"begin\": \"(?x)\\n\\\\b(event)\\\\b\\\\s*\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(\\\\g<identifier>)\\\\s*\\n(?=\\\\{|;|,|=|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.event.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"8\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"9\": { \"name\": \"entity.name.variable.event.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#event-accessors\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.event.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"begin\": \"=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?<=,)|(?=;)\", \"patterns\": [{ \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }] }, \"explicit-anonymous-function-parameter\": { \"captures\": { \"1\": { \"name\": \"storage.modifier.$1.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.parameter.cs\" } }, \"match\": \"(?x)\\n(?:\\\\b(ref|params|out|in)\\\\b\\\\s*)?\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args><(?:[^<>]|\\\\g<type_args>)*>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^()]|\\\\g<tuple>)*\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n\\\\b(\\\\g<identifier>)\\\\b\" }, \"expression\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#expression-operator-expression\" }, { \"include\": \"#type-operator-expression\" }, { \"include\": \"#default-literal-expression\" }, { \"include\": \"#throw-expression\" }, { \"include\": \"#raw-interpolated-string\" }, { \"include\": \"#interpolated-string\" }, { \"include\": \"#verbatim-interpolated-string\" }, { \"include\": \"#type-builtin\" }, { \"include\": \"#language-variable\" }, { \"include\": \"#switch-statement-or-expression\" }, { \"include\": \"#with-expression\" }, { \"include\": \"#conditional-operator\" }, { \"include\": \"#assignment-expression\" }, { \"include\": \"#expression-operators\" }, { \"include\": \"#await-expression\" }, { \"include\": \"#query-expression\" }, { \"include\": \"#as-expression\" }, { \"include\": \"#is-expression\" }, { \"include\": \"#anonymous-method-expression\" }, { \"include\": \"#object-creation-expression\" }, { \"include\": \"#array-creation-expression\" }, { \"include\": \"#anonymous-object-creation-expression\" }, { \"include\": \"#invocation-expression\" }, { \"include\": \"#member-access-expression\" }, { \"include\": \"#element-access-expression\" }, { \"include\": \"#cast-expression\" }, { \"include\": \"#literal\" }, { \"include\": \"#parenthesized-expression\" }, { \"include\": \"#tuple-deconstruction-assignment\" }, { \"include\": \"#initializer-expression\" }, { \"include\": \"#identifier\" }] }, \"expression-body\": { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"end\": \"(?=[,\\\\);}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"expression-operator-expression\": { \"begin\": \"\\\\b(checked|unchecked|nameof)\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.$1.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"expression-operators\": { \"patterns\": [{ \"match\": \"<<|>>>?\", \"name\": \"keyword.operator.bitwise.shift.cs\" }, { \"match\": \"==|!=\", \"name\": \"keyword.operator.comparison.cs\" }, { \"match\": \"<=|>=|<|>\", \"name\": \"keyword.operator.relational.cs\" }, { \"match\": \"\\\\!|&&|\\\\|\\\\|\", \"name\": \"keyword.operator.logical.cs\" }, { \"match\": \"\\\\&|~|\\\\^|\\\\|\", \"name\": \"keyword.operator.bitwise.cs\" }, { \"match\": \"--\", \"name\": \"keyword.operator.decrement.cs\" }, { \"match\": \"\\\\+\\\\+\", \"name\": \"keyword.operator.increment.cs\" }, { \"match\": \"\\\\+|-(?!>)|\\\\*|/|%\", \"name\": \"keyword.operator.arithmetic.cs\" }, { \"match\": \"\\\\?\\\\?\", \"name\": \"keyword.operator.null-coalescing.cs\" }, { \"match\": \"\\\\.\\\\.\", \"name\": \"keyword.operator.range.cs\" }] }, \"extern-alias-directive\": { \"begin\": \"\\\\b(extern)\\\\s+(alias)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.extern.cs\" }, \"2\": { \"name\": \"keyword.other.directive.alias.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.alias.cs\" }] }, \"field-declaration\": { \"begin\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(?!=>|==)(?=,|;|=|$)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"entity.name.variable.field.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.field.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }, { \"include\": \"#class-or-struct-members\" }] }, \"finally-clause\": { \"begin\": \"(?<!\\\\.)\\\\b(finally)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.finally.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#block\" }] }, \"fixed-statement\": { \"begin\": \"\\\\b(fixed)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.context.fixed.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#local-variable-declaration\" }] }] }, \"for-statement\": { \"begin\": \"\\\\b(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.for.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"begin\": \"(?=[^;\\\\)])\", \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#local-variable-declaration\" }] }, { \"begin\": \"(?=;)\", \"end\": \"(?=\\\\))\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#punctuation-semicolon\" }] }] }] }, \"foreach-statement\": { \"begin\": \"\\\\b(foreach)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.foreach.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"captures\": { \"1\": { \"name\": \"storage.modifier.ref.cs\" }, \"2\": { \"name\": \"storage.type.var.cs\" }, \"3\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"8\": { \"name\": \"entity.name.variable.local.cs\" }, \"9\": { \"name\": \"keyword.control.loop.in.cs\" } }, \"match\": \"(?x)\\n(?:\\n(?:(\\\\bref)\\\\s+)?(\\\\bvar\\\\b)|\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s+\\n\\\\b(in)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#tuple-declaration-deconstruction-element-list\" }] }, \"3\": { \"name\": \"keyword.control.loop.in.cs\" } }, \"match\": \"(?x)\\n(?:\\\\b(var)\\\\b\\\\s*)?\\n(?<tuple>\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\\\s+\\n\\\\b(in)\\\\b\" }, { \"include\": \"#expression\" }] }] }, \"generic-constraints\": { \"begin\": \"(where)\\\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(:)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.where.cs\" }, \"2\": { \"name\": \"entity.name.type.type-parameter.cs\" }, \"3\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{|where|;|=>)\", \"patterns\": [{ \"match\": \"\\\\bclass\\\\b\", \"name\": \"storage.type.class.cs\" }, { \"match\": \"\\\\bstruct\\\\b\", \"name\": \"storage.type.struct.cs\" }, { \"match\": \"\\\\bdefault\\\\b\", \"name\": \"keyword.other.constraint.default.cs\" }, { \"match\": \"\\\\bnotnull\\\\b\", \"name\": \"keyword.other.constraint.notnull.cs\" }, { \"match\": \"\\\\bunmanaged\\\\b\", \"name\": \"keyword.other.constraint.unmanaged.cs\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"3\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"match\": \"(new)\\\\s*(\\\\()\\\\s*(\\\\))\" }, { \"include\": \"#type\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#generic-constraints\" }] }, \"goto-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(goto)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.goto.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"begin\": \"\\\\b(case)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.case.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#expression\" }] }, { \"captures\": { \"1\": { \"name\": \"keyword.control.conditional.default.cs\" } }, \"match\": \"\\\\b(default)\\\\b\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.label.cs\" }] }, \"group-by\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.by.cs\" } }, \"match\": \"\\\\b(by)\\\\b\\\\s*\" }, \"group-clause\": { \"begin\": \"\\\\b(group)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.group.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#group-by\" }, { \"include\": \"#group-into\" }, { \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"group-into\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.into.cs\" }, \"2\": { \"name\": \"entity.name.variable.range-variable.cs\" } }, \"match\": \"(?x)\\n\\\\b(into)\\\\b\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\" }, \"identifier\": { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.readwrite.cs\" }, \"if-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(if)\\\\b\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.if.cs\" } }, \"end\": \"(?<=})|(?=;)\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, { \"include\": \"#statement\" }] }, \"implicit-anonymous-function-parameter\": { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\\\\b\", \"name\": \"entity.name.variable.parameter.cs\" }, \"indexer-declaration\": { \"begin\": \"(?x)\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(?<indexer_name>this)\\\\s*\\n(?=\\\\[)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"8\": { \"name\": \"variable.language.this.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#bracketed-parameter-list\" }, { \"include\": \"#property-accessors\" }, { \"include\": \"#accessor-getter-expression\" }, { \"include\": \"#variable-initializer\" }] }, \"initializer-expression\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"interface-declaration\": { \"begin\": \"(?=\\\\binterface\\\\b)\", \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"begin\": \"(?x)\\n(interface)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.interface.cs\" }, \"2\": { \"name\": \"entity.name.type.interface.cs\" } }, \"end\": \"(?=\\\\{)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#interface-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"interface-members\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#storage-modifier\" }, { \"include\": \"#property-declaration\" }, { \"include\": \"#event-declaration\" }, { \"include\": \"#indexer-declaration\" }, { \"include\": \"#method-declaration\" }, { \"include\": \"#operator-declaration\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"interpolated-string\": { \"begin\": '\\\\$\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '(\")|((?:[^\\\\\\\\\\\\n])$)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.cs\" }, \"2\": { \"name\": \"invalid.illegal.newline.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#string-character-escape\" }, { \"include\": \"#interpolation\" }] }, \"interpolation\": { \"begin\": \"(?<=[^\\\\{]|^)((?:\\\\{\\\\{)*)(\\\\{)(?=[^\\\\{])\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.double.cs\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.begin.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.interpolation.end.cs\" } }, \"name\": \"meta.interpolation.cs\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"intrusive\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"invocation-expression\": { \"begin\": \"(?x)\\n(?:\\n(?:(\\\\?)\\\\s*)?\\n(\\\\.)\\\\s*|\\n(->)\\\\s*\\n)?\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\n(\\n<\\n(?<type_args>\\n[^<>()]++|\\n<\\\\g<type_args>*+>|\\n\\\\(\\\\g<type_args>*+\\\\)\\n)*+\\n>\\\\s*\\n)?\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.null-conditional.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" }, \"3\": { \"name\": \"punctuation.accessor.pointer.cs\" }, \"4\": { \"name\": \"entity.name.function.cs\" }, \"5\": { \"patterns\": [{ \"include\": \"#type-arguments\" }] } }, \"end\": \"(?<=\\\\))\", \"patterns\": [{ \"include\": \"#argument-list\" }] }, \"is-expression\": { \"begin\": \"(?<!\\\\.)\\\\b(is)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.pattern.is.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=)\", \"patterns\": [{ \"include\": \"#pattern\" }] }, \"join-clause\": { \"begin\": \"(?x)\\n\\\\b(join)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)?\\n\\\\s+(\\\\g<identifier>)\\\\b\\\\s*\\n\\\\b(in)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.join.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.range-variable.cs\" }, \"8\": { \"name\": \"keyword.operator.expression.query.in.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#join-on\" }, { \"include\": \"#join-equals\" }, { \"include\": \"#join-into\" }, { \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"join-equals\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.equals.cs\" } }, \"match\": \"\\\\b(equals)\\\\b\\\\s*\" }, \"join-into\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.into.cs\" }, \"2\": { \"name\": \"entity.name.variable.range-variable.cs\" } }, \"match\": \"(?x)\\n\\\\b(into)\\\\b\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\" }, \"join-on\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.on.cs\" } }, \"match\": \"\\\\b(on)\\\\b\\\\s*\" }, \"labeled-statement\": { \"captures\": { \"1\": { \"name\": \"entity.name.label.cs\" }, \"2\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(:)\" }, \"language-variable\": { \"patterns\": [{ \"match\": \"\\\\b(base|this)\\\\b\", \"name\": \"variable.language.$1.cs\" }, { \"match\": \"\\\\b(value)\\\\b\", \"name\": \"variable.other.$1.cs\" }] }, \"let-clause\": { \"begin\": \"(?x)\\n\\\\b(let)\\\\b\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\\n(=)\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.let.cs\" }, \"2\": { \"name\": \"entity.name.variable.range-variable.cs\" }, \"3\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"list-pattern\": { \"begin\": \"(?=\\\\[)\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#pattern\" }, { \"include\": \"#punctuation-comma\" }] }, { \"begin\": \"(?<=\\\\])\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"literal\": { \"patterns\": [{ \"include\": \"#boolean-literal\" }, { \"include\": \"#null-literal\" }, { \"include\": \"#numeric-literal\" }, { \"include\": \"#char-literal\" }, { \"include\": \"#raw-string-literal\" }, { \"include\": \"#string-literal\" }, { \"include\": \"#verbatim-string-literal\" }, { \"include\": \"#tuple-literal\" }] }, \"local-constant-declaration\": { \"begin\": \"(?x)\\n(?<const_keyword>\\\\b(?:const)\\\\b)\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(?=,|;|=)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.const.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.local.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.local.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }, \"local-declaration\": { \"patterns\": [{ \"include\": \"#local-constant-declaration\" }, { \"include\": \"#local-variable-declaration\" }, { \"include\": \"#local-function-declaration\" }, { \"include\": \"#local-tuple-var-deconstruction\" }] }, \"local-function-declaration\": { \"begin\": \"(?x)\\n\\\\b((?:(?:async|unsafe|static|extern)\\\\s+)*)\\n(?<type_name>\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?)?\\n(?:\\\\s*\\n\\\\[\\n\\\\s*(?:,\\\\s*)*\\n\\\\]\\n(?:\\\\s*\\\\?)?\\n)*\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(<[^<>]+>)?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#storage-modifier\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.function.cs\" }, \"8\": { \"patterns\": [{ \"include\": \"#type-parameter-list\" }] } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#generic-constraints\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"local-tuple-var-deconstruction\": { \"begin\": \"(?x)\\n(?:\\\\b(var)\\\\b\\\\s*)\\n(?<tuple>\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\\\s*\\n(?=;|=|\\\\))\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#tuple-declaration-deconstruction-element-list\" }] } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }, \"local-variable-declaration\": { \"begin\": \"(?x)\\n(?:\\n(?:(\\\\bref)\\\\s+(?:(\\\\breadonly)\\\\s+)?)?(\\\\bvar\\\\b)|\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*[?*]\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(?!=>)\\n(?=,|;|=|\\\\))\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.ref.cs\" }, \"2\": { \"name\": \"storage.modifier.readonly.cs\" }, \"3\": { \"name\": \"storage.type.var.cs\" }, \"4\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"9\": { \"name\": \"entity.name.variable.local.cs\" } }, \"end\": \"(?=[;)}])\", \"patterns\": [{ \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.local.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }, \"lock-statement\": { \"begin\": \"\\\\b(lock)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.context.lock.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#expression\" }] }] }, \"member-access-expression\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.operator.null-conditional.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" }, \"3\": { \"name\": \"punctuation.accessor.pointer.cs\" }, \"4\": { \"name\": \"variable.other.object.property.cs\" } }, \"match\": \"(?x)\\n(?:\\n(?:(\\\\?)\\\\s*)?\\n(\\\\.)\\\\s*|\\n(->)\\\\s*\\n)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\n(?![_[:alnum:]]|\\\\(|(\\\\?)?\\\\[|<)\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.accessor.cs\" }, \"2\": { \"name\": \"variable.other.object.cs\" }, \"3\": { \"patterns\": [{ \"include\": \"#type-arguments\" }] } }, \"match\": \"(?x)\\n(\\\\.)?\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\n(?<type_params>\\\\s*<([^<>]|\\\\g<type_params>)+>\\\\s*)\\n(?=\\n(\\\\s*\\\\?)?\\n\\\\s*\\\\.\\\\s*@?[_[:alpha:]][_[:alnum:]]*\\n)\" }, { \"captures\": { \"1\": { \"name\": \"variable.other.object.cs\" } }, \"match\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\n(?=\\n\\\\s*(?:(?:\\\\?\\\\s*)?\\\\.|->)\\n\\\\s*@?[_[:alpha:]][_[:alnum:]]*\\n)\" }] }, \"method-declaration\": { \"begin\": \"(?x)\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(\\\\g<identifier>)\\\\s*\\n(<([^<>]+)>)?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"8\": { \"name\": \"entity.name.function.cs\" }, \"9\": { \"patterns\": [{ \"include\": \"#type-parameter-list\" }] } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#generic-constraints\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"named-argument\": { \"begin\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(:)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.variable.parameter.cs\" }, \"2\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=(,|\\\\)|\\\\]))\", \"patterns\": [{ \"include\": \"#argument\" }] }, \"namespace-declaration\": { \"begin\": \"\\\\b(namespace)\\\\s+\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.namespace.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.namespace.cs\" }, { \"include\": \"#punctuation-accessor\" }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#declarations\" }, { \"include\": \"#using-directive\" }, { \"include\": \"#punctuation-semicolon\" }] }] }, \"null-literal\": { \"match\": \"(?<!\\\\.)\\\\bnull\\\\b\", \"name\": \"constant.language.null.cs\" }, \"numeric-literal\": { \"captures\": { \"0\": { \"patterns\": [{ \"begin\": \"(?=.)\", \"end\": \"$\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"4\": { \"name\": \"constant.numeric.other.separator.decimals.cs\" }, \"5\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"6\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"8\": { \"name\": \"constant.numeric.other.exponent.cs\" }, \"9\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"10\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"11\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"12\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\\\w))?$\" }, { \"captures\": { \"1\": { \"name\": \"constant.numeric.other.preffix.binary.cs\" }, \"2\": { \"name\": \"constant.numeric.binary.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"4\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\\\w))?$\" }, { \"captures\": { \"1\": { \"name\": \"constant.numeric.other.preffix.hex.cs\" }, \"2\": { \"name\": \"constant.numeric.hex.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"4\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\\\w))?$\" }, { \"captures\": { \"2\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"5\": { \"name\": \"constant.numeric.other.exponent.cs\" }, \"6\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"7\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"8\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"9\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\\\w))?$\" }, { \"match\": \"(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\\\.\\\\d)+\", \"name\": \"invalid.illegal.constant.numeric.cs\" }] }] } }, \"match\": \"(?<!\\\\w)\\\\.?\\\\d(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\\\.\\\\d)*\" }, \"object-creation-expression\": { \"patterns\": [{ \"include\": \"#object-creation-expression-with-parameters\" }, { \"include\": \"#object-creation-expression-with-no-parameters\" }] }, \"object-creation-expression-with-no-parameters\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"match\": \"(?x)\\n(new)\\\\s+\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(?=\\\\{|//|/\\\\*|$)\" }, \"object-creation-expression-with-parameters\": { \"begin\": \"(?x)\\n(new)(?:\\\\s+\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n))?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"end\": \"(?<=\\\\))\", \"patterns\": [{ \"include\": \"#argument-list\" }] }, \"operator-assignment\": { \"match\": \"(?<!=|!)(=)(?!=)\", \"name\": \"keyword.operator.assignment.cs\" }, \"operator-declaration\": { \"begin\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n\\\\b(?<operator_keyword>operator)\\\\b\\\\s*\\n(?<operator>[+\\\\-*/%&|\\\\^!=~<>]+|true|false)\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"storage.type.operator.cs\" }, \"7\": { \"name\": \"entity.name.function.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"orderby-clause\": { \"begin\": \"\\\\b(orderby)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.orderby.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#ordering-direction\" }, { \"include\": \"#query-body\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"ordering-direction\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.$1.cs\" } }, \"match\": \"\\\\b(ascending|descending)\\\\b\" }, \"parameter\": { \"captures\": { \"1\": { \"name\": \"storage.modifier.$1.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.parameter.cs\" } }, \"match\": \"(?x)\\n(?:(?:\\\\b(ref|params|out|in|this)\\\\b)\\\\s+)?\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^()]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\" }, \"parenthesized-expression\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"parenthesized-parameter-list\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#parameter\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#variable-initializer\" }] }, \"pattern\": { \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#combinator-pattern\" }, { \"include\": \"#discard-pattern\" }, { \"include\": \"#constant-pattern\" }, { \"include\": \"#relational-pattern\" }, { \"include\": \"#var-pattern\" }, { \"include\": \"#type-pattern\" }, { \"include\": \"#positional-pattern\" }, { \"include\": \"#property-pattern\" }, { \"include\": \"#list-pattern\" }, { \"include\": \"#slice-pattern\" }] }, \"positional-pattern\": { \"begin\": \"(?=\\\\()\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#subpattern\" }, { \"include\": \"#punctuation-comma\" }] }, { \"begin\": \"(?<=\\\\))\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#property-pattern\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"preprocessor\": { \"begin\": \"^\\\\s*(\\\\#)\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.hash.cs\" } }, \"end\": \"(?<=$)\", \"name\": \"meta.preprocessor.cs\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#preprocessor-define-or-undef\" }, { \"include\": \"#preprocessor-if-or-elif\" }, { \"include\": \"#preprocessor-else-or-endif\" }, { \"include\": \"#preprocessor-warning-or-error\" }, { \"include\": \"#preprocessor-region\" }, { \"include\": \"#preprocessor-endregion\" }, { \"include\": \"#preprocessor-load\" }, { \"include\": \"#preprocessor-r\" }, { \"include\": \"#preprocessor-line\" }, { \"include\": \"#preprocessor-pragma-warning\" }, { \"include\": \"#preprocessor-pragma-checksum\" }] }, \"preprocessor-define-or-undef\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.define.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.undef.cs\" }, \"3\": { \"name\": \"entity.name.variable.preprocessor.symbol.cs\" } }, \"match\": \"\\\\b(?:(define)|(undef))\\\\b\\\\s*\\\\b([_[:alpha:]][_[:alnum:]]*)\\\\b\" }, \"preprocessor-else-or-endif\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.else.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.endif.cs\" } }, \"match\": \"\\\\b(?:(else)|(endif))\\\\b\" }, \"preprocessor-endregion\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.endregion.cs\" } }, \"match\": \"\\\\b(endregion)\\\\b\" }, \"preprocessor-expression\": { \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#preprocessor-expression\" }] }, { \"captures\": { \"1\": { \"name\": \"constant.language.boolean.true.cs\" }, \"2\": { \"name\": \"constant.language.boolean.false.cs\" }, \"3\": { \"name\": \"entity.name.variable.preprocessor.symbol.cs\" } }, \"match\": \"\\\\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.comparison.cs\" }, \"2\": { \"name\": \"keyword.operator.logical.cs\" } }, \"match\": \"(==|!=)|(\\\\!|&&|\\\\|\\\\|)\" }] }, \"preprocessor-if-or-elif\": { \"begin\": \"\\\\b(?:(if)|(elif))\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.if.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.elif.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#preprocessor-expression\" }] }, \"preprocessor-line\": { \"begin\": \"\\\\b(line)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.line.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.default.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.hidden.cs\" } }, \"match\": \"\\\\b(?:(default|hidden))\" }, { \"captures\": { \"0\": { \"name\": \"constant.numeric.decimal.cs\" } }, \"match\": \"[0-9]+\" }, { \"captures\": { \"0\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\\"[^\"]*\\\\\"' }] }, \"preprocessor-load\": { \"begin\": \"\\\\b(load)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.load.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"captures\": { \"0\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\\"[^\"]*\\\\\"' }] }, \"preprocessor-pragma-checksum\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.pragma.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.checksum.cs\" }, \"3\": { \"name\": \"string.quoted.double.cs\" }, \"4\": { \"name\": \"string.quoted.double.cs\" }, \"5\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\b(pragma)\\\\b\\\\s*\\\\b(checksum)\\\\b\\\\s*(\\\\\"[^\"]*\\\\\")\\\\s*(\\\\\"[^\"]*\\\\\")\\\\s*(\\\\\"[^\"]*\\\\\")' }, \"preprocessor-pragma-warning\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.pragma.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.warning.cs\" }, \"3\": { \"name\": \"keyword.preprocessor.disable.cs\" }, \"4\": { \"name\": \"keyword.preprocessor.restore.cs\" }, \"5\": { \"patterns\": [{ \"captures\": { \"0\": { \"name\": \"constant.numeric.decimal.cs\" } }, \"match\": \"[0-9]+\" }, { \"include\": \"#punctuation-comma\" }] } }, \"match\": \"\\\\b(pragma)\\\\b\\\\s*\\\\b(warning)\\\\b\\\\s*\\\\b(?:(disable)|(restore))\\\\b(\\\\s*[0-9]+(?:\\\\s*,\\\\s*[0-9]+)?)?\" }, \"preprocessor-r\": { \"begin\": \"\\\\b(r)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.r.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"captures\": { \"0\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\\"[^\"]*\\\\\"' }] }, \"preprocessor-region\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.region.cs\" }, \"2\": { \"name\": \"string.unquoted.preprocessor.message.cs\" } }, \"match\": \"\\\\b(region)\\\\b\\\\s*(.*)(?=$)\" }, \"preprocessor-warning-or-error\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.warning.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.error.cs\" }, \"3\": { \"name\": \"string.unquoted.preprocessor.message.cs\" } }, \"match\": \"\\\\b(?:(warning)|(error))\\\\b\\\\s*(.*)(?=$)\" }, \"property-accessors\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"match\": \"\\\\b(private|protected|internal)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, { \"begin\": \"\\\\b(get)\\\\b\\\\s*(?=\\\\{|;|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.accessor.$1.cs\" } }, \"end\": \"(?<=\\\\}|;)|(?=\\\\})\", \"patterns\": [{ \"include\": \"#accessor-getter\" }] }, { \"begin\": \"\\\\b(set|init)\\\\b\\\\s*(?=\\\\{|;|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.accessor.$1.cs\" } }, \"end\": \"(?<=\\\\}|;)|(?=\\\\})\", \"patterns\": [{ \"include\": \"#accessor-setter\" }] }] }, \"property-declaration\": { \"begin\": \"(?x)\\n\\n# The negative lookahead below ensures that we don't match nested types\\n# or other declarations as properties.\\n(?![[:word:][:space:]]*\\\\b(?:class|interface|struct|enum|event)\\\\b)\\n\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(?<property_name>\\\\g<identifier>)\\\\s*\\n(?=\\\\{|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"8\": { \"name\": \"entity.name.variable.property.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#property-accessors\" }, { \"include\": \"#accessor-getter-expression\" }, { \"include\": \"#variable-initializer\" }, { \"include\": \"#class-or-struct-members\" }] }, \"property-pattern\": { \"begin\": \"(?={)\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#subpattern\" }, { \"include\": \"#punctuation-comma\" }] }, { \"begin\": \"(?<=\\\\})\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"punctuation-accessor\": { \"match\": \"\\\\.\", \"name\": \"punctuation.accessor.cs\" }, \"punctuation-comma\": { \"match\": \",\", \"name\": \"punctuation.separator.comma.cs\" }, \"punctuation-semicolon\": { \"match\": \";\", \"name\": \"punctuation.terminator.statement.cs\" }, \"query-body\": { \"patterns\": [{ \"include\": \"#let-clause\" }, { \"include\": \"#where-clause\" }, { \"include\": \"#join-clause\" }, { \"include\": \"#orderby-clause\" }, { \"include\": \"#select-clause\" }, { \"include\": \"#group-clause\" }] }, \"query-expression\": { \"begin\": \"(?x)\\n\\\\b(from)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)?\\n\\\\s+(\\\\g<identifier>)\\\\b\\\\s*\\n\\\\b(in)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.from.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.range-variable.cs\" }, \"8\": { \"name\": \"keyword.operator.expression.query.in.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"raw-interpolated-string\": { \"patterns\": [{ \"include\": \"#raw-interpolated-string-five-or-more-quote-one-or-more-interpolation\" }, { \"include\": \"#raw-interpolated-string-three-or-more-quote-three-or-more-interpolation\" }, { \"include\": \"#raw-interpolated-string-quadruple-quote-double-interpolation\" }, { \"include\": \"#raw-interpolated-string-quadruple-quote-single-interpolation\" }, { \"include\": \"#raw-interpolated-string-triple-quote-double-interpolation\" }, { \"include\": \"#raw-interpolated-string-triple-quote-single-interpolation\" }] }, \"raw-interpolated-string-five-or-more-quote-one-or-more-interpolation\": { \"begin\": '\\\\$+\"\"\"\"\"+', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"\"+', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-interpolated-string-quadruple-quote-double-interpolation\": { \"begin\": '\\\\$\\\\$\"\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#double-raw-interpolation\" }] }, \"raw-interpolated-string-quadruple-quote-single-interpolation\": { \"begin\": '\\\\$\"\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#raw-interpolation\" }] }, \"raw-interpolated-string-three-or-more-quote-three-or-more-interpolation\": { \"begin\": '\\\\$\\\\$\\\\$+\"\"\"+', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"+', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-interpolated-string-triple-quote-double-interpolation\": { \"begin\": '\\\\$\\\\$\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#double-raw-interpolation\" }] }, \"raw-interpolated-string-triple-quote-single-interpolation\": { \"begin\": '\\\\$\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#raw-interpolation\" }] }, \"raw-interpolation\": { \"begin\": \"(?<=[^\\\\{]|^)((?:\\\\{)*)(\\\\{)(?=[^\\\\{])\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.double.cs\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.begin.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.interpolation.end.cs\" } }, \"name\": \"meta.interpolation.cs\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"raw-string-literal\": { \"patterns\": [{ \"include\": \"#raw-string-literal-more\" }, { \"include\": \"#raw-string-literal-quadruple\" }, { \"include\": \"#raw-string-literal-triple\" }] }, \"raw-string-literal-more\": { \"begin\": '\"\"\"\"\"+', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"\"+', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-string-literal-quadruple\": { \"begin\": '\"\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-string-literal-triple\": { \"begin\": '\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"readonly-modifier\": { \"match\": \"\\\\breadonly\\\\b\", \"name\": \"storage.modifier.readonly.cs\" }, \"record-declaration\": { \"begin\": \"(?=\\\\brecord\\\\b)\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"(?x)\\n(record)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.record.cs\" }, \"2\": { \"name\": \"entity.name.type.class.cs\" } }, \"end\": \"(?=\\\\{)|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#class-or-struct-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"ref-modifier\": { \"match\": \"\\\\bref\\\\b\", \"name\": \"storage.modifier.ref.cs\" }, \"relational-pattern\": { \"begin\": \"<=?|>=?\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.relational.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"return-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(return)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.return.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"script-top-level\": { \"patterns\": [{ \"include\": \"#statement\" }, { \"include\": \"#method-declaration\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"select-clause\": { \"begin\": \"\\\\b(select)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.select.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"simple-designation-pattern\": { \"patterns\": [{ \"include\": \"#discard-pattern\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.local.cs\" }] }, \"slice-pattern\": { \"match\": \"\\\\.\\\\.\", \"name\": \"keyword.operator.range.cs\" }, \"statement\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#while-statement\" }, { \"include\": \"#do-statement\" }, { \"include\": \"#for-statement\" }, { \"include\": \"#foreach-statement\" }, { \"include\": \"#if-statement\" }, { \"include\": \"#else-part\" }, { \"include\": \"#goto-statement\" }, { \"include\": \"#return-statement\" }, { \"include\": \"#break-or-continue-statement\" }, { \"include\": \"#throw-statement\" }, { \"include\": \"#yield-statement\" }, { \"include\": \"#await-statement\" }, { \"include\": \"#try-statement\" }, { \"include\": \"#expression-operator-expression\" }, { \"include\": \"#context-control-statement\" }, { \"include\": \"#context-control-paren-statement\" }, { \"include\": \"#labeled-statement\" }, { \"include\": \"#object-creation-expression\" }, { \"include\": \"#array-creation-expression\" }, { \"include\": \"#anonymous-object-creation-expression\" }, { \"include\": \"#local-declaration\" }, { \"include\": \"#block\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"storage-modifier\": { \"match\": \"(?<!\\\\.)\\\\b(new|public|protected|internal|private|abstract|virtual|override|sealed|static|partial|readonly|volatile|const|extern|async|unsafe|ref|required|file)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, \"string-character-escape\": { \"match\": \"\\\\\\\\(x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|.)\", \"name\": \"constant.character.escape.cs\" }, \"string-literal\": { \"begin\": '(?<!@)\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '(\")|((?:[^\\\\\\\\\\\\n])$)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.cs\" }, \"2\": { \"name\": \"invalid.illegal.newline.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#string-character-escape\" }] }, \"struct-declaration\": { \"begin\": \"(?=(\\\\brecord\\\\b\\\\s+)?\\\\bstruct\\\\b)\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"(?x)\\n(\\\\b(record)\\\\b\\\\s+)?\\n(struct)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.record.cs\" }, \"3\": { \"name\": \"storage.type.struct.cs\" }, \"4\": { \"name\": \"entity.name.type.struct.cs\" } }, \"end\": \"(?=\\\\{)|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#class-or-struct-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"subpattern\": { \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.object.property.cs\" }, { \"include\": \"#punctuation-accessor\" }] }, \"2\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*(?:\\\\s*\\\\.\\\\s*@?[_[:alpha:]][_[:alnum:]]*)*)\\\\s*(:)\" }, { \"include\": \"#pattern\" }] }, \"switch-expression\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#punctuation-comma\" }, { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"end\": \"(?=,|})\", \"patterns\": [{ \"include\": \"#expression\" }] }, { \"begin\": \"\\\\b(when)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.when.cs\" } }, \"end\": \"(?==>|,|})\", \"patterns\": [{ \"include\": \"#case-guard\" }] }, { \"begin\": \"(?!\\\\s)\", \"end\": \"(?=\\\\bwhen\\\\b|=>|,|})\", \"patterns\": [{ \"include\": \"#pattern\" }] }] }, \"switch-label\": { \"begin\": \"\\\\b(case|default)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.$1.cs\" } }, \"end\": \"(:)|(?=})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"patterns\": [{ \"begin\": \"\\\\b(when)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.when.cs\" } }, \"end\": \"(?=:|})\", \"patterns\": [{ \"include\": \"#case-guard\" }] }, { \"begin\": \"(?!\\\\s)\", \"end\": \"(?=\\\\bwhen\\\\b|:|})\", \"patterns\": [{ \"include\": \"#pattern\" }] }] }, \"switch-statement\": { \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#switch-label\" }, { \"include\": \"#statement\" }] }] }, \"switch-statement-or-expression\": { \"begin\": \"(?<!\\\\.)\\\\b(switch)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.switch.cs\" } }, \"end\": \"(?<=})|(?=})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"(?=\\\\()\", \"end\": \"(?<=\\\\})|(?=\\\\})\", \"patterns\": [{ \"include\": \"#switch-statement\" }] }, { \"begin\": \"(?=\\\\{)\", \"end\": \"(?<=\\\\})|(?=\\\\})\", \"patterns\": [{ \"include\": \"#switch-expression\" }] }] }, \"throw-expression\": { \"captures\": { \"1\": { \"name\": \"keyword.control.flow.throw.cs\" } }, \"match\": \"\\\\b(throw)\\\\b\" }, \"throw-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(throw)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.throw.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"try-block\": { \"begin\": \"(?<!\\\\.)\\\\b(try)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.try.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#block\" }] }, \"try-statement\": { \"patterns\": [{ \"include\": \"#try-block\" }, { \"include\": \"#catch-clause\" }, { \"include\": \"#finally-clause\" }] }, \"tuple-declaration-deconstruction-element-list\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#tuple-declaration-deconstruction-element-list\" }, { \"include\": \"#declaration-expression-tuple\" }, { \"include\": \"#punctuation-comma\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"match\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\\n(?=[,)])\" }] }, \"tuple-deconstruction-assignment\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#tuple-deconstruction-element-list\" }] } }, \"match\": \"(?x)\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\\\s*\\n(?!=>|==)(?==)\" }, \"tuple-deconstruction-element-list\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#tuple-deconstruction-element-list\" }, { \"include\": \"#declaration-expression-tuple\" }, { \"include\": \"#punctuation-comma\" }, { \"captures\": { \"1\": { \"name\": \"variable.other.readwrite.cs\" } }, \"match\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\\n(?=[,)])\" }] }, \"tuple-element\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"match\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n(?:(?<tuple_name>\\\\g<identifier>)\\\\b)?\" }, \"tuple-literal\": { \"begin\": \"(\\\\()(?=.*[:,])\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#tuple-literal-element\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"tuple-literal-element\": { \"begin\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\n(?=:)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"end\": \"(:)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.separator.colon.cs\" } } }, \"tuple-type\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#tuple-element\" }, { \"include\": \"#punctuation-comma\" }] }, \"type\": { \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#ref-modifier\" }, { \"include\": \"#readonly-modifier\" }, { \"include\": \"#tuple-type\" }, { \"include\": \"#type-builtin\" }, { \"include\": \"#type-name\" }, { \"include\": \"#type-arguments\" }, { \"include\": \"#type-array-suffix\" }, { \"include\": \"#type-nullable-suffix\" }, { \"include\": \"#type-pointer-suffix\" }] }, \"type-arguments\": { \"begin\": \"<\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.begin.cs\" } }, \"end\": \">\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.end.cs\" } }, \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-comma\" }] }, \"type-array-suffix\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#punctuation-comma\" }] }, \"type-builtin\": { \"captures\": { \"1\": { \"name\": \"keyword.type.$1.cs\" } }, \"match\": \"\\\\b(bool|s?byte|u?short|n?u?int|u?long|float|double|decimal|char|string|object|void|dynamic)\\\\b\" }, \"type-declarations\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#storage-modifier\" }, { \"include\": \"#class-declaration\" }, { \"include\": \"#delegate-declaration\" }, { \"include\": \"#enum-declaration\" }, { \"include\": \"#interface-declaration\" }, { \"include\": \"#struct-declaration\" }, { \"include\": \"#record-declaration\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"type-name\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.type.alias.cs\" }, \"2\": { \"name\": \"punctuation.separator.coloncolon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\:\\\\:)\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\.)\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.accessor.cs\" }, \"2\": { \"name\": \"entity.name.type.cs\" } }, \"match\": \"(\\\\.)\\\\s*(@?[_[:alpha:]][_[:alnum:]]*)\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }] }, \"type-nullable-suffix\": { \"match\": \"\\\\?\", \"name\": \"punctuation.separator.question-mark.cs\" }, \"type-operator-expression\": { \"begin\": \"\\\\b(default|sizeof|typeof)\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.$1.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#type\" }] }, \"type-parameter-list\": { \"begin\": \"\\\\<\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.begin.cs\" } }, \"end\": \"\\\\>\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.end.cs\" } }, \"patterns\": [{ \"match\": \"\\\\b(in|out)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, { \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\", \"name\": \"entity.name.type.type-parameter.cs\" }, { \"include\": \"#comment\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#attribute-section\" }] }, \"type-pattern\": { \"begin\": \"(?=@?[_[:alpha:]][_[:alnum:]]*)\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\G\", \"end\": \"(?!\\\\G[@_[:alpha:]])(?=[\\\\({@_[:alpha:])}\\\\],;:=&|^]|(?:\\\\s|^)\\\\?|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#type-subpattern\" }] }, { \"begin\": \"(?=[\\\\({@_[:alpha:]])\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#positional-pattern\" }, { \"include\": \"#property-pattern\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"type-pointer-suffix\": { \"match\": \"\\\\*\", \"name\": \"punctuation.separator.asterisk.cs\" }, \"type-subpattern\": { \"patterns\": [{ \"include\": \"#type-builtin\" }, { \"begin\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(::)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.type.alias.cs\" }, \"2\": { \"name\": \"punctuation.separator.coloncolon.cs\" } }, \"end\": \"(?<=[_[:alnum:]])|(?=[.<\\\\[\\\\({)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }] }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }, { \"begin\": \"\\\\.\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.accessor.cs\" } }, \"end\": \"(?<=[_[:alnum:]])|(?=[<\\\\[\\\\({)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }] }, { \"include\": \"#type-arguments\" }, { \"include\": \"#type-array-suffix\" }, { \"match\": \"(?<!\\\\s)\\\\?\", \"name\": \"punctuation.separator.question-mark.cs\" }] }, \"using-directive\": { \"patterns\": [{ \"begin\": \"\\\\b(?:(global)\\\\s+)?(using)\\\\s+(static)\\\\b\\\\s*(?:(unsafe)\\\\b\\\\s*)?\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.global.cs\" }, \"2\": { \"name\": \"keyword.other.directive.using.cs\" }, \"3\": { \"name\": \"keyword.other.directive.static.cs\" }, \"4\": { \"name\": \"storage.modifier.unsafe.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#type\" }] }, { \"begin\": \"\\\\b(?:(global)\\\\s+)?(using)\\\\b\\\\s*(?:(unsafe)\\\\b\\\\s*)?(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(=)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.global.cs\" }, \"2\": { \"name\": \"keyword.other.directive.using.cs\" }, \"3\": { \"name\": \"storage.modifier.unsafe.cs\" }, \"4\": { \"name\": \"entity.name.type.alias.cs\" }, \"5\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type\" }] }, { \"begin\": \"\\\\b(?:(global)\\\\s+)?(using)\\\\b\\\\s*+(?!\\\\(|var\\\\b)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.global.cs\" }, \"2\": { \"name\": \"keyword.other.directive.using.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.namespace.cs\" }, { \"include\": \"#punctuation-accessor\" }, { \"include\": \"#operator-assignment\" }] }] }, \"using-statement\": { \"begin\": \"\\\\b(using)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.context.using.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#await-expression\" }, { \"include\": \"#local-variable-declaration\" }, { \"include\": \"#expression\" }] }, { \"include\": \"#local-variable-declaration\" }] }, \"var-pattern\": { \"begin\": \"\\\\b(var)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.var.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#designation-pattern\" }] }, \"variable-initializer\": { \"begin\": \"(?<!=|!)(=)(?!=|>)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=[,\\\\)\\\\];}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"verbatim-interpolated-string\": { \"begin\": '(?:\\\\$@|@\\\\$)\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"(?=[^\"])', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#verbatim-string-character-escape\" }, { \"include\": \"#interpolation\" }] }, \"verbatim-string-character-escape\": { \"match\": '\"\"', \"name\": \"constant.character.escape.cs\" }, \"verbatim-string-literal\": { \"begin\": '@\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"(?=[^\"])', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#verbatim-string-character-escape\" }] }, \"when-clause\": { \"begin\": \"(?<!\\\\.)\\\\b(when)\\\\b\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.when.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }, { \"include\": \"#comment\" }] }, \"where-clause\": { \"begin\": \"(?x)\\n\\\\b(where)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.where.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"while-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(while)\\\\b\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.while.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, { \"include\": \"#statement\" }] }, \"with-expression\": { \"begin\": \"(?<!\\\\.)\\\\b(with)\\\\b\\\\s*(?=\\\\{|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.with.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#initializer-expression\" }] }, \"xml-attribute\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.other.attribute-name.cs\" }, \"2\": { \"name\": \"entity.other.attribute-name.namespace.cs\" }, \"3\": { \"name\": \"punctuation.separator.colon.cs\" }, \"4\": { \"name\": \"entity.other.attribute-name.localname.cs\" }, \"5\": { \"name\": \"punctuation.separator.equals.cs\" } }, \"match\": \"(?x)\\n(?:^|\\\\s+)\\n(\\n(?:\\n([-_[:alnum:]]+)\\n(:)\\n)?\\n([-_[:alnum:]]+)\\n)\\n(=)\" }, { \"include\": \"#xml-string\" }] }, \"xml-cdata\": { \"begin\": \"<!\\\\[CDATA\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": \"\\\\]\\\\]>\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.unquoted.cdata.cs\" }, \"xml-character-entity\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.definition.constant.cs\" }, \"3\": { \"name\": \"punctuation.definition.constant.cs\" } }, \"match\": \"(?x)\\n(&)\\n(\\n(?:[[:alpha:]:_][[:alnum:]:_.-]*)|\\n(?:\\\\#[[:digit:]]+)|\\n(?:\\\\#x[[:xdigit:]]+)\\n)\\n(;)\", \"name\": \"constant.character.entity.cs\" }, { \"match\": \"&\", \"name\": \"invalid.illegal.bad-ampersand.cs\" }] }, \"xml-comment\": { \"begin\": \"<!--\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"end\": \"-->\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"name\": \"comment.block.cs\" }, \"xml-doc-comment\": { \"patterns\": [{ \"include\": \"#xml-comment\" }, { \"include\": \"#xml-character-entity\" }, { \"include\": \"#xml-cdata\" }, { \"include\": \"#xml-tag\" }] }, \"xml-string\": { \"patterns\": [{ \"begin\": \"\\\\'\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": \"\\\\'\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.single.cs\", \"patterns\": [{ \"include\": \"#xml-character-entity\" }] }, { \"begin\": '\\\\\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\\\\\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#xml-character-entity\" }] }] }, \"xml-tag\": { \"begin\": \"(?x)\\n(</?)\\n(\\n(?:\\n([-_[:alnum:]]+)\\n(:)\\n)?\\n([-_[:alnum:]]+)\\n)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.tag.cs\" }, \"2\": { \"name\": \"entity.name.tag.cs\" }, \"3\": { \"name\": \"entity.name.tag.namespace.cs\" }, \"4\": { \"name\": \"punctuation.separator.colon.cs\" }, \"5\": { \"name\": \"entity.name.tag.localname.cs\" } }, \"end\": \"(/?>)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.tag.cs\" } }, \"name\": \"meta.tag.cs\", \"patterns\": [{ \"include\": \"#xml-attribute\" }] }, \"yield-break-statement\": { \"captures\": { \"1\": { \"name\": \"keyword.control.flow.yield.cs\" }, \"2\": { \"name\": \"keyword.control.flow.break.cs\" } }, \"match\": \"(?<!\\\\.)\\\\b(yield)\\\\b\\\\s*\\\\b(break)\\\\b\" }, \"yield-return-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(yield)\\\\b\\\\s*\\\\b(return)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.yield.cs\" }, \"2\": { \"name\": \"keyword.control.flow.return.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"yield-statement\": { \"patterns\": [{ \"include\": \"#yield-return-statement\" }, { \"include\": \"#yield-break-statement\" }] } }, \"scopeName\": \"source.cs\", \"aliases\": [\"c#\", \"cs\"] });\nvar csharp = [\n  lang\n];\n\nexport { csharp as default };\n"],"names":["csharp","Object","freeze"],"sourceRoot":""}